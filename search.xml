<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Week in Mar 12, 2023</title>
      <link href="/2023/03/12/weekly_101/"/>
      <url>/2023/03/12/weekly_101/</url>
      
        <content type="html"><![CDATA[<p>这一周的主题是 ChatGPT 相关的内容。3月初，OpenAI 开放了 ChatGPT 的接口。这两周以来各种相关的应用如雨后春笋般冒出来。</p><p>其中的一些产品已经成为我每天必用。同时我也在思考如何利用这些工具来提升我的学习和工作效率。尤其是在用 chatPDF 看文章或者论文时，不停地提出问题，会让我的注意力更加集中。</p><h2 id="使用过的产品">使用过的产品</h2><ul><li><a href="https://www.chatpdf.com/" target="_blank" rel="noopener">chatPDF</a></li><li><a href="https://www.typingmind.com/" target="_blank" rel="noopener">typingMind</a></li><li><a href="https://github.com/yetone/openai-translator" target="_blank" rel="noopener">openai-translator</a></li><li><a href="https://www.roomgpt.io/" target="_blank" rel="noopener">roomGPT</a></li><li><a href="https://github.com/mckaywrigley/paul-graham-gpt" target="_blank" rel="noopener">paul-graham-gpt</a></li></ul><h2 id="看的文章">看的文章</h2><ul><li><a href="https://www.jonstokes.com/p/chatgpt-explained-a-guide-for-normies" target="_blank" rel="noopener">chatgpt-explained-a-guide-for-normies</a></li></ul><p>前段时间在做一个 <a href="https://learnprompting.org/docs/intro" target="_blank" rel="noopener">prompt engineering</a> 的翻译。看完这篇文章终于明白了为什么需要使用 prompt 来控制 ChatGPT 的输出结果。</p><blockquote><p>原理<br><code>A generative model is a function that can take a structured collection of symbols as input and produce a related structured collection of symbols as output</code></p></blockquote><blockquote><p>确定性（Deterministic） VS  随机性（stochastic）</p></blockquote><blockquote><p>关联关系（Relationship matters）</p></blockquote><ul><li>符号关系之间的多样性和复杂性</li><li>潜在空间 -&gt; 可能输出结果的多维空间</li></ul><blockquote><p>概率分布（Probability distributions）</p></blockquote><ul><li>哪些方法可以改变 LLM 模型的概率分布<ul><li>训练（training）</li><li>微调（Fine-tuning）</li><li>人类反馈的强化学习（RLHF）</li></ul></li></ul><h2 id="一些思考">一些思考</h2><h3 id="学习到的技术">学习到的技术</h3><ul><li>paul-graham-gpt<ul><li>使用 embedding 来实现文本搜索 =&gt; 使用 cosSim 来计算相似度</li></ul></li></ul><pre><code class="language-ts">export const cosSim = (A: number[], B: number[] ) =&gt;    {        let dotproduct = 0        let MA = 0        let MB = 0        for (let I i &lt; A.length; i++) {            dotproduct += A[i] * B[i]            MA += A[i] * A[i]            MB += B[i] * B[i]        }        MA = Math.sqrt(mA)        MB = Math.sqrt(mB)        const similarity = dotproduct / (MA * MB)        return similarity    }</code></pre><ul><li>openai-translator<ul><li>使用 tauri 将 web 应用打包成桌面 APP</li></ul></li></ul><h3 id="独立开发者的机会">独立开发者的机会</h3><ul><li>typingmind 的开发者在<a href="https://twitter.com/tdinh_me/status/1634842333643698177" target="_blank" rel="noopener">一周之内收益</a> $20000</li></ul>]]></content>
      
      
      <categories>
          
          <category> weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bye, 2022</title>
      <link href="/2023/01/09/years2022/"/>
      <url>/2023/01/09/years2022/</url>
      
        <content type="html"><![CDATA[<h2 id="highlights">Highlights</h2><ul><li>搬了个家</li><li>当了个伴郎</li><li>再次去了一次成都</li><li>开始投资 Cryptocurrency 和 NFT</li><li>开始学习 Smart Contract</li><li>开始了解游戏开发 (pixi.js)</li><li>继续在 Mooc 上学习</li><li>写了 Let Me Speak Bot，开发对应的管理系统</li><li>在 Discord 上面和外国人练习口语</li><li>买了个升降桌</li><li>买了个无人机</li><li>看了几部经典的电影和剧集</li><li>读了好几本纸质书</li><li>加密圈暴雷事件</li><li>健康码成为过去时</li><li>AIGC 的大火</li></ul><h2 id="技术">技术</h2><h3 id="看的文章">看的文章</h3><ul><li><p><a href="https://www.erikkroes.nl/blog/accessibility/the-guide-to-accessible-web-components-draft/" target="_blank" rel="noopener">The Guide to Accessible Web Components</a></p></li><li><p><a href="https://developer.chrome.com/blog/inside-browser-part1/" target="_blank" rel="noopener">Inside look at modern web browser</a></p></li><li><p><a href="https://medium.com/nethermind-eth/ethereum-wallets-today-and-tomorrow-eip-3074-vs-erc-4337-a7732b81efc8" target="_blank" rel="noopener">Ethereum wallets today and tomorrow — EIP-3074 vs. ERC-4337</a></p></li><li><p><a href="https://guoyu.mirror.xyz/RD-xkpoxasAU7x5MIJmiCX4gll3Cs0pAd5iM258S1Ek" target="_blank" rel="noopener">Web3 DApp 最佳编程实践指南</a></p></li><li><p><a href="https://www.ln.edu.hk/f/upload/52672/67th-criticism2.pdf" target="_blank" rel="noopener">從誤認到「體」認，對My Little Airport 的跨境理解</a></p></li></ul><h3 id="听的播客">听的播客</h3><ul><li><p><a href="https://www.xiaoyuzhoufm.com/episode/6063bb8a8f1cdbcbb69ca417" target="_blank" rel="noopener">人口高龄化所带来的银发经济崛起</a></p></li><li><p><a href="https://www.xiaoyuzhoufm.com/episode/5f15bf9b6d76607427c80341" target="_blank" rel="noopener">跟多抓鱼的猫助聊聊二手生意和创业态度</a></p></li><li><p><a href="https://www.xiaoyuzhoufm.com/episode/60487a1a393439a08720b6d5" target="_blank" rel="noopener">和Vue.js的创造者尤雨溪聊开源软件</a></p></li><li><p><a href="https://www.xiaoyuzhoufm.com/episode/611a1adacb0b82e1df0adc62" target="_blank" rel="noopener">那些年，我们看的台湾青春电影</a></p></li><li><p><a href="https://www.xiaoyuzhoufm.com/episode/5ebeec95418a84a0468f2ed5" target="_blank" rel="noopener">音乐推荐算法的小秘密</a></p></li></ul><h2 id="生活">生活</h2><h3 id="书籍">书籍</h3><ul><li>《给青年的十二封信》—— 朱光潜</li><li>《苏东坡传》—— 李一冰</li><li>《城南旧事》—— 林海音</li><li>《棋王 树王 孩子王》—— 阿城</li><li>《一个人的小繁华》—— 高木直子</li><li>《有呀有呀书店》—— 吉竹伸介</li></ul><h3 id="电影">电影</h3><h2 id="输出">输出</h2><h2 id="想法">想法</h2><ul><li><code>传统项目如何接入 web3 =&gt; 内容创作平台 vocus 的实践</code></li><li><code>如何设计一个插件系统（vscode，figma，picgo, kap） 以及 web 技术的优势</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web Components 开发指北</title>
      <link href="/2022/12/15/web_component/"/>
      <url>/2022/12/15/web_component/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五年之前</title>
      <link href="/2022/10/14/daily_1014/"/>
      <url>/2022/10/14/daily_1014/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="💲🎗🌜🌱🎗🌴" />    <label for="pass">💲🎗🌜🌱🎗🌴</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>听播客——《人口老龄化所带来银发经济的崛起》</title>
      <link href="/2022/07/13/podcast_01/"/>
      <url>/2022/07/13/podcast_01/</url>
      
        <content type="html"><![CDATA[<p>昨天在即刻上看到了 yiqin 发的一张图片关于——中国几个不同年龄段人口数量的分布<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。</p><p><img src="https://img.5bang.top/podcast01_1.png" alt="2-Population by broad age groups"></p><p>刚好最近听的<a href="https://www.xiaoyuzhoufm.com/episode/6063bb8a8f1cdbcbb69ca417?s=eyJ1IjogIjVlZTJkY2ZlZTBkNjY0YTQ3Nzk0MjQ2ZSJ9" target="_blank" rel="noopener">这期播客</a>讲的也是关于人口老龄化的问题。还有结合最新出台的一些政策——上海落户进一步放宽，谈谈自己的一些思考。</p><h2 id="播客内容">播客内容</h2><ul><li>日本社会针对老年群体的个性化服务<ul><li>电子设备</li><li>药品</li><li>洗浴服务，裙带一些增值服务——染发，服饰，成人纸尿裤</li><li>重视银发人群的品牌营销</li></ul></li><li>创业公司的机会<ul><li>内衣，浴缸针对高龄群体应该如何设计</li></ul></li></ul><h2 id="一些思考">一些思考</h2><ul><li>社会问题如何成为新的创业机会</li><li>智慧养老产业的投资机会</li><li>银发经济，儿童经济的联动效应</li></ul><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://population.un.org/wpp/Graphs/DemographicProfiles/Line/156" target="_blank" rel="noopener">population.un.org</a> <a href="#fnref1" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 播客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My Web3 Roadmap</title>
      <link href="/2022/05/05/web3/"/>
      <url>/2022/05/05/web3/</url>
      
        <content type="html"><![CDATA[<h2 id="crypto">Crypto</h2><h3 id="key-pair">Key-Pair</h3><ul><li>what happens when you click the Create Account button?<ul><li>generate a private key</li><li><code>privateToPublic</code></li><li><code>keccak-256</code></li><li><code>pubToAddress</code></li></ul></li></ul><h3 id="gas">gas</h3><h2 id="smart-contract">Smart Contract</h2><h2 id="front-end">Front End</h2><h2 id="projects">Projects</h2>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Develop A Chrome Extension</title>
      <link href="/2021/08/16/chrome_extension/"/>
      <url>/2021/08/16/chrome_extension/</url>
      
        <content type="html"><![CDATA[<h2 id="resourse">resourse</h2><ul><li><a href="https://github.com/GoogleChrome/chrome-extensions-samples" target="_blank" rel="noopener">chrome-extensions-samples</a></li><li><a href="https://stackoverflow.com/tags/google-chrome-extension/info" target="_blank" rel="noopener">stackoverflow-tags</a></li><li><a href="https://github.com/Kocal/vue-web-extension" target="_blank" rel="noopener">vue-web-extension</a></li><li><a href="https://medium.com/@simoneldevig_80359/building-chrome-extensions-with-vue-js-cafaefb82bd4" target="_blank" rel="noopener">building chrome extension with vue.js</a></li></ul><h2 id="core-content">core content</h2><ul><li>manifest</li><li>background script</li><li>ui element</li><li>content script</li><li>options page</li></ul><h2 id="implement-extension">implement extension</h2><ul><li>loop the youtube video marked timestamp</li><li>add your own timestamp</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> extension </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双面奥运</title>
      <link href="/2021/08/14/%E5%8F%8C%E9%9D%A2%E5%A5%A5%E8%BF%90/"/>
      <url>/2021/08/14/%E5%8F%8C%E9%9D%A2%E5%A5%A5%E8%BF%90/</url>
      
        <content type="html"><![CDATA[<p>关于看完纪录片——<a href="https://www.youtube.com/watch?v=eDGVicG-HeE" target="_blank" rel="noopener">《双面奥运》</a>的一些想法。</p><h2 id="结构">结构</h2><blockquote><p>对日本社会的思考</p></blockquote><ul><li>奥运会的拍摄（正面负面）</li><li>举办奥运会的意义在哪</li><li>抗议的群众</li></ul><blockquote><p>采访的对象</p></blockquote><ul><li>冯天薇<ul><li>三届奥运会 高龄运动员</li></ul></li><li>廖宇靖<ul><li>为了传递火炬，从四川到东京</li><li><code>为了这一天从成都跑过来，然后隔离两个星期，回去再隔离三个星期，你觉得这一切值得吗</code></li><li><code>点燃圣火的瞬间，不管是个人的一些烦恼或是其他的一些烦恼，在那一瞬间消失。只有兴奋和激动， 开心</code></li></ul></li><li>李和林</li><li>东京奥组委成员<ul><li>奥运会的意义是什么<ul><li>连接</li><li>突破限制 =&gt; 苏炳添</li></ul></li></ul></li><li>福原爱<ul><li>之前是运动员，现在是解说员，也是不同的视角看奥运，对应标题</li></ul></li></ul><h2 id="想法">想法</h2><p>为期两周的奥运会已经结束了。这个属于体育迷的夏天也已与我挥手告别。<br>这是一届很不平凡的奥运会，是如此的与众不同。它备受质疑，反对举办的声音此起彼伏。也是唯一一次没有观众的奥运会，哪怕正在进行中也有可能随时被取消。<br>但是不管怎样，总算是顺利完成了这个全球性的体育赛事。两个星期的时间里，运动员们留下了很多感动的故事以及振奋的瞬间。对于我呢，每天都会去看相关的新闻和重要的比赛。奥运会是我这两周的主旋律。当苏炳添半决赛跑出9″83时，我的身体也不由自主的颤抖。黄种人再次在奥运会上创造了历史。然而我也同样忘不了日本在半决赛被墨西哥淘汰后，久保健英趴在地上抽泣。当然，还有马龙三连奥运会冠军，成为了乒乓球历史上当之无愧的goat。</p><p>这是我看到的奥运会的一面，和大多数人一样，只是关注精彩的比赛和自己喜欢的运动员。当然，奥运会不只有一面。这也正是这部记录片想告诉我们的。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 纪录片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学会学（3） —— 学习 React</title>
      <link href="/2021/03/15/lhtl_3/"/>
      <url>/2021/03/15/lhtl_3/</url>
      
        <content type="html"><![CDATA[<p>最近看了篇文章——《新技术学习不完全指北》<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>，很受启发。我经常会陷入「不知道学什么」和「不知道怎么学」的困境。有的时候也会做出一些所谓看起来的努力，但是收效甚微。</p><p>这篇文章会列举出部分上文中提到的关于新技术学习的方法，同时结合自己最近学习react的经历。探索一下如何学习。</p><p>先来审视下自己。拿现在自己从事的前端开发工作来说，我熟悉的技术栈都有哪些呢。工作中主要以JavaScript + Vue + CSS为主。因为公司的业务相对比较简单，所以并没有太多纵向探索的空间<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>。因此我想横向突破自己，也就是上面说的第一个困境——学什么。</p><h2 id="学习动机">学习动机</h2><h3 id="工作需求">工作需求</h3><blockquote><p>工作需求，是一个强烈的、持续性的、外部驱动的学习动机。那些跟工作关联起来的技术，通常就是我们掌握得最扎实、构成我们核心技术能力的部分。而那些跟工作关联程度弱的技术，则是最容易中途放弃的部分。</p></blockquote><p>其实很早之前就想学习react，typescript，但一直都没有去做。对于typescript的了解，只是知道它是javascript的超集。具体是啥样的，一直没有去看。原因是没有<code>充分的学习动机</code>。尽管我在github上看到很多优秀的开源项目都是以ts + react为技术栈，但是一直没有深入持续地探索。</p><h2 id="严肃学习">严肃学习</h2><h3 id="反思之前的失败经验">反思之前的失败经验</h3><p>很早之前——刚刚接触前端的时候，我在做一些看似努力的行为。经常会去看掘金社区的文章，还有「反复」看一些官方文档。首先我看一些技术文章的时间，大部分是在等待吃饭或者等地铁的时候。这部分其实是相当「碎片」的时间，很难去系统地学习。</p><p>所以这次再次决定学习react，在一开始我就制定了目标——完成<a href="https://github.com/Microsoft/frontend-bootcamp" target="_blank" rel="noopener">frontend-bootcamp</a>上的练习。因为这个项目是使用typescript + react实现的。</p><h2 id="高强度间歇性训练">高强度间歇性训练</h2><blockquote><p>让阅读材料反复出现</p></blockquote><p>结合学习react来说，主线学习是以<code>frontend-bootcamp</code>这个项目为主。总共分为两大步，总计13个小节。在写这篇文章的时候，我已经完成了全部的13个练习——使用ts + react实现了一个todo app。包括使用状态管理工具redux和fluent-ui来优化项目。</p><h2 id="超纲训练">超纲训练</h2><ul><li>给todoitem加上颜色标签</li><li>对todoitem进行分类</li></ul><h2 id="成果积累-输出">成果积累 =&gt; 输出</h2><ul><li>github</li><li>blog</li></ul><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>原文<a href="https://mp.weixin.qq.com/s/cO_aC6GmKNA_WS6TUsiHkg" target="_blank" rel="noopener">戳这里</a> <a href="#fnref1" class="footnote-backref">↩</a></p></li><li id="fn2" class="footnote-item"><p>诚然哪怕「简单」的CSS都有无限探索的方向，这里只是从业务角度而言 <a href="#fnref2" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> LHTL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Begin, 2021</title>
      <link href="/2021/01/10/years2021/"/>
      <url>/2021/01/10/years2021/</url>
      
        <content type="html"><![CDATA[<p>2020年对绝大部分人来说都是非常特别的一年。很多人的生活都发生了巨大的改变。我呢，经历了一些困难，也尝试了很多新的东西。</p><h2 id="highlights">Highlights</h2><ul><li>第一次做远程开发，挣到了5位数的薪酬（不过是港币😂）</li><li>找了两个月的工作，面了很多家公司</li><li>买了 MacBook Pro 和 iPhone</li><li>开始投资基金</li><li>开始听播客</li><li>坚持写周记</li><li>加入一个区块链行业相关的公司</li><li>重新开始打乒乓球</li></ul><h2 id="尝试">尝试</h2><ul><li>关于成为独立开发者的思考<ul><li>没那么难<blockquote><p>成为一个独立开发者是我一直以来都想做的事情。之前也写过一些小工具（wifi连接，密码生成等）</p></blockquote></li><li>利器</li></ul></li></ul><h2 id="阅读与思考">阅读与思考</h2><h3 id="开发与数学">开发与数学</h3><ul><li>css transform 原理 =&gt; 矩阵运算</li><li>傅里叶变换</li></ul><h3 id="开发与算法">开发与算法</h3><ul><li>waterfall layout =&gt; 动态规划</li><li>undo operation =&gt; 栈</li></ul><h2 id="知识库管理">知识库管理</h2><h2 id="文章">文章</h2><ul><li>build you own x<ul><li>[ ] build your own blockchain</li><li>[ ] build your own react</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计中的设计</title>
      <link href="/2021/01/02/%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1/"/>
      <url>/2021/01/02/%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>每个人都可以做一个设计师，因为你可以设计的不仅仅是一般意义上的“设计”，还有你的生活。</li></ul></blockquote><hr><blockquote><ul><li>无印良品要做的不是追求最便宜的价格，而是最适当的价格。</li></ul></blockquote><hr><blockquote><ul><li>我想做的是在一个可以俯瞰过去、现在与未来的视点上来思考问题。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把自己作为方法</title>
      <link href="/2021/01/02/%E6%8A%8A%E8%87%AA%E5%B7%B1%E4%BD%9C%E4%B8%BA%E6%96%B9%E6%B3%95/"/>
      <url>/2021/01/02/%E6%8A%8A%E8%87%AA%E5%B7%B1%E4%BD%9C%E4%B8%BA%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>不需要理论框架和参考材料，直接从生活经验中抽出历史认识。这可能正是项飙老师一直强调的那种温州味道的来源。</li></ul></blockquote><hr><blockquote><ul><li>深刻是从网状知识结构中来的，而那种犬儒式投降式地回到自己的小世界，买完菜、做完饭，其他什么都不管，只是消极的使用最好的能耗去应对，生命也可以维持下去，但就停止思考了。</li></ul></blockquote><hr><blockquote><ul><li>大学就是给你一个环境，让你在人生比较特殊的四五年中去探索自己，探索这个世界，允许你犯错误，允许你做疯狂的探索，让你对事情产生理解，当然也学到了基本的知识和技术。</li></ul></blockquote><hr><blockquote><ul><li>是先愤怒还是先好奇？是尽量温和甚至用淡淡的幽默感把事情描述清楚，还是直接去判断？</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 社会学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>terminal折腾记之windows篇</title>
      <link href="/2020/04/08/terminalWin/"/>
      <url>/2020/04/08/terminalWin/</url>
      
        <content type="html"><![CDATA[<p>最近把开发环境迁移到了 windows 上，久违的 windows 还是给我带来了不少的惊喜。简单的折腾<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>之后，终端的使用体验已经非常接近 Mac 了。<br>这篇文章作为之前写过的一篇文章——<a href="https://blog.5bang.top/2018/10/20/terminal/" target="_blank" rel="noopener">《terminal折腾记之Mac篇》</a>的姊妹篇。实现思路上大都相似。</p><h2 id="准备">准备</h2><ol><li><a href="https://github.com/microsoft/terminal" target="_blank" rel="noopener">windows-terminal</a></li><li><a href="https://github.com/mbadolato/iTerm2-Color-Schemes/tree/master/windowsterminal" target="_blank" rel="noopener">iTerm for windows</a></li><li><a href="https://github.com/JanDeDobbeleer/oh-my-posh" target="_blank" rel="noopener">oh-my-posh</a></li><li><a href="https://github.com/powerline/fonts" target="_blank" rel="noopener">powerline font</a></li></ol><h2 id="配置">配置</h2><h3 id="terminal-配置">terminal 配置</h3><h4 id="profiles-json-结构">profiles.json 结构</h4><p><img src="https://img.5bang.top/windows-terminal.png" alt="profiles"></p><p>复制 iTrem 上的颜色主题，导入到 <code>schemes</code> 数组中。然后在 <code>list</code> 中，使用这个键值 <code>&quot;colorScheme&quot;:&quot;lovelace&quot;</code>，生效主题颜色。当然你也可以把它写到 <code>defaults</code> 中，这样就会覆盖 <code>list</code> 中配置的所有终端。</p><h3 id="powershell-配置">powershell 配置</h3><ol><li>安装 oh-my-posh</li></ol><pre><code class="language-bash"># 安装命令Install-Module posh-git -Scope CurrentUser Install-Module oh-my-posh -Scope CurrentUser</code></pre><ol start="2"><li>下载 powerline font</li><li>配置 powershell_profile.ps1</li></ol><pre><code class="language-bash"># 如果之前没有配置文件，就新建一个 PowerShell 配置文件if (!(Test-Path -Path $PROFILE )) { New-Item -Type File -Path $PROFILE -Force }# 打开配置文件vi $PROFILE# 添加内容Import-Module posh-git Import-Module oh-my-posh # 设置主题Set-Theme Paradox</code></pre><ol start="4"><li>在powershell中使用vim</li></ol><pre><code class="language-bash"># 使用git内置的vim</code></pre><h3 id="vs-code-配置">vs code 配置</h3><p>如果之前在 vs code 中使用等宽字体的话，打开终端会发现命令提示符出现乱码。这时候要把终端的字体设为powerline，就像这样：</p><pre><code class="language-bash">&quot;terminal.integrated.fontFamily&quot;: &quot;Meslo LG M（你使用的字体） for Powerline&quot;</code></pre><h2 id="备份">备份</h2><p>现在，我们来整理一下整个改造终端的过程更改了哪些文件：</p><ul><li>profiles.json</li><li>powershell_profile.ps1</li><li>setting.json</li></ul><p>备份了这三个文件，就能在任何一台windows设备上还原有颜同时又很强大的终端了。</p><h2 id="最后">最后</h2><p>其实到了这里，只能说是实现 windows 下 terminal 的基本改造。还有很多的部分没有去折腾，比如：</p><ul><li>快捷键的绑定</li><li>WSL相关</li><li>编写自己的主题</li><li>tricks and tips</li></ul><p>更多的细节以及使用技巧，可以在<a href="https://github.com/microsoft/terminal/blob/master/doc/user-docs/index.md" target="_blank" rel="noopener">官方文档</a>中找到。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>系统环境须在 Windows 10 (build<code>1903</code>)以上 <a href="#fnref1" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础回顾（四）</title>
      <link href="/2020/03/01/review_04/"/>
      <url>/2020/03/01/review_04/</url>
      
        <content type="html"><![CDATA[<h2 id="对象复制的方法">对象复制的方法</h2><pre><code class="language-js">// 浅拷贝const obj = { a: 1 };const copyObj = Object.assign({}, obj);// 问题1 =&gt; 不能复制原型链上和不可枚举的属性const obj1 = Object.create({ value: 1}, {  bar: {    value: 2  },  baz: {    value: 3,    enumerable: true  }});const copyObj1 = Object.assign({}, obj1);console.log(copyObj1) // { baz: 3 }// 解决1 =&gt; 使用const copyObj_1 = Object.create(  Object.getPrototypeOf(obj1),  Object.getOwnPropertyDescriptors(obj1))console.log(copyObj_1) // {bar: 2, baz: 3}// 问题2 =&gt; 如果原数组的属性值还是一个对象引用，会指向该引用const obj2 = { a: { b: 1 } }const copyObj2 = Object.assign({}, obj2);obj2.a.b = 2;console.log(copyObj2); // { a: { b: 2 }}// 解决2 =&gt; 深拷贝const copyObj3 = JSON.parse(JSON.stringify(obj2));obj2.a.b = 3;console.log(copyObj3); // { a: { b: 2 }}</code></pre><h2 id="for-in-for-of-foreach之间的区别">for…in, for…of, forEach之间的区别</h2><pre><code class="language-js">// 遍历对象中可枚举的属性，也包括继承来的可枚举的属性// 可以是类数组对象或者是对象字面量，但不能是Set,Map对象for (let prop in ['a', 'b', 'c']) console.log(prop);  // 0, 1, 2 (array indexes)for (let prop in 'str')console.log(prop); // 0, 1, 2 (string indexes)for (let prop in {a: 1, b: 2, c: 3}) console.log(prop);  // a, b, c  (object property names)for (let prop in new Set(['a', 'b', 'a', 'd'])) console.log(prop);  // undefined =&gt; 属性值不可枚举// 遍历对象中的属性值// 可以是数组，字符串，Set,Map对象，但不能是对象字面量for (let val of ['a', 'b', 'c']) console.log(val);  // a, b, c (array values)for (let val of 'str') console.log(val);  // s, t, r (string characters)for (let val of {a: 1, b: 2, c: 3}) console.log(prop);  // TypeError (not iterable)for (let val of new Set(['a', 'b', 'a', 'd'])) console.log(val);  // a, b, d (Set values)// forEach是Array原型上的方法// 遍历数组中的元素，可以同时迭代数组对象的索引和属性值['a', 'b', 'c'].forEach(  val =&gt; console.log(val)   // a, b, c (array values));['a', 'b', 'c'].forEach(  (val, i) =&gt; console.log(i)  // 0, 1, 2 (array indexes));</code></pre><h2 id="计算字符串宽度的方法">计算字符串宽度的方法</h2><pre><code class="language-js">function mesure(str, font = getComputedStyle(document.documentElement).font) {  const canvas = document.createElement('canvas');  const ctx = canvas.getContext('2d');  ctx.font = font;  return ctx.measureText(str).width;}</code></pre><h2 id="扁平数组和树形结构的相互转换">扁平数组和树形结构的相互转换</h2><h2 id="手写一个promise">手写一个promise</h2><pre><code class="language-js">// 函数版// 状态改变前的状态this.status = &quot;pending&quot;;// 状态为resolved时this.value = undefined;// 状态为rejected时this.reason = undefined;function myPromise(executor) {  const resolve = value =&gt; {    if (this.status === &quot;pending&quot;) {      this.value = value;      this.status = &quot;resolved&quot;;    }  }  const reject = reason =&gt; {    if(this.status === &quot;pending&quot;) {      this.reason = reason;      this.status = &quot;rejected&quot;;    }  }  try {    executor(resolve, reject);  } catch (err) {    reject(err)  }} myPromise.prototype.then = (onFulfilled, onRejected) =&gt; {    switch(this.status) {      case &quot;resolved&quot;:        onFulfilled(this.value);        break;      case &quot;rejected&quot;:        onRejected(this.reason);        break;      default:    }  }</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再探js执行机制</title>
      <link href="/2020/02/24/EventLoop/"/>
      <url>/2020/02/24/EventLoop/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面">写在前面</h2><p>入行前端已两年有余了。之前我在一篇文章中写了——要明白前端领域的变与不变。现在和两年前一样，各种框架层出不穷，让人眼花缭乱。很多时候我也在问自己『这个还需要学吗』。这样很容易让我产生焦虑感。而且在面对新事物时，我经常会感到手足无措。归根结底还是基础知识不扎实，内功不够。这也是我写这篇文章的目的——提升内功，更好的理解『变与不变』。</p><h2 id="要开始了">要开始了</h2><p>先从这段代码开始探索之旅吧</p><pre><code class="language-js">console.log('开始了')// setTimeout1setTimeout(function () {  console.log('timeout1')  // promise1  new Promise(function (resolve) {    console.log('timeout1_promise')    resolve()  }).then(function () {    console.log('timeout1_then')  })}, 2000)for (var i = 1; i &lt;= 5; i++) {  // setTimeout2  setTimeout(function () {    console.log(i)  }, i * 1000)  console.log(i)}// promise2new Promise(function (resolve) {  console.log('promise1')  resolve()}).then(function () {  console.log('then1')})// setTimeout3setTimeout(function () {  console.log('timeout2')  // promise3  new Promise(function (resolve) {    console.log('timeout2_promise')    resolve()  }).then(function () {    console.log('timeout2_then')  })}, 1000)// promise4new Promise(function (resolve) {  console.log('promise2')  resolve()}).then(function () {  console.log('then2')})</code></pre><p>开始之前，喜欢思考问题的小伙伴可能会有两个问题。javascript为什么被设计为单线程语言，为什么又会有同步任务和异步任务的区分。这两个问题，在这里我就不细述了。感兴趣的同学请看阮老师的<a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener">这篇文章</a>。<br>现在我们来看一下js大致是怎么执行的。</p><p><img src="https://img.5bang.top/20200331165343.png" alt="Event Loop"></p><p>到底哪些是宏任务，哪些是微任务呢。大体上这样区分。</p><p>宏任务（macro-task)</p><ul><li>script(整体JavaScript代码)</li><li>setTimeout()</li><li>setInterval()</li><li>setImmediate()</li><li>I/O</li><li>UI render</li></ul><p>微任务（micro-task)</p><ul><li>promise</li><li>async/await(同☝)</li><li>process.nextTick</li><li>MutationObserver</li></ul><p>预备知识已经准备的差不多了，现在我们开始执行上面那段代码。</p><ul><li>首先整体script进入主线程，遇到<code>console.log()</code>，立即输出『开始了』</li><li>接下来遇到<code>setTimeout</code>，2s后回调函数function()被分发到宏任务Event Queue中（注意这里不是2s后<strong>执行</strong>），这里标记为setTimeout1</li><li>遇到<code>for</code>，直接执行，同理<code>setTimeout</code>中的回调函数被分发到宏任务Event Queue中（这里涉及到闭包的知识），标记为setTimeout2，然后执行<code>console.log</code>，输出『1，2，3，4，5』</li><li>遇到<code>promise</code>,<code>new Promise</code>直接执行，输出『promise1』。<code>then</code>被分发到微任务Event Queue中，标记为then1</li><li>接下来又遇到了一个<code>setTimeout</code>，1s后回调函数function()被分发到宏任务Event Queue中，标记为setTimeout3</li><li>又遇到<code>promise</code>，同理，输出『promise2』，<code>then</code>被分发到微任务Event Queue中，标记为then2</li></ul><p>第一轮事件循环的宏任务已经执行完毕。Event Queue中的任务如下表所示</p><table><thead><tr><th style="text-align:center"><strong>宏任务</strong></th><th style="text-align:center"><strong>微任务</strong></th></tr></thead><tbody><tr><td style="text-align:center">setTimeout1(2s later)</td><td style="text-align:center">then1</td></tr><tr><td style="text-align:center">setTimeout2(1s later)</td><td style="text-align:center">then2</td></tr><tr><td style="text-align:center">setTimeout3(1s later)</td><td style="text-align:center"></td></tr></tbody></table><p>根据上面的流程图，宏任务执行完后，js引擎的监视进程会检查此时有没有可以执行的微任务。这时后分发到微任务Event Queue的<code>then</code>将被执行。依次输出『then1』，『then2』</p><p><strong>第一轮事件循环全部执行完毕。</strong></p><p>好了，现在开始第二轮事件循环(1s后)。</p><ul><li>遇到<code>setTimeout2</code>,输出『6』，没有可以执行的微任务。执行新的宏任务。</li><li>遇到<code>setTimeout3</code>,输出『timout2』，<code>new promise</code>立即执行，输出『timeout2_promise』，<code>then</code>被分发到微任务Event Queue中。标记为then3<br>第二轮事件循环的宏任务执行完毕。Event Queue中的任务如下表所示</li></ul><table><thead><tr><th style="text-align:center"><strong>宏任务</strong></th><th style="text-align:center"><strong>微任务</strong></th></tr></thead><tbody><tr><td style="text-align:center">setTimeout1(1s later)</td><td style="text-align:center">then3</td></tr><tr><td style="text-align:center">setTimeout2(1s later)</td><td style="text-align:center"></td></tr></tbody></table><p>同理，宏任务执行完后。执行此轮的微任务then3。</p><p><strong>第二轮事件循环全部执行完毕。</strong></p><ul><li>遇到<code>setTimeout1</code>，执行<code>console.log</code>，输出『timeout1』，<code>new promise</code>立即执行，输出『timeout1_promise』,<code>then</code>被分发到微任务Event Queue中。标记为then4</li><li>第三轮事件循环宏任务执行完毕，执行此轮的微任务<code>then</code>，输出『timeout1_then』</li></ul><p><strong>第三轮事件循环执行完毕。</strong></p><ul><li><code>setTimeout2</code>中依次会产生4个宏任务，每隔1s输出一个6</li></ul><p><strong>至此，整段代码全部执行结束。</strong></p><blockquote><p>总结：宏任务执行完了，执行该宏任务产生的微任务。如果微任务在执行过程中产生新的微任务，则继续执行微任务。微任务执行完毕后，回到宏任务中开始下一轮循环。</p></blockquote><h2 id="async">async</h2><h2 id="node">node</h2><h2 id="参考资料">参考资料</h2><ul><li><a href="https://juejin.im/post/5e5c7f6c518825491b11ce93" target="_blank" rel="noopener">说说事件循环机制</a></li><li><a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">这一次，彻底弄懂 JavaScript 执行机制</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello, 2020</title>
      <link href="/2020/02/24/years2020/"/>
      <url>/2020/02/24/years2020/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="💲🎗🌜🌱🎗🌴" />    <label for="pass">💲🎗🌜🌱🎗🌴</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识格律诗创作</title>
      <link href="/2019/12/25/Tang_Poems/"/>
      <url>/2019/12/25/Tang_Poems/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>最近在github上发现了一个很有意思的开源项目，<a href="https://github.com/LingDong-/cope" target="_blank" rel="noopener">格律诗编辑程序</a>。它不但可以自动检查平仄等格律规则，并且能够通过机器学习来将自己的作品和《全唐诗》的诗句做对比。从而得出和自己所写诗句相似度高的唐诗。<br>想来，高中的时候也有一段时间痴迷于创作诗词，只是当时对于很多的基础知识都不是很了解。所以写出来的东西也只是自娱自乐，没有什么章法可言。<br>cope这个项目是使用node.js写的，运行在electron框架。刚好自己也在学习相关的知识，学习开发的同时又能学习诗词创作，何乐而不为呢。</p><h2 id="基本要素">基本要素</h2><h3 id="平仄">平仄</h3><ol><li>四声<br>解释：简单来说，对于<strong>普通话</strong>而言，1，2声为平，3，4声为仄。</li><li>基本句式</li></ol><ul><li>平起平收：平平【仄】仄平</li><li>平起仄收：【平】平平仄仄</li><li>仄起平收：【仄】仄仄平平</li><li>仄起仄收：【仄】仄平平仄<br>解释：平完了仄，仄完了平。【】里面的可平可仄。七言律诗同理，只需在前面加上两个平仄相反的字。</li></ul><h3 id="押韵">押韵</h3><h4 id="规则">规则</h4><p>双数句必须是同一个韵部，必须是平声韵。</p><h3 id="对仗">对仗</h3><h4 id="规则-v2">规则</h4><ol><li>律绝句不需要必须对仗</li></ol><p>王昌龄《出塞》 =&gt; 不对仗</p><blockquote><p>清时明月汉时关，万里长征人未还。但使龙城飞将在，不教胡马度阴山。</p></blockquote><p>杜甫《绝句》 =&gt; 对仗</p><blockquote><p>两个黄鹂鸣翠柳，一行白鹭上青天。窗含西岭千秋雪，门泊东吴万里船。</p></blockquote><ol start="2"><li>八句律诗中间两联必须对仗</li></ol><p>李商隐《锦瑟》</p><blockquote><p>锦瑟无端五十弦，一弦一柱思华年。【庄生晓梦迷蝴蝶，望帝春心托杜鹃】。<br>【沧海月明珠有泪，蓝田日暖玉生烟】。此情可待成追忆，只是当时已惘然。</p></blockquote><ol start="3"><li>八句以上的排律除了首尾两联，中间所有联必须对仗</li></ol><h4 id="对仗的不同种类">对仗的不同种类</h4><ol><li>工对 =&gt; 词性和门类均相同，上文杜甫的绝句就是典型的工对。两个 || 一行；黄鹂 || 白鹭；窗含 || 门泊；</li><li>宽对，邻对 =&gt; 词性和大的类别相同，如上文的柳 || 天；雪 || 船；它们门类不同，但都是名词。</li><li>…</li></ol><h3 id="黏连">黏连</h3><h4 id="规则-v3">规则</h4><p>双数句的第二个字和单数句的第二个字平仄要一致<br><img src="https://img.5bang.top/cope01.png" alt="cope01"></p><h2 id="结语">结语</h2><p>这篇文章整理了格律诗创作的基本知识和一些规则。当然格律诗创作如果过于追求形式上的规范，也可能会失去创作的乐趣。不过对于初学者而言，还是应该明白这些规则和常识。其实学习之道也大抵于此，只有先熟练掌握规则，才能创造。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 趣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周记</title>
      <link href="/2019/12/15/weeks_07/"/>
      <url>/2019/12/15/weeks_07/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="💲🎗🌜🌱🎗🌴" />    <label for="pass">💲🎗🌜🌱🎗🌴</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周分享 -- 重拾git</title>
      <link href="/2019/11/07/git/"/>
      <url>/2019/11/07/git/</url>
      
        <content type="html"><![CDATA[<p>这周轮到我做技术分享了，思来想去，还是决定选择git作为本周技术分享的主题。原因有二，一是最近在使用git时出现了一些难题，具体下文会有提到。二是，尽管每天都在使用git，但对于一些基础概念还是有模糊的地方，也想通过这次的分享进一步理解git。</p><h2 id="git原理">git原理</h2><p><img src="https://img.5bang.top/git.png" alt="git"></p><p><strong>workspace</strong>: 工作区（当前的开发位置）</p><ul><li><code>git pull</code>: 从远程仓库拉取最新的代码到工作区 =&gt; <code>git fetch</code> + <code>git merge</code></li><li><code>git diff</code>: 查看修改但未暂存的文件</li></ul><p><strong>index</strong>: 暂存区</p><ul><li><code>git add</code>: 工作区修改的内容提交到暂存区</li></ul><p><strong>repository</strong>: 本地仓库</p><ul><li><code>git commit</code>: 将暂存区内容提交到本地仓库</li><li><code>git fetch</code>或者<code>git clone</code>: 从远程仓库拉取/克隆代码到本地仓库</li></ul><p><strong>remote repository</strong>: 远程仓库</p><ul><li><code>git push</code>: 将本地仓库内容提交到远程仓库</li></ul><h2 id="常见问题">常见问题</h2><ol><li>git push origin master具体是在做什么事?</li></ol><p>把本地<code>master</code>分支上的内容，推一份到<code>origin</code>这个地方，并且在<code>origin</code>这个地方建立一个同名的<code>master</code>分支<br><strong>完整指令</strong>:<code>git push origin master:master</code> =&gt; <code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code></p><ol start="2"><li>git merge和git rebase的区别</li></ol><p>举例：把test分支合并到master分支</p><p><img src="https://img.5bang.top/test.png" alt="git-test"></p><p><code>git merge</code>的结果</p><p><img src="https://img.5bang.top/merge.png" alt="git-merge"></p><p><code>git rebase</code>的结果</p><p><img src="https://img.5bang.top/rebase.png" alt="git-rebase"></p><p><a href="https://gitbook.tw/playground#rebase" target="_blank" rel="noopener">在线演示</a></p><h2 id="最近遇到的问题">最近遇到的问题</h2><ol><li>本地项目运行出错，想要回退到之前的版本 =&gt; 本地仓库回退到之前的版本</li></ol><pre><code class="language-bash">git reset --hard/soft [需要回退的提交点]</code></pre><ol start="2"><li>撤销已经推送到仓库的提交 =&gt; 远程仓库回退到之前的版本</li></ol><pre><code class="language-bash">git reset --hard [需要回退的提交点]git push origin HEAD --force </code></pre><h2 id="更多">更多</h2><ul><li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html" target="_blank" rel="noopener">图解Git</a></li><li><a href="https://gitbook.tw/" target="_blank" rel="noopener">为你自己學Git</a></li><li><a href="https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging" target="_blank" rel="noopener">Git-Branching</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现原生拖拽</title>
      <link href="/2019/09/24/drag/"/>
      <url>/2019/09/24/drag/</url>
      
        <content type="html"><![CDATA[<h2 id="开始之前">开始之前</h2><p>最近喜欢上了做饭。开始做饭之前我会把食材都准备好，并注意一些食材的搭配。比如要做黄焖鸡，我会事先将红辣椒和青椒切块放在一起。然后佐料按照特定的顺序下锅，最后做出的味道一般都不会差。其实写代码也是一样，对于实现拖拽方法来说。<code>MouseEvent</code>就是要烹饪的食材。这是我们实现拖拽需要操作的对象。做黄焖鸡通常我会用半个童子鸡来做，当然用鸡腿肉也是完成ok的。拖拽方法也是如此，我们可以操作<code>mouse</code>对象。也可以操作<code>drag</code>对象。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动手实现一个vue分页组件</title>
      <link href="/2019/07/30/vue_component01/"/>
      <url>/2019/07/30/vue_component01/</url>
      
        <content type="html"><![CDATA[<h2 id="需求分析">需求分析</h2><ul><li>自定义显示的页码按钮的数量</li><li>自定义分页组件的颜色主题</li><li>可以选择显示文本内容或者图标来进行翻页操作</li></ul><h2 id="实现">实现</h2><ol><li>分页组件需要显示的页码按钮数量，可以通过pagesToDisplay()这个计算属性定义</li><li>颜色主题可以通过绑定一个<code>paginationClass</code>的class，返回颜色<code>type</code>实现</li><li>文本或图标的选择可以通过嵌套条件判断template实现</li></ol><h2 id="分页原理">分页原理</h2><p>实现分页主要依靠这两个参数，total(总条目数)，perPage(每页显示的条目数量)。后端可以通过这两个参数，返回相应的数据给前端。<br>整个分页组件中，相对来说比较麻烦的地方在于<strong>页码列表的显示逻辑</strong>。页码列表是一个返回[最小页码, 最大页码]的数组。进而，问题被切分为如何求解页码列表数组中页码值的最大值和最小值。这里定义两个计算属性maxPage()，minPage()来返回页码数组中页码值的最大值，和最小值。</p><h2 id="页面组件">页面组件</h2><pre><code class="language-html">&lt;template&gt;  &lt;ul class=&quot;pagination&quot; :class=&quot;paginationClass&quot;&gt;    &lt;!-- 前一页 --&gt;    &lt;li      class=&quot;page-item prev-page&quot;      :class=&quot;{ disabled: value === 1,'no-arrows': noArrows }&quot;    &gt;      &lt;a class=&quot;page-link&quot; arial-label=&quot;Previous&quot; @click=&quot;prevPage&quot;&gt;      &lt;!-- 是否有文本 --&gt;        &lt;template v-if=&quot;withText&quot;&gt;          perv        &lt;/template&gt;      &lt;!-- 箭头图标 --&gt;        &lt;i class=&quot;arrow-left&quot; v-else&gt;&lt;/i&gt;      &lt;/a&gt;    &lt;/li&gt;    &lt;!-- 当前显示的分页列表 --&gt;    &lt;li      class=&quot;page-item&quot;      v-for=&quot;item in range(minPage, maxPage)&quot;      :key=&quot;item&quot;      :class=&quot;{active: value === item}&quot;    &gt;      &lt;a class=&quot;page-link&quot; @click=&quot;changePage(item)&quot;&gt;{{item}}&lt;/a&gt;    &lt;/li&gt;    &lt;!-- 后一页 --&gt;    &lt;li      class=&quot;paga-item next-page&quot;      :class=&quot;{disabled: value === totalPage, 'no-arrows': noArrows}&quot;     &gt;      &lt;a class=&quot;page-link&quot; arial-label=&quot;Next&quot; @click=&quot;nextPage&quot;&gt;      &lt;!-- 文本内容 --&gt;        &lt;template v-if=&quot;withText&quot;&gt;          Next        &lt;/template&gt;        &lt;i class=&quot;arrow-right&quot; v-else&gt;&lt;/i&gt;      &lt;/a&gt;    &lt;/li&gt;  &lt;/ul&gt;&lt;/template&gt;</code></pre><h2 id="props">props</h2><pre><code class="language-js">props: {  // 颜色主题  type: {    type: String,    default: &quot;primary&quot;,    // 验证`type`的值    validator: value =&gt; {      return [        &quot;default&quot;,        &quot;primary&quot;,        &quot;info&quot;,        &quot;success&quot;,        &quot;danger&quot;      ].includes(value);    }  },  // 是否带有文本内容  withText: Boolean,  // 箭头图标  noArrows: Boolean,  // 页码数  pageCount: {    type: Number,    default: 0  },  // 每页显示的项数  perPage: {    type: Number,    default: 0  },  // 总项数  total: {    type: Number,    default: 0  },  // 当前页码的值  value: {    type: Number,    default: 1  }}</code></pre><h2 id="data">data</h2><pre><code class="language-js">data: {  // 页码列表中显示的页码数量  defaultPagesToDisplay: 5}</code></pre><h2 id="computed">computed</h2><pre><code class="language-js">computed: {  // 颜色主题  paginationClass() {    return `pagination-${this.type}`  },  // 总页码数  toatalPages() {    if (this.pageCount &gt; 0) return this.pageCount;    if (this.total &gt; 0 ) {      return Math.ceil(this.total / this.perPage);    }  },  // 显示的页码按钮数量  pagesToDisplay() {    if (this.totalPages &gt; 0 &amp;&amp; this.totalPages &lt; this.defaultPagesToDisplay) {      return this.totalPages;    } else {      return this.defaultPagesToDisplay;    }  },  // 页码列表中最小的页码数  minPage() {    if (this.value &gt;= this.pagesToDisplay) {      // 定义一个偏移量      const pagesToAdd = Math.floor(this.pagesToDisplay / 2);      // 假定的最大页码数 = 当前页码值 + 偏移量      const newMaxPage = this.value + pagesToAdd;      if (newMaxPage &gt; this.totalPages) {        return totalPages - this.pagesToDisplay + 1;      } else {        // 当前页码值始位处于页码列表的中间位置        return this.value - pagesToAdd;      }    } else {      // 当前页码值小于默认页码列表按钮数量时，最小页码数返回1      return 1;    }  },  // 页码列表中最大的页码数  maxPage() {    if (this.value &gt;= this.pagesToDisplay) {      const pagesToAdd = Math.floor(this.pagesToDisplay / 2);      const newMaxPage = this.value + pagesToAdd;      if (newMaxPage &lt; this.totalPages) {        return newMaxPage;      } else {        return totalPages;      }    } else {      // 当前页码值小于默认页码列表按钮数量时，最大页码数返回显示的页码列表按钮数      return this.pageToDisplay;    }  }}</code></pre><h2 id="methods">methods</h2><pre><code class="language-js">methods: {  // 页码列表数组  range(min, max) {    let arr =[];    for (let i = min; i &lt;= max; i++) {      arr.push(i);    }    return arr;  },  // 跳转页码  changePage(item) {    this.$emit(&quot;input&quot;, item);  },  // 下一页  nextPage() {    if (this.value &lt; this.totalPages) {      this.$emit(&quot;input&quot;, this.value + 1);    }  },  // 上一页  prevPage() {    if (this.value &gt; 1) {      this.$emit(&quot;input&quot;, this.value - 1);    }  }}</code></pre><h2 id="最后">最后</h2><p>想要不断提高自己的技术水平，就不能只满足于写<strong>业务组件</strong>。在写像分页这种<strong>独立组件</strong>的过程中，也让我思考<code>API的设计</code>，以及<code>功能复杂性</code>的问题。无论是多么复杂的组件，大体上都是由prop，event，slot三部分组成。具体的实现，主要还是依靠基础的javascript的能力。<br>此前，我也仿照element写了radio和input组件。希望自己能坚持去写这些独立组件，去发现更大的世界。本文的分页组件<a href="https://github.com/occupy5/my-vue-components/blob/master/src/components/MyPagination.vue" target="_blank" rel="noopener">源码</a>在这儿。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量命名的艺术</title>
      <link href="/2019/07/26/named/"/>
      <url>/2019/07/26/named/</url>
      
        <content type="html"><![CDATA[<p>这是一篇最近翻译的译文<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>（也是我的第二篇译文👏），在文章的部分地方做了少许改动，同时也在原文的基础上增加了一些内容。希望不要误人子弟。Have Fun!</p><blockquote><p>在计算机科学领域里只有两件事可以称之为难事：缓存失效（cache invalidation）和命名问题（naming things）。—— Phil Karlton</p></blockquote><p>关于命名这件事，在某些时候的确是非常困难的。但却值得我们花费精力去研究它。回顾一下，之前你是否看过类似于这样的代码？</p><pre><code class="language-js">const convertObj = (x, y, z) =&gt; {    const k = Object.keys(x);    return k.map((key) =&gt; {        return {            [y]: key,            [z]: x[key],        }    });}</code></pre><p>你能立刻知道它在做些什么吗？当然在你逐行读完这段代码后，可能会理解它想表达什么。但是，如果这段代码中的变量的命名方式更加优雅的话，我们会更容易理解这段内容。</p><p>好的变量命名是非常重要的，尤其是在动态类型语言中，因为没法用已经定义好的变量基本类型去帮助你理解该变量确切的含义。然而，如果能够在动态类型的语言中使用好的命名方法，代码较于静态类型的语言会变得更加易读。</p><p>接下来我将分享一些有关命名方法的基本规则，这些是我这些年来的经验之谈。通过变量不同的基本类型，对比举出一些例子。就让我们先从数组开始吧。</p><h2 id="arrays">Arrays</h2><p>数组对象是有序数据的集合，各项的基本类型大致相同。因为数组包含多个变量值，变量的命名应当是有意义的复数形式。</p><pre><code class="language-js">// 很bad很sad很dramaconst fruit = ['apple', 'banana', 'cucumber'];// 凑合const fruitArr = ['apple', 'banana', 'cucumber'];// 还不错const fruits = ['apple', 'banana', 'cucumber'];// 很好 - &quot;names&quot;暗示数组内容是字符串(strings)const fruitNames = ['apple', 'banana', 'cucumber'];// 优雅const fruits = [{    name: 'apple',    genus: 'malus'}, {    name: 'banana',    genus: 'musa'}, {    name: 'cucumber',    genus: 'cucumis'}];</code></pre><h2 id="booleans">Booleans</h2><p>布尔类型只有2个值，<code>true</code>或者<code>false</code>。变量命名时使用『is』，『has』或者『can』作为前缀，将有助于读者理解变量的类型。</p><pre><code class="language-js">// badconst open = true;const write = true;const fruit = true;// goodconst isOpen = true;const canWrite = true;const hasFruit = true;</code></pre><p>当遇到predicate函数（该函数返回一个boolean值）时，在具名函数之后命名变量会有些烦人。</p><pre><code class="language-js">const user = {  fruits: ['apple']}const hasFruit = (user, fruitName) =&gt; {  user.fruits.includes(fruitName)}// 这个时候应该怎么命名这个boolean变量？const x = hasFruit(user, 'apple');</code></pre><p>由于我们已经给函数名称加了个<code>has</code>的前缀，因此不能再以<code>hasProjectPermission</code>这种形式命名x这个boolean变量。在这种情况下，可以给<code>hasFruit</code>这个函数加上<code>check</code>或者<code>get</code>来修饰谓语(has)。</p><pre><code class="language-js">const checkHasFruit = (user, fruitName) =&gt; {  user.fruits.includes(fruitName)}const hasFruit = checkHasFruit(user, 'apple');</code></pre><h2 id="numbers">Numbers</h2><p>至于数字类型，想想有哪些描述数字的词汇。诸如这些词汇，<code>maximum</code>,<code>minimum</code>,<code>total</code>.</p><pre><code class="language-js">// badconst pugs = 3;// goodconst minPugs = 1;const maxPugs = 5;const totalPugs = 3;</code></pre><h2 id="functions">Functions</h2><p>函数应当使用动词和名词相结合的方式命名，当该函数在对象原型上产生某种行为时，它的名字应当能够体现出这一点。<code>actionResource</code>就是一个值得借鉴的命名格式。例如：<code>getUser</code>。</p><pre><code class="language-js">// baduserData(userId);userDataFunc(userId);totalOfItems(items);// goodgetUser(userId);calculateTotal(items);</code></pre><p>通常情况下，我使用<code>to</code>作为函数名称的前缀来表示转换变量的值。</p><pre><code class="language-js">// I like ittoDollors('euros', 20);toUppercase('a string')</code></pre><p>遍历子项的时候，我经常使用这种惯用的命名方式。当接收函数中的一个参数时，应当使用数组名称的单数形式。</p><pre><code class="language-js">// badconst newFruits = fruits.map(x =&gt; {  doSomething(x);});// goodconst newFruits = fruits.map(fruit =&gt; {  doSomething(fruit)})</code></pre><h2 id="回到开始">回到开始</h2><p>重构一下开头的那段代码</p><pre><code class="language-js">const arrayToObject = (array, id, name) =&gt; {  const arrayList = Object.keys(array);  return arrayList.map((key) =&gt; {      return {          [id]: key,          [name]: array[key]      }  });}</code></pre><h2 id="三省吾身">三省吾身</h2><pre><code class="language-js">// 之前命名 =&gt; rsshub项目// 1. 获取文章列表const list = $('.con_list li h3')      .find('a')      .map((i, e) =&gt; $(e).attr('href'))      .get();// 2. 对遍历出的文章地址链接发出请求const res = await got.get(itemUrl);// 改进命名const articleLists = $('.con_list li h3')      .find('a')      .map((i, list) =&gt; $(list).attr('href'))      .get();const responseData = await got.get(itemUrl);</code></pre><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://hackernoon.com/the-art-of-naming-variables-52f44de00aad" target="_blank" rel="noopener">原文链接</a> <a href="#fnref1" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写给大家看的设计书</title>
      <link href="/2019/07/05/%E5%86%99%E7%BB%99%E5%A4%A7%E5%AE%B6%E7%9C%8B%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B9%A6/"/>
      <url>/2019/07/05/%E5%86%99%E7%BB%99%E5%A4%A7%E5%AE%B6%E7%9C%8B%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>Robin亲密性原则是指：将相关的项组织在一起，移动这些项，使他们的物理位置相互靠近。这样一来，相关的项将被看做凝聚为一体的一个组，而不再是一堆彼此无关的片段。</li></ul></blockquote><hr><blockquote><ul><li>亲密性的思想并不是说所有一切都要更靠近，其真正含义是：如果某些元素在理解上存在关联，或者相互之间存在某种关系，那么这些元素在视觉上也应该有关联。除此以外，其他孤立的元素或元素组则不应存在亲密性。位置是否靠近可以体现出元素之间是否存在关系。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>苏菲的世界</title>
      <link href="/2019/07/05/%E8%8B%8F%E8%8F%B2%E7%9A%84%E4%B8%96%E7%95%8C/"/>
      <url>/2019/07/05/%E8%8B%8F%E8%8F%B2%E7%9A%84%E4%B8%96%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>到了文艺复兴时期，则认为研究大自然现象必须以观察，经验与实验为基础。我们称之为「实证法」。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哲学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础回顾（三）</title>
      <link href="/2019/04/26/review_03/"/>
      <url>/2019/04/26/review_03/</url>
      
        <content type="html"><![CDATA[<p>最近的一段时间，相较于之前还算是写了不少的东西。想要提高技术能力，最主要还是需要不断地练习。在练习的过程中去解决问题，这才是高效的学习方式。不知不觉中自己工作已经将近一年了。一年的时间，不长不短。但仔细想想，有效的时间又有多少呢？我想要在技术这条道路上不断的进步，我害怕自己停滞不前，只是重复业务（其实目前业务也不太多）。</p><p>之前看过一篇文章——<a href="https://juejin.im/post/5a576e98518825734d148a00" target="_blank" rel="noopener">《写代码水平的几个发展阶段》</a>，我也会在想，现在的我处在哪个阶段。可能现在的我还是停留在会用的阶段吧。也仿照element封装了部分页面组件，从一开始看element源码很吃力，到现在大致能理解它的实现方式，这个理解的过程本身也是学习进步的过程。<br>只会使用API，而不去思考。不过是把搬砖换了种形式而已。所以，我倾向于在学习技术时，尝试搞懂它的原理。就像git一样，如果只是单纯的使用不过是几条命令而已。其实搞懂一些原理，不过是让自己更加<strong>清晰过程</strong>而已。</p><h2 id="写的东西">写的东西</h2><h3 id="chuizi-weather">chuizi_weather</h3><blockquote><p>仿照锤子天气app用原生js写的一个简单的页面</p></blockquote><h4 id="css部分">css部分</h4><ul><li>布局：整体使用flex布局，单位：使用vw, vh</li><li>纯css实现switch button</li></ul><pre><code class="language-html">&lt;div class=&quot;switch&quot;&gt;  &lt;input type=&quot;radio&quot; name=&quot;switch&quot; id=&quot;switch-off&quot;&gt;  &lt;input type=&quot;radio&quot; name=&quot;switch&quot; id=&quot;switch-on&quot; checked&gt;  &lt;!-- 切换华氏度和摄氏度 --&gt;  &lt;label for=&quot;switch-off&quot;&gt;°C&lt;/label&gt;  &lt;label for=&quot;switch-on&quot;&gt;°F&lt;/label&gt;  &lt;!-- 切换按钮 --&gt;  &lt;span class=&quot;toggle&quot;&gt;&lt;/span&gt;&lt;/div&gt;</code></pre><pre><code class="language-css">/* 使用一般元素选择符~，实现元素不同状态之间的切换 *//* off,on颜色切换动画 */.switch input:checked~label:nth-of-type(1) {  color: #EFEFEF;}.switch input:checked~label:nth-of-type(2) {  color: #737373;}.switch input~:checked~label:nth-of-type(1) {  color: #737373;}.switch input~:checked~label:nth-of-type(2) {  color: #EFEFEF;}/* 滑动切换动画效果 */.switch input:checked~.toggle {  left: 2px;}.switch input~:checked~.toggle {  left: 46px;}</code></pre><ul><li>伪元素的使用 =&gt; 实现按钮内的样式</li></ul><pre><code class="language-html">&lt;div class=&quot;button refresh&quot;&gt;&lt;/div&gt;</code></pre><pre><code class="language-css">.button {  width: 32px;  height: 32px;  background: #F6F6F6;  border-radius: 50%;  box-shadow:0 0 10px #C9C9C9;  border: 1px solid rgba(0,0,0,0.1);}.refresh {  position: relative;  overflow: hidden;}/* 按钮内圆圈 */.refresh::before {  content: &quot;&quot;;  position: absolute;  width: 50%;  height: 50%;  border-radius: 50%;  border: 2px solid #696969;  /* 垂直水平居中 */  top: 50%;  left: 50%;  transform: translate(-50%,-50%);}/* 竖杠将圆圈分割 */.refresh::after {  content: &quot;&quot;;  position: absolute;  background: #F6F6F6;  width: 10%;  height: 80%;  top: 50%;  left: 50%;  transform: translate(-50%,-50%) rotate(-45deg);}</code></pre><ul><li>css transform =&gt; 卡片翻转动画</li></ul><pre><code class="language-html">&lt;div class=&quot;card&quot;&gt;  &lt;div class=&quot;front&quot;&gt;&lt;/div&gt;  &lt;div class=&quot;back&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><pre><code class="language-css">.front, .back {  backface-visibility: hidden;  transform-style: preserve-3d;  transition: all .5s;}/* 翻转效果 */.back {  transform: rotateY(-180deg);}.flip .back {  transform: rotateY(0deg);}.flip .front {  transform: rotateY(180deg);}</code></pre><h4 id="js部分">js部分</h4><ul><li>fetch</li></ul><pre><code class="language-js">fetch(apiDaily)    .then(response =&gt; {      return response.json()    })    .then(data =&gt; {      //...    })</code></pre><ul><li>使用js对象</li></ul><pre><code class="language-js">// 从api中获取天气数据信息const weatherData = data.results[0];// 获取json中的温度，文本，及天气图标代码const { temperature, text, code } = weatherData.now;// DOM操作currentTemperature.textContent = temperature;textWeather.textContent = text;</code></pre><ul><li>模板字符串 =&gt; 动态加载天气图标</li></ul><pre><code class="language-html">&lt;img src=&quot;&quot; class=&quot;weather-icon&quot;&gt;</code></pre><pre><code class="language-js">let weatherIcon = document.querySelector('.weather-icon')//动态加载天气图标weatherIcon.src = `./icon/${code}.png`;</code></pre><ul><li>classList.toggle() =&gt; 使用原生js实现jquery toggleClass方法</li></ul><pre><code class="language-js">//card翻转flipLeft.addEventListener(&quot;click&quot;, () =&gt; {  flip.classList.toggle('flip')})flipRight.addEventListener(&quot;click&quot;, () =&gt; {  flip.classList.toggle('flip')})</code></pre><h3 id="github">github</h3><h4 id="brooklyn-screensaver">Brooklyn Screensaver</h4><blockquote><p>一个开源的Mac OS屏保程序</p></blockquote><ul><li><a href="https://github.com/pedrommcarrasco/Brooklyn/issues/40" target="_blank" rel="noopener">issues</a> =&gt; Can’t modify configuration</li><li>solve: git proxy的问题，导致brew无法更新。与项目本身无关，故以后提issues前，先全面排查自己环境的问题。</li></ul><h4 id="rsshub">RSSHub</h4><blockquote><p>RSSHub 是一个轻量、易于扩展的 RSS 生成器，可以给任何奇奇怪怪的内容生成 RSS 订阅源</p></blockquote><ul><li>pull requests<ul><li>add 7x24小时快讯</li><li>add 观察者风闻话题</li><li>add 数英网专题内容</li></ul></li></ul><p>这是自己在github上参与的第一个开源项目，收获还是挺多的。学会了使用cheerio爬取网页的信息，和node一些API的使用。以及如何规范的给开源项目提交pr。当解决别人提出的需求，然后被其关注和感谢后。还是有不少的成就感的。</p><h2 id="继续做的">继续做的</h2><p>-[ ] 继续写vue组件库，熟练掌握vue的使用。<br>-[ ] 完成一个完整的TODO App。设计稿参考dribble，后端尝试使用LeanCloud。<br>-[ ] 使用vue重构之前的Chuizi weather。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础回顾（二）</title>
      <link href="/2019/03/28/review_02/"/>
      <url>/2019/03/28/review_02/</url>
      
        <content type="html"><![CDATA[<p>接下来的时间，我会总结几篇js基础知识的文章。可能这些知识点都是老生常谈，网上一搜一大堆。但只有把基础知识打牢，才能在programing这条路上走的更远。一定要理解前端领域的变与不变，不能一味地追逐热门。</p><h2 id="数组去重">数组去重</h2><pre><code class="language-js">  //原数组上操作  //思路：判断数组中每个元素是否与后一个元素相等，如果相等，就使用splice()删除后面的元素  function dup1(arr) {    for (var i = 0; i &lt; arr.length; i++) {      for (var j = i + 1; j &lt; arr.length; j++) {        if (arr[i] === arr[j]) {          arr.splice(j,1);          j--;        }      }    }    return arr;  }  //新数组  //思路：遍历原数组，使用indexOf判断新数组是否包含原数组的每一项，如果没有就push进新数组  function dup2(arr) {    var newArr = [];    for (var i = 0; i &lt; arr.length; i++) {      if (newArr.indexOf(arr[i]) == -1) {        newArr.push(arr[i]);      }    }    return newArr;  }  //使用对象  //思路： 把数组的值存为object的key值，去对象中访问属性  function dup3(arr) {    var newArr = [];    var obj = {};    for (var i = 0; i &lt; arr.length; i++) {      if (!obj[arr[i]]) {        newArr.push(arr[i]);        obj[arr[i]] = 1;      }    }    return newArr;    // return arr.filter(function(item, index, arr) {    //   return obj.hasOwnProperty(item) ? false : (obj[item] = true);    // })  }  //使用filter  function dup4(arr) {    var filterArr = arr.filter(function(item, index, arr) {      return arr.indexOf(item) === index;    })    return filterArr;  }  //箭头函数写法  const filterArr = (arr) =&gt; {    return arr.filter((item, index, arrCurrent) =&gt; arrCurrent.indexOf(item) === index)  }  //ES6 set  function dup5(arr) {    // 也可以使用展开运算符    return Array.from(new Set(arr)) || [...new Set(arr)]  }</code></pre><h2 id="实现multiply-方法">实现multiply()方法</h2><blockquote><p>描述：const a = [1, 2, 3, 4, 5];  a.multiply(); =&gt; [1, 2, 3, 4, 5, 1, 4, 9, 16, 25]</p></blockquote><pre><code class="language-js">// 方法1 =&gt; not good，没有按照要求let multiply = function(arr) {  let multiplyArr = arr.map(num =&gt; num * num);  return arr.concat(multiplyArr);};const a = [1, 2, 3, 4, 5];multiply(a);// 方法2 =&gt; not bad，直接在数组原型上添加方法Array.prototype.multiply = function() {  let multiplyArr = this.map(num =&gt; num * num);  this.push(...multiplyArr);}// 方法3 =&gt; good，在对象上添加方法const pushArr = function(arr, num) {  arr.push(num * num);  return arr;}a.multiply = function() {  return this.reduce(pushArr, this);}// 方法4 =&gt; very good，使用ES6，语句更简洁a.multiply = () =&gt; [...a, ...a.map(num =&gt; num * num)];</code></pre><h2 id="实现extname-描述">实现extname()描述</h2><blockquote><p>描述：对于给定的文件名返回它的拓展名，如emoji.png =&gt; .png</p></blockquote><pre><code class="language-js">// 找到文件名的最后一个『.』，然后返回后面的字符串内容function extname(filename) {  return filename.lastIndexOf('.') &gt; 0 ? filename.slice(filename.lastIndexOf('.')) : '';}</code></pre><h2 id="实现flattened-方法">实现flattened()方法</h2><blockquote><p>描述：对多维数组进行降维操作，如[[1, 2],[3, 4]] =&gt; [1, 2, 3, 4]</p></blockquote><pre><code class="language-js">// 方法1 =&gt; 递归function flattened1(arr) {  let flattenedArr = [];  // 循环传入的数组元素  arr.map(function(item) {    // 如果还是一个数组，就递归调用该方法    if (Array.isArray(item)) {      flattenedArr = flattenedArr.concat(flattened(item));    } else {      flattenedArr.push(item);    }  })  return flattenedArr;}// 方法2 =&gt; toString()// 限制：数组元素只能为数字function flattened2(arr) {  arr.toString().split(',').map(function(item) {    // 类型转换    return +item;  })}// 方法3 =&gt; reduce// 限制：只能降二维的数组function flattened3(arr) {  return arr.reduce((acc, cur) =&gt; acc.concat(cur),[]);}// 方法3改进版function flattened3(arr) {  return arr.reduce((acc, cur) =&gt; {    return acc.concat(Array.isArray(cur) ? flattened3(cur) : cur);  }, [])}// 方法4 =&gt; 扩展运算符// 限制：与方法三一样function flattened4(arr) {  return [].concat(...arr);}// 方法4改进版function flattened4(arr) {  while(arr.some(item =&gt; Array.isArray(item))) {    arr = [].concat(...arr);  }  return arr;}// 思考 =&gt; 结合数组去重和降维的方法，实现数组的并集操作function union(...args) {  return [...new Set([].concat(...args))];}</code></pre><h2 id="使用symbol优化代码">使用Symbol优化代码</h2><blockquote><p>实现一个getArea()方法，返回三角形，圆以及矩形的面积</p></blockquote><pre><code class="language-js">// 原始function getArea(shape, options) {  let area = 0;  switch(shape) {    case 'triangle':      area = .5 * options.width * options.height;      break;    case 'circle':      const Pi = 3.14;      area = Pi * options.width * options.height;      break;    case 'rectangle':      area = options.width * options.height;      break;  }  return area;}getArea('triangle', {width: 100, height: 100});getArea('circle', {width:200, heigth: 200})// 使用symbolconst shapeType = {  triangle: Symbol(),  circle: Symbol(),  rectangle: Symbol()}// 省略部分代码...switch(case) {  case: shapeType.triangle:  case: shapeType.circle:  case: shapeType.rectangle:}getArea(shapeType.triangle, {width: 100, height: 100});getArea(shapeType.circle, {width: 200, height: 200});</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日语入门（1）</title>
      <link href="/2019/03/23/learn_japanese/"/>
      <url>/2019/03/23/learn_japanese/</url>
      
        <content type="html"><![CDATA[<p>学习日语已经有一周多的时间了，这一周的时间主要是基础部分的学习。包括日文的结构，五十音的读写和发音。<br>为什么要学习日语呢？直接原因是，一周前，我看了少数派的一篇文章——<a href="https://sspai.com/post/53020" target="_blank" rel="noopener">《聊一聊50音起源的再设计》</a>。作者是一名独立开发者，对产品设计与体验有着极致的追求。然后我便在ipad上体验了这个app。与其说是一个学习的app，不如说它是一个艺术品。于是，我决定立即学习日语（🆒）。<br>当然也有很多其他的原因，例如日语发音很好听，想要学习ruby，喜欢听日文歌之类的。<br>日式料理马上就要开始了，只有app作为食材是完全不够的。作为一个完全零基础的日语学习者，一开始，我甚至不知道50音是什么。所以我决定在mooc上选择一门入门的课程。mooc上有很多关于日语学习的课程，看了课程的视频简介后，我选择《自由自在日本行》作为我的入门零基础入门课程。一边学习日语，一边还能了解日本的文化与名胜。すごい！</p><h2 id="学习方式">学习方式</h2><p><img src="https://img.5bang.top/japanese1.png" alt="roadmap"></p><h2 id="组成结构">组成结构</h2><p><strong>混合书写</strong>是日本文字表达的特色</p><ul><li>万叶假名： 使用和日语同音的汉字来书写日文，以补足用汉语记录日语假名是相对于『真名（汉字）』而言的，假是『假借』的意思</li><li>日文汉字： 主要用于表达实物的名称和动作</li><li>平假名：日文中表音文字的一种，从万叶假名演化而来，形近汉语草书。主要用来标注日文汉字的注音，还有一些具有语法功能的助词和助动词</li><li>片假名：平安时代初期为了训读<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>汉文发明的。由万叶假名的楷书写法中简化而来。主要用来书写外来语，拟声拟态词</li><li>罗马字：多用于招牌和广告</li></ul><h2 id="日文汉字">日文汉字</h2><p>中国人学习日语，自然是有天然的优势。因为汉语和日语都传承了<strong>古汉字</strong>的字形和字义，而且现代汉语中有很多词也借用了明治时期的<strong>日文翻译语</strong>。但在日文汉字中很多尽管字形和汉语相同，但含义却完全不同。</p><blockquote><p>旅行中常见的日文汉字</p></blockquote><table><thead><tr><th>日文汉字</th><th>中文翻译</th></tr></thead><tbody><tr><td>无料</td><td>免费</td></tr><tr><td>仕度中</td><td>（店铺）还未对外开放</td></tr><tr><td>献立</td><td>菜单</td></tr><tr><td>注文</td><td>点餐</td></tr><tr><td>会计</td><td>结账</td></tr><tr><td>割引</td><td>降价</td></tr></tbody></table><blockquote><p>格外注意的日文汉字</p></blockquote><table><thead><tr><th>日文汉字</th><th>中文翻译</th></tr></thead><tbody><tr><td>手纸</td><td>信</td></tr><tr><td>新闻</td><td>报纸</td></tr><tr><td>娘</td><td>女儿，女孩子</td></tr><tr><td>丈夫</td><td>坚固</td></tr><tr><td>切手</td><td>邮票</td></tr><tr><td>勉强</td><td>学习，用功</td></tr></tbody></table><h2 id="50音学习">50音学习</h2><p>50音是日语学习的基础，但也让初学者很头疼。假名记不住，易记混，这可能是大部分人都要面临的问题。关于假名的记忆方法有很多种，我目前采用的方法是根据词源记忆。当然，你也可以试试<a href="https://www.zhihu.com/question/20318161/answer/53704368" target="_blank" rel="noopener">形象记忆</a>。这里我想强调的是50音起源app的开发者kevin的一句话，『我认为日语学习并不是简单的学习假名，词汇，语法。而是应该是从其背后的文化开始学起，产生共鸣与认同』。</p><h3 id="发音">发音</h3><p>发音也是50音学习过程中非常重要的一部分。好在汉语拼音基本包括了日语的罗马字读音。</p><blockquote><p>音调</p></blockquote><ul><li>口型不变</li><li>音调不变</li></ul><h4 id="清音">清音</h4><p>注意：<br>さ行中</p><table><thead><tr><th style="text-align:center">罗马音</th><th style="text-align:center">平假名</th><th style="text-align:center">片假名</th></tr></thead><tbody><tr><td style="text-align:center">sa</td><td style="text-align:center">さ</td><td style="text-align:center">サ</td></tr><tr><td style="text-align:center">shi</td><td style="text-align:center">し</td><td style="text-align:center">シ</td></tr><tr><td style="text-align:center">su</td><td style="text-align:center">す</td><td style="text-align:center">ス</td></tr><tr><td style="text-align:center">se</td><td style="text-align:center">せ</td><td style="text-align:center">セ</td></tr><tr><td style="text-align:center">so</td><td style="text-align:center">そ</td><td style="text-align:center">ソ</td></tr></tbody></table><p>し =&gt; 发xi的音<br>す =&gt; 发音时要用接近う的口型</p><h4 id="浊音">浊音</h4><p>共有四行，在相对应的清音右上角加两点。口型和舌位与对应的清音一致，声带震动的时间要比清音早一点。<br>注意：<br>za行和da行，有两对假名发音一样，但是在日语单词中<strong>以じ、ず优先</strong>。</p><table><thead><tr><th style="text-align:center">罗马字</th><th>假名</th></tr></thead><tbody><tr><td style="text-align:center">ji</td><td>じジ ＆ ぢヂ</td></tr><tr><td style="text-align:center">zu</td><td>ずズ　＆ づヅ</td></tr></tbody></table><h4 id="半浊音">半浊音</h4><p>在は行的右上角加上一个圈圈</p><p>注意：</p><table><thead><tr><th>假名</th><th>中文翻译</th></tr></thead><tbody><tr><td>かき</td><td>钥匙</td></tr><tr><td>かき</td><td>柿子</td></tr><tr><td>がき</td><td>小淘气鬼</td></tr></tbody></table><h4 id="长音">长音</h4><p>在日语中，元音的长度会影响到单词的意思。长元音的发音长度大致是短元音的两倍，一个假名一拍，长音的长度是两拍。</p><table><thead><tr><th>短音</th><th>长音</th></tr></thead><tbody><tr><td>おばさん（伯母，舅妈，婶婶，阿姨）</td><td>おば<strong>あ</strong>さん（祖母，外祖母）</td></tr><tr><td>おじさん（伯父，叔叔，姑父，舅舅）</td><td>おじ<strong>い</strong>さん（祖父，外祖父）</td></tr><tr><td>いえ（房子）</td><td>い<strong>い</strong>え（不）</td></tr><tr><td>くろ（黑色）</td><td>く<strong>う</strong>ろ（乘飞机）</td></tr><tr><td>ちず（地图）</td><td>チ<strong>ー</strong>ズ（奶酪）</td></tr></tbody></table><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>只借用汉字的形和义，不采用汉语的音 <a href="#fnref1" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> LHTL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日语学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础回顾（一）</title>
      <link href="/2019/03/01/review_01/"/>
      <url>/2019/03/01/review_01/</url>
      
        <content type="html"><![CDATA[<h1>weex开发总结</h1><h2 id="知识方面">知识方面</h2><h3 id="样式">样式</h3><ol><li>只支持像素值</li><li>border不支持组合写法，如border: 1px solid #FFA500</li></ol><pre><code class="language-css">border-style: border-width:border-color:border-radius:</code></pre><ol start="3"><li>weex盒模型的box-sizing默认为<strong>border-box</strong>，故盒子的宽高=内容(content)+内边距(padding)+边框宽度(border)，不包含外边距(<strong>margin</strong>)的宽度</li><li>weex中，flex是默认且唯一的布局模型，故不用再写dispaly:flex</li><li>Weex 目前不支持 <strong>z-index</strong> 设置元素层级关系，但靠后的元素层级更高</li><li>background-image 优先级<strong>高于</strong>background-color，且不能使用<strong>background</strong>简写</li><li>box-shadow不支持android</li></ol><h3 id="vue">vue</h3><ol><li>定义组件时不支持template选项</li><li>不支持使用x-templates</li><li>不支持使用Vue.compile</li><li>不支持事件修饰符，按键修饰符，系统修饰符</li><li>不支持keep-alive：没有<strong>activated</strong>和<strong>deactivated</strong>两个阶段</li></ol><h2 id="业务方面">业务方面</h2><h2 id="拒接订单操作">拒接订单操作</h2><p>使用weex的modal模块，当用户点击拒接订单按钮时，使用confirm()方法，处理用户的逻辑操作。使用prompt(),接收用户填写的拒接理由。</p><pre><code class="language-js">methods: {    refuseOrder(e) {      modal.confirm({      message: '确认拒接此订单？',      okTitle: '确定',      cancelTitle: '取消'    },res =&gt; {        if(res == '确定') {            modal.prompt({                message: '请填写拒接理由',                okTitle: '提交',                cancelTitle: '取消'            },res =&gt; {                if(res == '提交') {                    //提交后的操作                } else if(res == '取消') {                    //取消后的操作                }            })        } else if(res == '取消') {            //取消后的操作        }      })    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>春节回家</title>
      <link href="/2019/02/13/years_03/"/>
      <url>/2019/02/13/years_03/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="💲🎗🌜🌱🎗🌴" />    <label for="pass">💲🎗🌜🌱🎗🌴</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 胡思乱想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac外接显示器那点事</title>
      <link href="/2019/01/24/mac_display/"/>
      <url>/2019/01/24/mac_display/</url>
      
        <content type="html"><![CDATA[<p>最近给macbook新接了个显示器，型号是优派 vx3209-2k。很显然它是个2k的显示器，早就听闻macbook接2k的显示器会出现字体模糊的问题。但是很多东西要自己试过才知道。果不其然，连上显示器后，字体偏小且边缘有些模糊。<br>因为提前做了功课，整体显示效果在意料之中，接下来就是折腾的乐趣了。先在网上搜索相关的文章，发现了诸如系统升级后使用不了还有自定义显示器配置文件此类的问题。有预感到整个过程肯定会很麻烦。但在我踩过一些坑（尝试安装switchResX失败）之后，发现整个过程还是非常简单的。</p><h2 id="设备信息">设备信息</h2><ul><li>macbook 2016(12&quot;)</li><li>macOS 10.14</li></ul><h2 id="最简单的解决方式">最简单的解决方式</h2><p>工具</p><ul><li><a href="https://github.com/syscl/Enable-HiDPI-OSX" target="_blank" rel="noopener">Enable-HiDPI</a></li><li><a href="http://avi.alkalay.net/software/RDM/" target="_blank" rel="noopener">RDM</a></li></ul><ol><li>进入Recovery模式(重启时按住cmd + R)</li><li>打开终端，输入<code>csrutil disable</code></li><li>下载Enable-HiDPI</li></ol><pre><code class="language-shell">curl -o ~/enable-HiDPI.sh https://raw.githubusercontent.com/syscl/Enable-HiDPI-OSX/master/enable-HiDPI.sh</code></pre><ol start="4"><li>修改脚本的权限，<code>chmod +x ~/enable-HiDPI.sh</code></li><li>运行脚本，<code>~/enable-HiDPI.sh</code></li><li>设置参数，例如输入<code>1920*1080</code></li><li>下载RDM</li><li>重启，应用设置</li><li>最后，再次进入终端，输入<code>csrutil enable</code><br>上图：<br><img src="https://img.5bang.top/Xnip2019-01-27_00-35-25.png" alt="RDM"></li></ol><h2 id="相关概念">相关概念</h2><ul><li>retina:一种显示技术，在屏幕上压缩更多的像素点</li><li>ppi:每英寸所拥有的像素数目，即ppi = $\frac{\sqrt{横向^2 + 纵向^2}}{屏幕尺寸(inch)}$</li><li>HiDPI:用软件的方式实现单位面积内的高密度</li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 外接显示器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遇见</title>
      <link href="/2018/12/14/years_02/"/>
      <url>/2018/12/14/years_02/</url>
      
        <content type="html"><![CDATA[<p>今天，距离自己正式工作已过去了整整半年的时间。时间过得真快，竟然都开始使用「年」这个单位了。这半年里，我有那些进步还有哪些不足呢？都是需要静下来去认真思考的。</p><h2 id="成长与迷茫">成长与迷茫</h2><p>先来说说成长吧，几个月的时间里，我接触了很多前端的事物。vue,weex,eros还有jQuery(真香警告)以及rails。业务方面，也写了前台页面，后台管理系统还有app。看似很多，其实主要还是写vue居多。很多页面的实现也主要是依赖一些开源的组件库。<br>从上周开始，我已经开始感觉到自己对一些事物的认知在慢慢的清晰起来。拿vue来说，之前写的一些页面很多是直接复制粘贴element这个库的，当时有很多不懂的地方，现在也大都能理解。还有，vue文档的内容以及一些js原型上的方法，都正在变得越来越清晰。这种感觉很棒，会让我变得更加自信。<br>这半年的时间里，除了读日常的文档之外，我也在读一些书。技术方面有：《javascript高级程序设计》，《图解http》,《交互式web前端开发》。设计方面读了，《写给大家看的设计书》。至于文学（哲学）方面，最近我在读《苏菲的世界》。这本书是给弟弟买的，但很显然他现在很可能读不懂这本书。而且，很多的技术文章和英文杂志读起来也没那么吃力了。<br>关于成长，大概就是能感受到自己一点点的进步以及能大致看清前进的方向。目前来说，在很多时候我的确会有这种感受，所以我在成长。<br>再来说说迷茫，作为双子座（ps:我不背锅）的我经常会兼具自负和自卑两种心理。这种感觉很难受，既伤神又在浪费时间。在什么时候我是自卑的呢？看到高中的同学就读名校 =&gt; 想到自己的学历很糟糕。技术群里的问题我听都没听说过的时候 =&gt; 想到自己的技术很渣。还有一些很简单的需求也实现不了，这个时候我会很自卑。然后胡思乱想浪费时间。至于自负，大概体现在自己在解决一些问题之后或是想到了一些解决问题的方法。</p><h2 id="执行力与焦虑">执行力与焦虑</h2><p>现在我的一个很大的问题就是执行力不够，列在滴答清单的任务很多都没有按时完成，而且注意力很容易会被带偏。比如当我搜索一个知识点时，发现另一个知识点也不是很清楚。然后就会花很多的时间去看这个知识点，导致任务没能及时完成。解决这个问题的方法就是要分清优先级，有很多东西大可不必立刻深究。还是要专注当前的事，一些不懂的东西可以先暂时记在笔记本上。要利用好番茄计时的方法。<br>至于焦虑这件事，感觉是把双刃剑。因为会感觉到自己有很多的不足所以焦虑，但同样焦虑有的时候会让我感到不知所措。其实我很幸运的走在软件开发这条道路上，网上优质的学习资源浩如烟海，完全可以凭借自学来提高自己的技术能力。社区里大牛云集，而且他们还很愿意帮助别人。</p><h2 id="调节能力">调节能力</h2><p>人的精神状态和学习状态就如同天气一样，阴晴不定。不可能一直处在高效的状态。就像最近几天，感觉学习的状态又开始消极起来。总在想其他的事情，周围的诱惑很多（昨天晚上隔壁的云雨声，现在还在耳边回响），导致注意力很难集中<br>对于我来说，专注和自律才能让我不断地进步。一些好的习惯必须要坚持下去。拿周六的事情来说，在我捋清vue组件的通信方式后。之前纸牌马里奥卡住的关卡也能很快过关，这种感觉很舒服。因为之前写css时养成的一些坏习惯，很多东西我总是在试。这是很不好的习惯，因为试的过程中，头脑会感到昏沉。</p><hr><h2 id="19年了">19年了</h2><p>本来想写个年度总结，但发现这篇文章已经写了很多自己的一些想法和做的一些事。之前也看过社区里一些年度总结的文章，会暗暗感慨他们的一年怎么就如此的充实与不同。其实也不必妄自菲薄，重要的是自身的成长与进步。还是像上面提到过的，很多东西我正在感到越来越清晰。当然，还是要经常反省自己的不足。滴答清单里的任务列表还是有很多没能及时的完成，想做的事情还在不断地拖延。这些都是现在还有过去一直存在的问题。<br>19年了，自己也来到了24岁的年龄。很多时候我并不想考虑太多的事情。每天能去解决一些问题，看自己喜欢的书，去运动。快乐也就大抵如此了。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记整理</title>
      <link href="/2018/11/24/this/"/>
      <url>/2018/11/24/this/</url>
      
        <content type="html"><![CDATA[<p>这部分的学习笔记，整理于segmentfault和掘金社区的优质文章</p><h2 id="复杂判断写法的改进">复杂判断写法的改进</h2><h3 id="origin">origin</h3><pre><code class="language-js">const buttonClick = (status) =&gt; {if (status == 1) {sendLog('processing')jumpTo('IndexPage')} else if (status == 2) {sendLog('fail')jumpTo('FailPage')} else if  (status == 3) {sendLog('success')jumpTo('SuccessPage')}}</code></pre><h3 id="v1">v1</h3><pre><code class="language-js">switch(status) {case1: sendLog('processing')jumpTo('IndexPage')break;case2: sendLog('fail')jumpTo('FailPage')break;case3: sendLog('success')jumpTo('SuccessPage')break;}</code></pre><h3 id="v2">v2</h3><pre><code class="language-js">const actions = {  '1': ['processing','IndexPage'],  '2': ['fail','FailPage'],   '3': ['success','SuccessPage']}const buttonClick = (status) =&gt; {  let action = action[status],    logName = action[0],    pageName = action[1]  sendLog(logName)  jumpTo(pageName)}</code></pre><h3 id="v3">v3</h3><pre><code class="language-js">const actions = new Map([  [1, ['processing','IndexPage']],  [2, ['fail','FailPage']],  [3, ['success','SuccessPage']]])const onButtonClick = (status) =&gt; {  let action = actions.get(status)   sendLog(action[0])  jumpTo(action[1])}</code></pre><h3 id="二元判断">二元判断</h3><p>不但需要判断status，而且还需要判断用户的身份</p><pre><code class="language-js">const actions = {  'guest_1':()=&gt;{...},  'guest_2':()=&gt;{...},  //....}const onButtonClick = (identity,status) =&gt; {  let action = actions[`${identity}_${status}`]  action.call(this)}</code></pre><p><a href="https://juejin.im/post/5bdfef86e51d453bf8051bf8" target="_blank" rel="noopener">原文链接</a></p><h2 id="this的指向问题">this的指向问题</h2><h3 id="普通函数">普通函数</h3><p>this的指向无法在函数定义时确定，只有在函数执行时确定this到底指向谁<br>栗子1：</p><pre><code class="language-js">function a() {  var name = &quot;fan&quot;;  console.log(this.name); //undefined  console.log(this); //window}a();</code></pre><p>1中的this指向window，这里this<strong>指向调用它的对象</strong>，函数a实际上是被window对象调用<br>栗子2：</p><pre><code class="language-js">var o = {  name: &quot;fan&quot;,  fn: function() {    console.log(this.name) //fan  }}o.fn();</code></pre><p>2中this指向fan，同1中一样，this<strong>指向调用它的对象</strong>，函数fn被o对象调用<br>栗子3：</p><pre><code class="language-js">var o = {  name = &quot;fan&quot;,  fn: function() {    console.log(this.name) //fan  }}window.o.fn();</code></pre><p>按照之前的结论，this指向调用它的对象，这里应该指向window =&gt; 事实却指向了o</p><ol><li>如果一个函数有this，但没有被上一级的对象调用，this指向window（非严格模式）</li><li>如果一个函数有this，被上一级对象调用，this指向上一级对象<br>栗子4（特殊情况）</li></ol><pre><code class="language-js">var o = {  a: 10,  b: {    a:12,    fn: function() {      console.log(this.a) //undefined    }  }}var c = o.b.fn; //这里的fn没有被执行c();</code></pre><p>this指向的是<strong>最后调用它的对象</strong>，也就是看它执行的时候是谁调用的，4中将fn赋值给变量c时并没有执行<br>栗子5（显式绑定）</p><pre><code class="language-js">function foo () {  console.log(this.a)}var obj = { a: 1 }var a = 2foo() //2foo.call(obj) //1foo.apply(obj) //1foo.bind(obj) //不会执行</code></pre><h3 id="箭头函数">箭头函数</h3><p>箭头函数无法绑定this关键字，所以会自动向上层作用域寻找this，并使用上一层的this</p><pre><code class="language-js">//普通函数var obj = {  id: 42,  counter: function counter() {    setTimeout(function() {      console.log(this.id);    }, 1000); //undefined  }};</code></pre><pre><code class="language-js">//箭头函数var obj = {  id: 42,  counter: function counter() {    setTimeout(() =&gt; {      console.log(this.id);    }, 1000); //42  }};</code></pre><h3 id="综合练习">综合练习</h3><pre><code class="language-js">var name = 'window'var person1 = {  name: 'person1',  foo1: function () {    console.log(this.name)  },  foo2: () =&gt; console.log(this.name),  foo3: function () {    return function () {      console.log(this.name)    }  },  foo4: function () {    return () =&gt; {      console.log(this.name)    }  }}var person2 = { name: 'person2' }person1.foo1() // person1person1.foo1.call(person2) // person2person1.foo2() // windowperson1.foo2.call(person2) // windowperson1.foo3()() // windowperson1.foo3.call(person2)()person1.foo3().call(person2)person1.foo4()() // preson1person1.foo4.call(person2)()person1.foo4().call(person2)</code></pre><h2 id="文章参考">文章参考</h2><ul><li><a href="http://web.jobbole.com/88264/" target="_blank" rel="noopener">原文链接1</a></li><li><a href="https://github.com/RicardoCao-Biker/RICO-BLOG/issues/12" target="_blank" rel="noopener">原文链接2</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>霜失忆</title>
      <link href="/2018/11/11/daily_05/"/>
      <url>/2018/11/11/daily_05/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="💲🎗🌜🌱🎗🌴" />    <label for="pass">💲🎗🌜🌱🎗🌴</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6</title>
      <link href="/2018/10/30/ES6/"/>
      <url>/2018/10/30/ES6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>terminal折腾记之Mac篇</title>
      <link href="/2018/10/20/terminal/"/>
      <url>/2018/10/20/terminal/</url>
      
        <content type="html"><![CDATA[<p>作为除了编辑器，浏览器之外，每天接触<strong>第二多</strong>的东西——终端。是要来好好折腾一番了。之前，我就下载了oh-my-zsh。但是使用的一直是它的默认主题——robbyrussell。这个主题，其实很不错了，相比于自带的zsh已经是非常的简洁美观。可是身为一个前端er,不折腾怎么能行了🌊。</p><h2 id="折腾前的准备">折腾前的准备</h2><ol><li><a href="https://www.iterm2.com/downloads.html" target="_blank" rel="noopener">iTerm2</a></li><li><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a></li><li><a href="https://github.com/powerline/fonts" target="_blank" rel="noopener">powerline font</a></li></ol><p>具体的安装步骤，就不再赘述了，大家可以去文档里查看。</p><h2 id="需要做的配置">需要做的配置</h2><h3 id="iterm颜色主题">iTerm颜色主题</h3><p>这个<a href="https://github.com/mbadolato/iTerm2-Color-Schemes" target="_blank" rel="noopener">主题库</a>包含了170+种主题。可以把文件下载到本地，然后导入到color presets中就好了（使用快捷键cmd + i）。</p><h3 id="zsh主题">zsh主题</h3><p>我使用的是<a href="https://github.com/bhilburn/powerlevel9k" target="_blank" rel="noopener">powerlevel9k</a>,它可以对终端进行进一步的个性化定制，就像这样🌰。<br><img src="https://img.5bang.top/power1.png" alt="power1"></p><p>当然你还可以这样。</p><p><img src="https://img.5bang.top/power2.gif" alt="power2"></p><h4 id="安装powerlevel9k">安装powerlevel9k</h4><ol><li>clone主题的仓库地址</li></ol><pre><code class="language-shell">$ git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</code></pre><ol start="2"><li>在.zsh中设定主题</li></ol><pre><code class="language-shell">ZSH_THEME=&quot;powerlevel9k/powerlevel9k&quot;</code></pre><h2 id="zsh相关插件">zsh相关插件</h2><ul><li><a href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="noopener">zsh-autosuggestions</a></li><li><a href="https://github.com/zsh-users/zsh-syntax-highlighting" target="_blank" rel="noopener">zsh-syntax-highlighting</a></li></ul><p>这是我推荐的两个插件，当然，你也可以添加一些其他的插件。具体<a href="https://github.com/zsh-users" target="_blank" rel="noopener">地址</a>在这里。</p><h3 id="安装zsh插件的两种方式">安装zsh插件的两种方式</h3><h4 id="oh-my-zsh方式">oh-my-zsh方式</h4><ol><li>clone插件的仓库地址</li></ol><pre><code class="language-shell">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting</code></pre><ol start="2"><li>在~/.zshrc中找到plugins,添加这个插件</li></ol><pre><code class="language-shell">plugins = (    git    rails    zsh-autosuggestions)</code></pre><h4 id="zshrc方式">.zshrc方式</h4><ol><li>同上</li><li>在.zshrc中添加一行</li></ol><pre><code class="language-shell">source ./zsh-syntax-highlighting/zsh-syntax-highlighting.</code></pre><h2 id="其他">其他</h2><h3 id="隐藏用户信息">隐藏用户信息</h3><p>打开终端后会发现，总是有一段长长的用户信息前缀。感觉有些多余，我们如何来隐藏它呢。记得之前使用robbyrussell主题时是没有的，所以很有可能是主题文件的原因。于是打开powerlevel9k.zsh-theme文件（注意看上文clone的路径）。</p><pre><code class="language-shell"># Note that if $DEFAULT_USER is not set, this prompt segment will always print</code></pre><p>所以解决的方法就是在.zshrc中设置默认用户名就好了。</p><h3 id="vs-code配置">vs code配置</h3><p>完成以上步骤之后，一个颜值又高又好用的terminal就此诞生了。让我们打开vs code，撸起袖子加油干吧。等下，乱码又是什么桂？原来是忘记设定终端字体了，打开settings.json文件，把下面这行加上去就好了。</p><pre><code class="language-shell">&quot;terminal.integrated.fontFamily&quot;: &quot;Meslo LG M（你使用的字体） for Powerline&quot;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个雨天</title>
      <link href="/2018/10/13/weeks_05/"/>
      <url>/2018/10/13/weeks_05/</url>
      
        <content type="html"><![CDATA[<p>又是一个下雨天，初秋的西安早已凉意习习。自己一个人独自在房间里面，还会感到一些阴冷。</p><p>说好的午休，醒来都已经是大半下午了。今天遇到的问题还不少，好在都已经解决了。想想，心里还有些成就感。预约系统添加了分页功能和解决了错误提示引起页面偏移的问题。壁挂炉水压一直下降，打开补水阀门，水压正常后又缓慢下降。反复出现EP故障代码，在网上搜索相关的错误信息，发现需要打开补水阀进行补水。也基本上解决了这个问题。</p><hr><p>还是一个下雨天，只是时间却过了整整一周。现在是凌晨将近两点钟，因为午休睡得太晚，现在也没有什么睡意。窗外的雨声淅淅沥沥。</p><p>刚过去的几个小时里，我在折腾终端。下载了iTerm2,配合oh-my-zsh,加上solarized color scheme完成了一个高颜值好用terminal的搭建。主要在读oh-my-zsh的plugin和theme的文档，安装方式以及脚本代码。还有下载了一些字体，果然mac上的字体大都非常的好看。期间也遇到了一些问题，比如隐藏用户名，还有powerline字体的安装等等。</p><p>工作已经4个月有余，现在我还是没有自信说自己是一个coder。有的时候，情绪会非常的低迷与消极，总觉得自己很多都不会，每天浪费了很多的时间。现在的工作，压力一点也不大。不知道，这是一件好事情还是不好的事情。每天有大量学习的时间，却没有把握住，总是稀里糊涂的就度过了一天。</p><p>仔细想想，onetab中有很多收藏的技术文章还没有去读，github上每天也有很多有意思的项目产生。还有自己的blog,虽然写了些东西，但一直都没更新。这些都是需要拿时间完成的。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 胡思乱想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vh,vw知多少</title>
      <link href="/2018/09/22/viewport/"/>
      <url>/2018/09/22/viewport/</url>
      
        <content type="html"><![CDATA[<p>最近在写公司的官网，需要加一个地图的功能。需求方面要兼容pc端和移动端，便不得不考虑屏幕尺寸适配的问题。本来之前的方案是使用媒体查询(media query)，但是相应的代码量会增加。最终，我采用的是vh,vw的方式。这是一种比较讨巧的方式，代码量极小，实际的效果也是可以接受的。</p><p>这篇文章的目的有两个，一是系统的学习总结css3的单位vw,vh。二是，回顾并学习自适应布局的其他解决方案。</p><h2 id="什么是vw-vh">什么是vw,vh</h2><h3 id="定义">定义</h3><p>vw,vh是css3中新引入的单位。与视图窗口(viewport)有关，vw是相对于视图窗口的宽度，vh则是相对于视图窗口的高度。除此之外，还有vmin,vmax两个单位。</p><table><thead><tr><th>单位</th><th>含义</th></tr></thead><tbody><tr><td>vw</td><td>视口宽度是100vw</td></tr><tr><td>vh</td><td>视口高度是100vh</td></tr><tr><td>vmin</td><td>vw和vh中的较小值</td></tr><tr><td>vmax</td><td>vw和vh中的较大值</td></tr></tbody></table><h3 id="换算">换算</h3><p>拿iphone6(375*667)为例,将布局视口设置为分辨率大小,px与vw之间有如下的换算关系：<br><code>1px = (1/375) * 100 vw</code></p><h3 id="scss函数">scss函数</h3><pre><code class="language-scss">// iphone6作为设计稿$vw_base: 375;@function vw($px) {    @return ($px / 375) * 100vw;}</code></pre><h3 id="兼容性">兼容性</h3><p>可以参照 <a href="https://caniuse.com/#search=vw" target="_blank" rel="noopener">can I use</a>，可以看出对于主流的浏览器大都是支持的。</p><p><img src="https://img.5bang.top/vw.png" alt="vw"></p><h2 id="其他自适应布局解决方案">其他自适应布局解决方案</h2><h3 id="media-query">media query</h3><p>使用media query可以对于不同的媒体类型，来写不同的样式</p><h3 id="百分比">百分比</h3><p>实现一个长宽比为4:3的长方形，使用padding属性</p><pre><code class="language-html">    &lt;div class=&quot;rectangle&gt;&lt;/div&gt;</code></pre><pre><code class="language-css">    .rectangle {        height:0;        width: 100%;        padding-top: 75%    }</code></pre><h3 id="rem布局">rem布局</h3><p>核心：动态改变根元素的大小<br>px2rem()函数</p><pre><code class="language-scss">// 37.5px是设计稿(iphone8)宽度的1/10@function px2rem($px) {    $rem: 37.5px;    @return ($px / $rem) + rem;}</code></pre><pre><code class="language-js">// 根据屏幕宽度来修正html的字体的大小// 获取设备屏幕宽度let htmlWidth = window.screen.width;// 根元素let htmlDom = document.getElementsByTagName('html')[0];htmlDom.style.fontSize = htmlWidth/10 + 'px';</code></pre><h3 id="rem搭配vw布局">rem搭配vw布局</h3><ol><li>给根元素设置vw单位，实现动态改变其大小</li><li>限制最大最小宽度</li></ol><pre><code class="language-scss">// rem 单位换算$vw_fontsize: 75; // iphone6尺寸的根元素基准值</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端适配 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="/2018/07/21/weeks_03/"/>
      <url>/2018/07/21/weeks_03/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="💲🎗🌜🌱🎗🌴" />    <label for="pass">💲🎗🌜🌱🎗🌴</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式基础</title>
      <link href="/2018/07/14/RegExp/"/>
      <url>/2018/07/14/RegExp/</url>
      
        <content type="html"><![CDATA[<h2 id="创建正则表达式">创建正则表达式</h2><h3 id="构造函数">构造函数</h3><pre><code class="language-javascript">let reg = new RegExp(&quot;^[a-zA-Z]&quot;,'g');let reg = new RegExp(&quot;/^[a-zA-Z]/,'g');</code></pre><h3 id="创建字面量">创建字面量</h3><pre><code class="language-javascript">let reg = /^[a-zA-Z]/;</code></pre><h2 id="参数">参数</h2><p><strong>g</strong> 全局匹配<br><strong>i</strong> 匹配全部大小写<br><strong>m</strong> 多行匹配<br><strong>s</strong> 单行匹配</p><h2 id="规则">规则</h2><p>. 任意字符<br>\d 0-9<br>\D 除\d外的字符<br>\w 0-9,a-z,A-Z,或者下划线<br>\W 除\w外的字符<br>\s 空格符，tab，换页或换行</p><h2 id="范围">范围</h2><p>[…] 匹配字符范围之内的<br>[^…] 匹配字符范围以外的<br>^ 匹配以此开头的<br>$ 匹配以此结尾的</p><h2 id="常用方法">常用方法</h2><ol><li>test()方法，检索字符串的值是否匹配给定规则，返回true或false</li></ol><pre><code class="language-javascript">    /\d\d/.test('12');  //true</code></pre><ol start="2"><li>exec()方法，检索字符串中的指定值，如果找到匹配的文本，返回一个结果数组，否则返回null</li></ol><pre><code class="language-javascript">    /123/.exec('112123');  //[&quot;123&quot;,index: 3,input: &quot;112123&quot;]</code></pre><ol start="3"><li>compile()方法，改变正则匹配的内容</li></ol><pre><code class="language-JavaScript">    /123/.compile('456');  // /456/</code></pre><ol start="4"><li>split()方法，将字符串分割为字符串数组</li></ol><pre><code class="language-javascript">    &quot;abcd&quot;.split(/b/);  // [&quot;a&quot;,&quot;cd&quot;]</code></pre><ol start="5"><li>replace()方法，在字符串中用一些字符替换另一些字符</li></ol><pre><code class="language-javascript">    &quot;12345abcde&quot;.replace(/\d\d\d/g,'*');  //&quot;*45abcde&quot;    &quot;123  45&quot;.replace(/\s/g,'');  //&quot;12345&quot;</code></pre><ol start="6"><li>search()方法，检索匹配的字符串，返回起始位置的索引</li></ol><pre><code class="language-javascript">    &quot;abcde&quot;.search(/c/); //2    &quot;abcde&quot;.search(/f/); //-1</code></pre><h2 id="常用匹配">常用匹配</h2><ol><li>13开头的手机号</li></ol><pre><code class="language-js">/^(1)3{9}$/</code></pre><ol start="2"><li>某些号段的手机号验证</li></ol><pre><code class="language-js">/^1(88|70|56)\d{8}$/</code></pre><ol start="3"><li>下划线和驼峰相互转换</li></ol><pre><code class="language-js">// 驼峰转下划线，遇到大写字母时转化为小写字母，并在前面加上下划线，$1表示第一个字符串匹配replace(/([A-Z])/g, '-$1').toLowerCase()// 下划线转驼峰,\w表示下划线replace(/\-(\w)/g, function(all, letter) {    return letter.toUpperCase()})</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学会学（2）</title>
      <link href="/2018/05/30/lhtl_2/"/>
      <url>/2018/05/30/lhtl_2/</url>
      
        <content type="html"><![CDATA[<p>突然发现，已经有两个月没有在博客上写东西了。之前一直想写的学会学的系列文章，眼看就要烂尾了。人一定要坚持一些东西，这样以后才不会总是后悔。而写文章，做前端就是我想坚持的事。</p><p>没写文章的这两个月里，我主要在找工作，准备论文，还有完成IFE的任务。今天，我想结合最近的一些学习情况，来写《学会学》系列的第二篇文章。</p><p>这段时间主要是做IFE的任务，再者就是学习node。先说说IFE，虽说学习前端也有半年的时间了，但还是感觉什么都不会。具体体现在做任务时，总显得力不从心。Day9-11做一个静态网站的任务，我用了一个多星期才写完，而且在这个过程中还大量参考了<strong>dpyzo0o</strong>同学的代码。坦白讲，这是我第一次根据设计稿来写一个完整的页面，所以遇到这些困难都是很正常的。原因在于之前练习的太少，而且整个学习的体系也不够系统。</p><p>到目前为止，我已经完成了IFE前16天的内容。大概完成了已发布任务的一半。这是必须要坚持做下去的，回想以前我也花了不少的时间来学习java。我在图书馆借了好几本关于java的书，而且也在mooc上学习北京大学的《java程序设计》这门课程。但是现在已经忘得差不多了。可能以后我还是会继续学习java，但这绝不是这个阶段我要做的事，现阶段我的目标就是学好JavaScript。其他的都不要多想，毕竟能力摆在这里。</p><p>还有一件事自己也必须清楚，看清自己所处的位置也是非常重要的。拿《学会学》这门课程来说吧，里面的确有很多的学习方法和技巧很有用。像睡觉之前把学习的内容重新梳理一遍，问题解决不了的时候转移下注意力等等。最重要的事是先去做，如果我把很多的时间都浪费在刷网易云，虎扑上，这些学习方法的运用便无从谈起。目前而言，我的起点太低了，所以不能奢求一下就能得到，只求每天一点点的进步。</p><p>再来谈谈学习node,我的毕业设计是基于node校园资助系统的设计与实现，这个题目是我自己命题的（就是这么🆒）。当时的目的是想在学习node时，顺便把毕设也一并给做了。所谓的learn by doing。但事实是我几乎完全照搬了一个GitHub的项目。又回到了刚才所说的，我没有看清自己所处的位置。javascript还没弄懂，又去折腾node。对我而言自然是很困难的。</p><p>接下来一个阶段的任务还是继续完成IFE的作业，把66天的学习任务坚持下来。还有，就是必须重视总结。到目前为止，我只写了一篇的学习笔记。尽快把之前的学习笔记都补上来。</p><p>马上就要到6月份了，又到了一年的高考季和毕业季。匆匆四年，一晃而逝。前几天我还把高中毕业时和舍友合照的一些照片跟手机里刚拍的身穿学士服的照片比较，“还是什么都没变嘛”。</p>]]></content>
      
      
      <categories>
          
          <category> LHTL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>58笔试总结</title>
      <link href="/2018/04/16/interview_03/"/>
      <url>/2018/04/16/interview_03/</url>
      
        <content type="html"><![CDATA[<p>昨天做了58的在线笔试题，题很基础。但完成的还是不够好，许多题目涉及的知识点，我总是浅尝则止。现在，静下心来，再查查资料。把题再做一遍。</p><h2 id="图片懒加载">图片懒加载</h2><h3 id="通过data-src来加载图片">通过data-src来加载图片</h3><pre><code class="language-html">&lt;div id=&quot;div1&quot;&gt;    &lt;ul&gt;        &lt;li data-src=&quot;test1.jpg&quot;&gt;&lt;/li&gt;        &lt;li data-src=&quot;test2.jpg&quot;&gt;&lt;/li&gt;        &lt;li data-src=&quot;test3.jpg&quot;&gt;&lt;/li&gt;    &lt;/ul&gt;&lt;/div&gt;</code></pre><pre><code class="language-javascript">function setImg(index) {    var aLi = document.getElementByName('li');    if(aLi[index].childNodes.length == 0) {        if(ali[index].dataset) {            var src = aLi[index].dataset.src;        } else {            //不支持dataset时的处理方法            var src = aLi[index].getAttribute('data-src');        }    var oImg = document.createElement('img');    oImg.src = src;    aLi[index].appendChild(oImg);    }}</code></pre><h3 id="获取元素距离页面顶部的距离">获取元素距离页面顶部的距离</h3><pre><code class="language-JavaScript">function getH(el) {    var h = 0;    while(el) {        h += el.offsetTop;        el = el.offsetParent;    }    return h;}</code></pre><h3 id="组装">组装</h3><pre><code class="language-javascript">window.onscroll = function() {    var aLi = document.getElementByName('li');    for(var i = 0, l = aLi.length; i &lt; l; i++) {        var oLi = aLi[i];        var t = document.documentElement.clientHeight + (document.documentElement.scrollTop || document.body.scrollTop);        var h = getH(oLi);        if(h &lt; t) {            setTimeout(&quot;setImg(&quot; + i + &quot;)&quot;,500)        }    }};window.onload = function() {    windows.onscroll();};</code></pre><h2 id="列举常见的跨域方法-以及jsonp不能进行post请求的原因">列举常见的跨域方法，以及jsonp不能进行post请求的原因</h2><h3 id="document-domain">document.domain</h3><p>适用于主域相同，子域不同的情况,通常做法是通过一个iframe加载跨域页面资源</p><pre><code class="language-JavaScript">var test = window.open('http://test.5bang.top/');</code></pre><h3 id="location-hash">location.hash</h3><p>通过<strong>设置</strong>/<strong>监听</strong>url的hash部分，来实现跨域</p><h3 id="window-name"><a href="http://window.name" target="_blank" rel="noopener">window.name</a></h3><p>window.name用来获取/设置窗口的名称，将跨域的window.name通过重定向到同域页面进行读取</p><h3 id="jsonp">jsonp</h3><p>允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback作为函数名来包裹住json数据</p><pre><code class="language-JavaScript">function todo(data) {    console.log('my name is' + data.name);} var script = document.createElement('script');  //script标签只支持getscript.src = 'http://5bang.top/name?callback=todo';  //callback参数用来指定回调函数的名字document.body.appendchild(script)</code></pre><h3 id="postmessage">postMessage</h3><p>window.postMessage是html5中基于事件消息的API</p><h3 id="websocket">webSocket</h3><p>一种html5的协议，实现了浏览器与服务器的全双工通信。</p><h3 id="cros">CROS</h3><p>服务器返回的头部信息包含Access-Control-Allow-Origin: domain-name(允许跨域的域名)，浏览器就会允许此次跨域请求</p><h2 id="解决callback地狱问题-反复嵌套-写出js实现异步的方法">解决callback地狱问题（反复嵌套），写出js实现异步的方法</h2><h3 id="callback-hell">callback hell</h3><pre><code class="language-js">fetch('http://www.somepage.com', function(firstError, firstResponse, firstBody) {    if(firstError) {        // handle error    } else {        fetch(`http://www.somepage.com/${firstBody.someValue}`, function(secondError, secondResponse, secondBody) {            if(secondError) {                // handle error            } else {                // use secondBody for something            }        })    }})</code></pre><h3 id="promise">promise</h3><h4 id="promise实例">promise实例</h4><pre><code class="language-js">    const promise = new Promise(function(resolve,reject){        //        if(/*异步操作成功*/) {            resolve(value);        } else {            reject(error);        }    })</code></pre><ul><li>resolve()：将promise对象的状态由未完成变为成功(pending =&gt; resolved)，在异步操作成功时调用，并将异步操作的结果作为参数传递出去</li><li>reject()： 将promise对象的状态由未完成变为失败(pending =&gt; rejected)，在异步操作失败时调用，并将异步操作报出的错误作为参数传递出去</li></ul><h4 id="then">then()</h4><pre><code class="language-js">    promise.then(function(value){        //success    },function(error){        //error    })</code></pre><h4 id="解决callback-hell">解决callback hell</h4><h3 id="generator">generator</h3><h2 id="两种清除浮动的方法-以及它们有什么缺点">两种清除浮动的方法，以及它们有什么缺点</h2><p>浮动元素脱离常规文档流之后，原来紧跟其后的元素就会在空间允许的情况下，向上提升到与浮动元素平起平坐</p><h3 id="clear-both">clear: both</h3><h3 id="overflow-hidden">overflow: hidden</h3><h3 id="after伪元素">:after伪元素</h3><h2 id="针对移动端设备的布局方式">针对移动端设备的布局方式</h2><h2 id="实现一个插件-当鼠标移动到文本时-显示一个文本输入框">实现一个插件，当鼠标移动到文本时，显示一个文本输入框</h2><h2 id="实现一个sum-函数-接收任意参数-然后柯里化sum">实现一个sum()函数，接收任意参数,然后柯里化sum()</h2><pre><code class="language-js">function sum(...args) {    return args.reduce((prev, next) =&gt; prev + next)}sum(1, 2, 3); //6// 柯里化sum(1, 2, 3) =&gt; sum(1)(2)(3)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学会学（1）</title>
      <link href="/2018/04/04/lhtl_1/"/>
      <url>/2018/04/04/lhtl_1/</url>
      
        <content type="html"><![CDATA[<p>很久没有写文章了，这段时间一直在忙着找工作的事。的确，前一段时间状态也不太好。总是会感觉焦虑，没有拿到理想offer的心情总不是那么痛快。<br>也会在静下心的时候，去思考一些东西。自己为什么会处在现在的一个境地。前段时间，我总在感慨一个公司的笔试。笔试的内容都是我借过的那本红宝书里的。可是，我还是表现的一塌糊涂。这也促使我重新去思考“学习”这件事。于是，我在学堂在线选修了Learning How To Learn这门课。对于这门课，我会写一个系列专题的文章。记录这门课的内容和自己的一些想法。</p><h2 id="什么是学习">什么是学习</h2><h3 id="大脑的学习原理">大脑的学习原理</h3><p>大脑图谱 =&gt; 学习的记忆和思考过程</p><h3 id="两种基本的认知模式">两种基本的认知模式</h3><h4 id="focused-专注模式">Focused(专注模式)</h4><h4 id="diffuse-发散模式">Diffuse(发散模式)</h4><h3 id="大脑的讯息接受与处理方式">大脑的讯息接受与处理方式</h3><h4 id="多感官整合">多感官整合</h4><table><thead><tr><th>视觉</th><th>听觉</th><th>嗅觉</th><th>触觉</th><th>味觉</th></tr></thead><tbody><tr><td>83%</td><td>11%</td><td>3.5%</td><td>1.5%</td><td>1%</td></tr></tbody></table><h4 id="双闪烁错觉">双闪烁错觉</h4><p>描述: 快速闪现一次的光点，在光点闪现的同时，发出两个声响哔哔 =&gt; 大部分观众认为闪了一次的光点闪了两下<br>快速闪现两次光点,只发出一声哔 =&gt; 大部分观众仍然看到了两次闪的光点<br>结论: 声音会帮助我们区别发生的事件,却不会帮我们把事件融合起来</p>]]></content>
      
      
      <categories>
          
          <category> LHTL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式实现弹窗</title>
      <link href="/2018/04/04/singleton/"/>
      <url>/2018/04/04/singleton/</url>
      
        <content type="html"><![CDATA[<h2 id="单例模式">单例模式</h2><blockquote><p>一个类仅有一个实例，并提供一个全局的访问点 =&gt; <strong>业务场景</strong> 账号注册时，一个号码重复注册会提示错误信息</p></blockquote><h3 id="步骤">步骤</h3><ol><li>获取一个DOM对象</li></ol><pre><code class="language-javascript">var $ = function(id) {    return typeof id === 'string' ? document.getElementById(id) : id;};</code></pre><ol start="2"><li>弹框构造函数</li></ol><pre><code class="language-javascript">var Modal = function(id,html) {    this.html = html;    this.id = id;    this.open = false; };</code></pre><ol start="3"><li>open方法</li></ol><pre><code class="language-javascript">Modal.prototype.create = function() {    if (!this.open) {        var modal = document.createElement('div');                modal.innerHTML = this.html;        modal.id = this.id;        document.body.appendChild(modal);             setTimeout(function() {            modal.classList.add('show');        },0);        this.open = true;    }};</code></pre><ol start="4"><li>close方法</li></ol><pre><code class="language-javascript">Modal.prototype.delete = function() {    if (this.open) {        var modal = $(this.id);        modal.calssList.add('hide');        setTimeout(function() {            document.body.removeChild(modal);        },200);        this.open = false;    }};</code></pre><ol start="5"><li>创建实例</li></ol><pre><code class="language-javascript">var createIntance = (function() {    var instance;    return function() {        return instance || (instance = new Modal('modal','这是一个弹窗'))    }}) ();</code></pre><ol start="6"><li>按钮操作</li></ol><pre><code class="language-javascript">var operate = {    setModal: null,    open: function() {        this.setModal = createIntance();        this.setModal.create();    },    delete: function() {        this.setModal ? this.setModal.delete() : '';    }};</code></pre><ol start="7"><li>绑定事件</li></ol><pre><code class="language-javascript">$('open').onclick = function() {    operate.open();};$('delete').onclick = function() {    oprate.delete();}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端笔试题整理（牛客网）</title>
      <link href="/2018/03/20/interview_02/"/>
      <url>/2018/03/20/interview_02/</url>
      
        <content type="html"><![CDATA[<ol><li>请使用两种不同的CSS方法（要求dom结构不同）实现下图所示的条形图。从左到右的条形分别记为A,B,C,D,E。A的高度为30%，颜色为#f00；B的高度为50%，颜色为#ddd；C的高度为70%，颜色为#0fd；D的高度为50%，颜色为#ff0；E的高度为30%，颜色为#234，每个条形之间的距离可以任意设置（可以考虑使用CSS3新属性来实现）。</li></ol><ul><li>用margin方法来对齐底部</li></ul><pre><code class="language-html">&lt;div class=&quot;container&quot;&gt;    &lt;div class=&quot;item item1&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item item2&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item item3&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item item4&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item item5&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;style&gt;.container {    height: 100px;    width:200px;    position: relative;}.item {    width: 10px;    position: absolute;}.item1 {    height: 30%;    top: 70%;    background-color: #f00;    left: 10px;}.item2 {    height: 50%;    top: 50%;    background-color: #ddd;    left: 30px;}.item3 {    height: 70%;    top: 30%;    background-color: #0fd;    left: 50px;}.item4 {    height: 50%;    top: 50%;    background-color: #ff0;    left: 70px;}.item5 {    height: 30%;    top: 70%;    background-color: #234;    left: 90px;}&lt;/style&gt;</code></pre><ul><li>弹性盒子</li></ul><pre><code class="language-html">&lt;div class=&quot;container&quot;&gt;    &lt;div class=&quot;flex-box&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;flex-box&quot;&gt;&lt;/div&gt;     &lt;div class=&quot;flex-box&quot;&gt;&lt;/div&gt;     &lt;div class=&quot;flex-box&quot;&gt;&lt;/div&gt;     &lt;div class=&quot;flex-box&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;style&gt;.container {    width: 200px;    height: 100px;    margin: 0 auto;    display: flex;    justify-content: space-around;    align-items: flex-end;}.flex-box {    width: 10px;}.flex-box:nth-child(1) {    height: 30%;    background-color: #f00;}.flex-box:nth-child(2) {    height: 50%;    background-color: #ddd;}.flex-box:nth-child(3) {    height: 70%;    background-color: #0fd;}.flex-box:nth-child(4) {    height: 50%;    background-color: #ff0;}.flex-box:nth-child(5) {    height: 30%;    background-color: #234;}&lt;/style&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九联科技笔试总结</title>
      <link href="/2018/03/15/interview_01/"/>
      <url>/2018/03/15/interview_01/</url>
      
        <content type="html"><![CDATA[<p>尽管自己看上去每天都在做一些东西，但还是感觉很虚。拿今天的笔试题来说吧，很多都是基础的知识点，但还是答的不够好。现<br>在做一个总结，也顺带复习一下之前学的内容。不管怎么样，有些细节还是需要多注意(今天笔试时，字写得的确是太丑了)。</p><h2 id="自定义一个对象-共有方法-私有方法">自定义一个对象（共有方法，私有方法）</h2><h3 id="工厂模式">工厂模式</h3><pre><code class="language-JavaScript">function person() {    var o = new Object();    o.name = 'shen';    o.say = function() {        alert(this.name);    }    return o;}var person1 = person();  </code></pre><ul><li>优点：返回了一个对象</li><li>缺点：无法通过constructor识别对象，且每次通过Person创建对象时，say()都是一样的</li></ul><h3 id="构造函数模式">构造函数模式</h3><pre><code class="language-javascript">function Person() {    this.name = 'shen';    this.say = function() {        alert(this.name);    }}var person1 = new Person();</code></pre><ul><li>优点：通过constructor或instanceof可以识别对象实例的类别</li><li>缺点：多个实例的say()方法都是实现一样的效果，但却存储了多次</li></ul><h3 id="原型模式">原型模式</h3><pre><code class="language-javascript">function Person() {}Person.prototype.name = 'shen';Person.prototype.say = function() {    alert(this.name);}Person.prototype.friends = ['dan'];var person1 = new Person();</code></pre><ul><li>say()方法是共享的，所有实例的say()指向同一个</li><li>可以动态地添加原型对象的方法和属性，并反映在对象实例上</li></ul><pre><code class="language-javascript">var person1 = new Person()Person.prototype.showFriends = function() {    console.log(this.friends)}person1.showFriends(); //['dan']</code></pre><h3 id="构造函数和原型组合模式">构造函数和原型组合模式</h3><pre><code class="language-Javascript">function Person(name) {    this.name = name;    this.friends = ['dan'];} Person.prototype.say = function() {    console.log(this.name);}var person1 = new Person('shen');person1.say(); //shen</code></pre><h2 id="闭包">闭包</h2><p>闭包：有权访问另一个函数作用域中变量的函数</p><h3 id="产生闭包">产生闭包</h3><pre><code class="language-JavaScript">function func() {    // 创造局部变量    var a=1, b=2;    function closure() {        return a+b;    }    // 让func中能访问到closure    return closure;}</code></pre><h3 id="闭包的应用">闭包的应用</h3><p>任何在函数中定义的变量，都可以认为是私有变量<br>特权方法：有权访问私有变量的共有方法</p><pre><code class="language-javascript">function Animal() {    var series = &quot;哺乳动物&quot;；//私有变量    function run() {        console.log(&quot;run&quot;);    }    //特权方法    this.getSeries = function() {        return series;    };}</code></pre><h2 id="this的指向">this的指向</h2><p>this最终指向的是那个调用它的<strong>对象</strong>（只有在函数<strong>执行</strong>的时候才能确定）<br>如果返回值是一个对象，那么this指向的就是那个<strong>返回值对象</strong>，如果返回值不是一个对象，那么this还是指向<strong>函数的实例</strong></p><h2 id="js内存泄漏的原因">js内存泄漏的原因</h2><ol><li>全局变量</li></ol><pre><code class="language-JavaScript">function foo(arg) {    bar = 'text';}//等同于function foo(arg) {    window.bar = 'text';}</code></pre><ol start="2"><li>闭包()</li></ol><pre><code class="language-JavaScript">var theThing = null;var replaceThing = function() {    var originalThing = theThing;    var unused = function() {        if (orginalThing)        console.log('hi')    };}</code></pre><h2 id="js同步和异步">js同步和异步</h2><p>异步任务：主线程(stack栈)运行过程中，当stack空闲的时候，主线程对event queue轮询后，将异步任务放到stack中执行</p><h2 id="定时器">定时器</h2><h3 id="settimeout和setinterval的区别">setTimeout和setInterval的区别</h3><pre><code class="language-javascript">setTimeout(function Set(){    console.log(&quot;setTimeout&quot;);    setTimeout(Set,10);},10);                            //等前一个callback执行完，延迟10ms执行回调函数setInterval(function(){    console.log(&quot;setInterval&quot;);},10);                           //每隔10ms执行回调函数，不管上一个是否执行完</code></pre><pre><code class="language-javascript">var a = 10;function A() {    console.log(a);  //1.undefined    var a = 20;    console.log(a);  //2.输出20    for (var a=0; a&lt;5; a++) {        setTimeout(function() {            console.log(a);  //4.每隔一秒输出一个5（5*5）        },1000*a)    }}A();console.log(a);  //3.输出10</code></pre><h2 id="跨域问题">跨域问题</h2><blockquote><p>跨域： 浏览器不能执行其他网站的脚本 -&gt;原因：同源策略（协议，域名，端口）</p></blockquote><ol><li>jsonp实现跨域的原理<br>利用script标签支持跨域的属性，用script标签拿到包裹数据的方法（相当于返回了一段js代码），在请求中包含callback,服务端注入参数后返回这个回调函数，然后用script标签拿到返回的js代码跨域直接运行回调</li><li>nginx反向代理</li><li>node.js中间件代理跨域</li><li>CORS</li></ol>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Begin,Again</title>
      <link href="/2017/12/31/years_01/"/>
      <url>/2017/12/31/years_01/</url>
      
        <content type="html"><![CDATA[<h2 id="现在">现在</h2><p>时间过的真是快，今天已经到了2017年的最后一天。很多天，我都没有再去写一些文字。尽管我有很多东西想要去写。但都没有去做。之前想写一篇重新思考web前端的文章，也一直被搁置。</p><p>从上两周开始，整个的学习状态就出了一些问题。总会感觉很焦虑。也在去学一些东西，但似乎都只是一些碎片化的学习。这两天准备完成《web前端攻城狮》课程的项目实战，却感觉无从下手。我开始有些怀疑自己。</p><h2 id="过去">过去</h2><p>这段时间打开手机看一些文章推送，都在回顾总结2017。还有网易云，支付宝也会把2017一整年听过的歌，花过的钱都给通通再晾出来。<br>刚又看了一遍之前写的一些随笔，我的2017年，又做了些什么呢？<br>看来还是应该多去写一些东西，上半年做的事基本上全忘了。好吧，那就只说说下半年吧。<br><strong>看懂一些专业书</strong><br>如果只是从我在图书馆借过的书目来看，我似乎算的上半个大牛。但事实是借过的很多书，都没有认真看过。真正吸收的东西很少，或许这就是天才和普通人的区别。回过头来看，真的不要再自命不凡，我只是个普普通通的人。<br><strong>学习web前端</strong><br>从大四开学开始，我坚定了自己要走前端这条路。从最基础的HTML+CSS+JavaScript开始学起。一开始，看慕课网的视频，到现在遇到问题，更倾向于去MDN和文档中找答案。学习方法也在不断改变着，同时也在探索自己到底适合什么样的学习方法。</p><p>每天我都会去掘金社区看些感兴趣的文章，尽管能力感觉并没有什么提升。就像之前总会去看一些kindle推送的BBC新闻，但英语写作还是一团糟。根本原因还是练习太少。无论做什么事都是一样，不断的练习才能提高。对于现在的我来说，很多时候不想去练习，还是需要克服这种惰性，能力才能真正的提高。</p><p>凡事都不可能一蹴而就，做好一件事的前提是必须付出努力，但同等重要的还有做这件事的方法。坦白讲，我的确在我感兴趣的领域花了很多的时间。但一定要分清主次。比如有些东西大可不必花太多时间在上面,有太多让人眼花缭乱的框架了。有些的确很棒，但我需要自己的判断。</p><p><strong>翻译了技术文章</strong><br>前段时间在众成翻译上翻译了一篇文章，是关于GitHub的。翻译的初衷只是为了更好的使用GitHub（尽管很早就已经注册了GitHub，但一直都没怎么<br>去用它）。但令我意外的是竟然被掘金社区转载了（也反映了掘金社区的文章质量确实不太高😄），这确实给了我很大的信心。以前我都是看别人的文章，这次也算是自己也给社区做了点微小的贡献。还是很开心的。但很多东西就是这样，做一次很简单，坚持下去做就不容易。2018年还要继续翻译一些技术文章，MDN有很多文章翻译的都不是很好，我要去做这件事。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS高级</title>
      <link href="/2017/11/30/css_03/"/>
      <url>/2017/11/30/css_03/</url>
      
        <content type="html"><![CDATA[<h2 id="响应式设计">响应式设计</h2><blockquote><p>一套统一的设计和代码，适应多种不同的设备</p></blockquote><h3 id="流式布局-fluid-grids">流式布局(fluid grids)</h3><iframe id="cp_embed_RwNJmeo" src="//codepen.io/occupy5/embed/RwNJmeo?height=256px&theme-id=dark&slug-hash=RwNJmeo&default-tab=css,result&embed-version=2" scrolling="no" frameborder="no" height="256px" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h3 id="弹性图片-flexible-images">弹性图片(flexible images)</h3><iframe id="cp_embed_ZEYjEKz" src="//codepen.io/occupy5/embed/ZEYjEKz?height=256px&theme-id=dark&slug-hash=ZEYjEKz&default-tab=css,result&embed-version=2" scrolling="no" frameborder="no" height="256px" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h3 id="媒体查询-media-query">媒体查询(media query)</h3><ul><li>媒体类型(media-type)<ul><li>all</li><li>screen</li><li>print</li><li>speech</li></ul></li><li>媒体特征(media-features)<ul><li>width</li><li>aspect-radio</li><li>prefer-color-scheme</li></ul></li><li>操作符(logical operators)<ul><li>and</li><li>not</li><li>only</li><li>,</li></ul></li></ul><h2 id="mobile-first">mobile first</h2><blockquote><p>为移动端编写默认的样式，其他终端根据media query编写相应的样式</p></blockquote><iframe id="cp_embed_mdyjXyd" src="//codepen.io/occupy5/embed/mdyjXyd?height=256px&theme-id=dark&slug-hash=mdyjXyd&default-tab=css,result&embed-version=2" scrolling="no" frameborder="no" height="256px" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript高级</title>
      <link href="/2017/11/07/javascript_04/"/>
      <url>/2017/11/07/javascript_04/</url>
      
        <content type="html"><![CDATA[<h2 id="dom编程">DOM编程</h2><h3 id="docuement节点">Docuement节点</h3><h4 id="特征">特征</h4><ul><li>nodeType的值为9</li><li>nodeName的值为#document</li><li>nodeValue的值为null</li><li>parentNode的值为null</li><li>ownerDocument的值为null</li><li>其子节点最多是一个DocumentType,Element,processingInstruction或Comment</li></ul><h4 id="属性">属性</h4><p>document.title -&gt; 邮箱通知,动态改变document.title属性来推送给用户<br>document.referrer -&gt; 进行安全性的判断，上游页面是否在站点内部<br>document.domain -&gt; 解决子域互访问题</p><h3 id="dom元素节点">Dom元素节点</h3><p>默认属性<br><a href="http://element.id" target="_blank" rel="noopener">element.id</a><br>element.title<br>element.classname<br>element.lang<br>element.dir</p><h3 id="dom操作">Dom操作</h3><ol><li>添加</li></ol><pre><code class="language-javascript">//添加新节点var returnedNode = someNode.appendChild(newNode);alert(returnedNode == newNode); // truealert(someNode.lastChild = newNode); //true//添加已有节点var returnedNode = someNode.appendChild(someNode.firstChild);alert(returnedNode == someNode.firstChild); //falsealert(returnedNode == someNode.lastChild); //true</code></pre><ol start="2"><li>插入</li></ol><pre><code class="language-javascript">//插入后成为最后一个子节点var returnedNode = someNode.insertBefore(newNode,null);alert(returnedNode == someNode.lastChild); //true//插入后成为第一个子节点var returnedNode = someNode.insertBefore(newNode,someNode.firstChild);alert(returnedNode == newNode); //truealert(newNode == some.lastChild); //true//插入到最后一个字节点前面var returnedNode = someNode.insertBefore(newNode,someNode.lastChild);alert(newNode == someNode.childNodes[someNode.childNodes.length-2]); //true</code></pre><ol start="3"><li>替换</li></ol><pre><code class="language-javascript">//替换第一个子节点var returnedNode = someNode.replaceChild(newNode,someNode.firstChild);//替换最后一个子节点rereturnedNode = someNode.replaceChild(newNode,someNode.lastChild);</code></pre><ol start="4"><li>删除</li></ol><pre><code class="language-javascript">//删除第一个子节点var formerFirstChild = someNode.removeChild(someNode.firstChild);//删除最后一个子节点var formerLastChild = someNode.removeChild(someNode.lastChild);</code></pre><ol start="5"><li>克隆</li></ol><pre><code class="language-javascript">var deepList = myList.cloneNode(true);var shallowList = myList.cloneNode(false);</code></pre><ol start="6"><li>innerHtml vs DocumentFragment</li></ol><pre><code class="language-javascript">&lt;ul&gt;    &lt;li&gt;List item -1&lt;/li    &lt;li&gt;List item 0&lt;/li&gt;    &lt;li&gt;List item 1&lt;/li&gt;    ...    &lt;li&gt;List item 9&lt;/li&gt;&lt;/ul&gt;listNode.innerHtml += html;listNode.appendChild(frag);</code></pre><h3 id="dom查找">Dom查找</h3><ul><li>document.getElementById</li><li>document.getElementsByTagName</li><li>document.anchors</li><li>document.links</li><li>document.images</li><li>document.forms</li><li>document.querySelector</li></ul><pre><code class="language-javascript">var myDiv = document.querySelector(&quot;#myDiv&quot;); //取得id为myDiv的元素var img = document.body.querySelector(&quot;img.button&quot;); //取得class为button的图像元素var ems = document.getElementById(&quot;myDiv&quot;).querySelectorAll(&quot;em&quot;); //取得某&lt;div&gt;中所有的&lt;em&gt;元素var strongs = document.querySelectorAll(&quot;p strong&quot;); //取得&lt;p&gt;元素里所有的&lt;strong&gt;元素</code></pre><h3 id="dom级别-动态样式">Dom级别（动态样式）</h3><h4 id="图片懒加载">图片懒加载</h4><ol><li>通过data-src加载图片</li></ol><pre><code class="language-javascript">function setImg(index) {    var aLi = document.getElementsByName(&quot;li&quot;);    if (aLi[index].childNodes.length == 0) {        if (aLi[index].dataset) {            var src = aLi[index].dataset.src;        } else {            var src = aLi[index].getAttribute('data-src');        }        var oImg = document.createElement('img');        oImg.src = src;        aLi[index].appendChild(oImg);    }}</code></pre><ol start="2"><li>获取元素距离页面顶部的距离</li></ol><pre><code class="language-javascript">function getH(el) {    var h = 0;    while (el) {        h += el.offsetTop;        el = el.offsetParent;    }    return h; }</code></pre><ol start="3"><li>组装</li></ol><pre><code class="language-javascript">window.onscroll = function () {    var aLi = document.getElementsByName(&quot;li&quot;);    for (var i = 0, l = aLi.length; i&lt;l; i++) {        var oLi = aLi[i];        var t = document.documentElement.clientHeight + (document.documentElement.scrollTop || document.body.scrollTop);        var h = getH(oLi);        if (h &lt; t ) {            setTimeout(&quot;setImg(&quot; + i + &quot;)&quot;,500);        }    }};window.onload = function () {    window.onscroll();};</code></pre><h3 id="dom节点">Dom节点</h3><p>对于一个已有的HTML结构,按字符串顺序重新排序DOM节点</p><pre><code class="language-html">&lt;ol id=&quot;test-list&quot;&gt;    &lt;li class=&quot;lang&quot;&gt;Scheme&lt;/li&gt;    &lt;li class=&quot;lang&quot;&gt;JavaScript&lt;/li&gt;    &lt;li class=&quot;lang&quot;&gt;Python&lt;/li&gt;     &lt;li class=&quot;lang&quot;&gt;Ruby&lt;/li&gt;    &lt;li class=&quot;lang&quot;&gt;Haskell&lt;/li&gt;&lt;/ol&gt; </code></pre><p>方法一</p><pre><code class="language-javascript">var arr=[]; var list=document.getElementById('test-list'); for(let i=0;i&lt; list.children.length;i++){     arr.push(list.children[i].innerText);      } arr.sort(); for(let i=0;i&lt; list.children.length;i++){     list.children[i].innerHTML=arr[i];      }</code></pre><p>方法二</p><pre><code class="language-javascript">var list = document.getElementById('test-list'); var slist = list.children; slist = Array.prototype.slice.call(slist).sort(function(a, b){     return a.innerHTML &gt; b.innerHTML ? 1 : -1 ;      })      slist.forEach(function(el){      list.appendChild(el);          });</code></pre><p>删除节点</p><pre><code class="language-javascript"> var ul = document.getElementById('test-list'); var list = ul.children; var arr = []; for(var i = 0;i&lt;list.length;i++) {      if (list[i].innerText !='JavaScript' &amp;&amp; list[i].innerText !='HTML'&amp;&amp;list[i].innerText !='CSS')      arr.push(list[i]);} for(var i = 0;i&lt;arr.length;i++) {       ul.removeChild(arr[i]);}</code></pre><h2 id="事件">事件</h2><p>###事件流<br><strong>冒泡</strong><br>Element div -&gt; Element body -&gt; Element html -&gt; Document<br><strong>捕获</strong><br>Document -&gt; Element html -&gt; Element body -&gt; Element div</p><h3 id="事件处理">事件处理</h3><p><strong>HTML</strong></p><pre><code class="language-javascript">&lt;script type=&quot;text/javascript&quot;&gt;    function showMessage() {         alert(&quot;hello&quot;);        }&lt;/script&gt;&lt;input type=&quot;button&quot; value=&quot;click me&quot; onclick=&quot;showMessage()&quot;&gt;</code></pre><p><strong>DOM0</strong></p><pre><code class="language-javascript">var btn = document.getElementById(&quot;myBtn&quot;);btn.onclick = function() {    alert(&quot;clicked&quot;);};</code></pre><p><strong>DOM2</strong></p><pre><code class="language-javascript">var btn = document.getElementById(&quot;myBtn&quot;);btn.addEventListener(&quot;click&quot;,function(){    alert(&quot;clicked&quot;);},false);btn.addEventListener(&quot;click&quot;,function(){ //事件处理顺序自上而下    alert(&quot;hello&quot;);},false);</code></pre><p><strong>IE</strong></p><pre><code class="language-javascript">var btn = document.getElementById(&quot;myBtn&quot;);  btn.attachEvent(&quot;onclick&quot;,function(){    alert(&quot;clicked&quot;);});btn.attachEvent(&quot;onclick&quot;,function(){ //事件处理顺序自下向上    alert(&quot;hello&quot;);});</code></pre><p><strong>删除事件处理</strong></p><pre><code class="language-javascript">var btn = document.getElementById(&quot;myBtn&quot;);var handler() = function() {    alert(&quot;hello&quot;);};btn.addEventListener(&quot;click&quot;,handler,false);btn.removeEventListener(&quot;click&quot;,handler,false);</code></pre><p>事件对象<br><strong>target</strong></p><pre><code class="language-javascript">var btn = document.getElementById(&quot;myBtn&quot;);btn.onclick = function(event) {        alert(event.currentTarget === this); //true        alert(event.target === this); //true};document.body.onclick = function(event) {        alert(event.currentTarget === document.body); //true        alert(this === document.body); //true        alert(event.target === document.getElementById(&quot;myBtn&quot;)); //true}</code></pre><p><strong>type</strong></p><pre><code class="language-javascript">var btn = document.getElementById(&quot;myBtn&quot;);var handler = function(event) {    switch(event.type) {        case &quot;click&quot;:            alert(&quot;clicked&quot;);            break;        case &quot;mouseover&quot;:            event.target.style.backgroundColor = &quot;red&quot;;            break;        case &quot;mouseout&quot;            evnet.target.style.backgroundColor = &quot;&quot;;            break;    }};btn.onclick = handler;btn.onmouseover = handler;btn.onmouseout = handler;</code></pre><p>事件类型<br>事件代理</p><h2 id="json和服务端通信">JSON和服务端通信</h2><h3 id="json">json</h3><h3 id="ajax">ajax</h3><h3 id="跨域通信">跨域通信</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象的JavaScript</title>
      <link href="/2017/10/30/JavaScript_02/"/>
      <url>/2017/10/30/JavaScript_02/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象的javascript">面向对象的JavaScript</h2><h3 id="对象属性">对象属性</h3><h4 id="数据属性">数据属性</h4><ul><li>configurable: 表示能否通过delete删除属性从而重新定义属性，或能否将属性修改为访问器属性</li><li>enumberable: 表示能否通过for-in循环返回属性</li><li>writeable: 表示能否修改属性的值</li><li>value: 包含这个属性的数据值，读属性的时候从这个位置读；写入属性值的时候，把新值保存在这个位置</li></ul><h4 id="object-defineproperty">object.defineProperty()</h4><p>通过defineproperty()来修改属性默认的特性，接收三个参数(属性所在的对象，属性的名字，一个描述符对象)</p><pre><code class="language-js">var person = {};Object.defineproperty(person,&quot;name&quot;,{  writeable: false;  value: &quot;fan&quot;});console.log(person.name) //fanperson.name = &quot;dan&quot;;console.log(person.name) //fan</code></pre><h4 id="访问器属性">访问器属性</h4><ul><li>configurable: 表示能否通过delete删除属性从而重新定义属性，或者能否将属性修改为数据属性</li><li>enumberable: 表示能否通过for-in循环返回属性</li><li>get: 读取属性时调用的函数</li><li>set: 写入属性时调用的函数</li></ul><h3 id="创建对象">创建对象</h3><h4 id="工厂模式">工厂模式</h4><pre><code class="language-js">function person(name,age,sex) {  var o = new Object();  o.name = name;  o.age = age;  o.sex = sex;  return o;}var person1 = preson(&quot;fan&quot;,22,&quot;male&quot;);</code></pre><ul><li>优点：解决了重复创建多个相似对象的问题</li></ul><ul><li>缺点：无法确定对象的类型</li></ul><h4 id="构造函数模式">构造函数模式</h4><pre><code class="language-js">function Person(name,age,sex) {  this.name = name;  this.age = age;  this.sex = sex;}var person2 = new Person(&quot;dan&quot;,20,&quot;male&quot;)//new的过程// 1. 创建一个新的对象// 2. 将构造函数的作用域赋给新的对象（即this指向了新的对象）// 3. 执行构造函数的代码（为新的对象添加属性）// 4. 返回新的对象</code></pre><ul><li>可以确定确定对象的类型</li></ul><ul><li>每个方法都要在每个实例上重新创建一遍</li></ul><h4 id="原型模式">原型模式</h4><pre><code class="language-js">function Person() {}Person.prototype.name = 'fan';Person.prototype.age = 25;Person.prototype.sayName = function() {  alert(this.name)}// 更简洁的原型语法Person.prototype = {  name: 'fan',  age: 25,  sayName: function() {    alert(this.name);  }}var person1 = new Person();person1.sayName() // 'fan'person1.name = 'wen';person1.sayName() // 'wen' =&gt; 来自实例var person2 = new Person();person2.sayName() // 'fan' =&gt; 来自原型</code></pre><h4 id="组合">组合</h4><pre><code class="language-js">// 组合使用构造模式和原型模式function Person() {  this.name = name;  this.age = age;}Person.prototype = {  constructor: Person,  sayName: function() {    console.log(this.name)  }}</code></pre><h3 id="继承">继承</h3><h4 id="原型链继承">原型链继承</h4><pre><code class="language-js">function SuperType() {  this.colors = ['red', 'black', 'green'];}function SubType() {}SubType.prototype = new SuperType();var instance1 = new SubType();instance1.colors.push('blue');var instance2 = new SubType();// 问题：影响其他的实例console.log(instance2.colors); // &quot;red, black, green, blue&quot;</code></pre><h4 id="构造函数继承">构造函数继承</h4><pre><code class="language-js">function SuperType() {  this.colors = ['red', 'black', 'green'];}function SubType() {  // 继承了superType  SuperType.call(this);}var instance1 = new SubType();instance1.colors.push('blue');var instance2 = new SubType();// 不会影响其他的实例console.log(instance2.colors); // &quot;red, black, green&quot;</code></pre><h4 id="组合继承">组合继承</h4><pre><code class="language-js">// 组合继承function SuperType() {  this.colors = ['red', 'black', 'green'];  this.name = name;}SuperType.prototype.sayName = function() {  console.log(this.name);}function SubType(name, age) {  // 继承属性  SuperType.call(this, name); // 第二次调用SuperType()  this.age = age;}// 继承方法SubType.prototype = new SuperType(); // 第一次调用SuperType()SubType.prototype.constructor = SubType;SubType.prototype.sayAge = function() {  console.log(this.age);}var instance1 = new SubType('fan', 25);instance1.colors.push('blue');console.log(instance1.colors); // &quot;red, black, green, blue&quot;instance1.sayName(); // 'fan'instance1.sayAge(); // '25'var instance2 = new SubType('dan', 24);console.log(instance2.colors); // &quot;red, black, green&quot;instance2.sayName(); // 'dan'instance2.sayAge(); // 24</code></pre><ul><li>缺点：调用两次超类型构造函数</li></ul><h3 id="es6">ES6</h3><pre><code class="language-js">class Point {}class ColorPoint extends Point{  constructor(x, y, color) {    //调用父类的constructor    super(x, y);    this.color = color;  }  toString() {    //调用父类的toString()    return this.color + ' ' + super.toString();  }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS布局</title>
      <link href="/2017/10/30/css_02/"/>
      <url>/2017/10/30/css_02/</url>
      
        <content type="html"><![CDATA[<h2 id="基于浮动的布局">基于浮动的布局</h2><h3 id="浮动与清除">浮动与清除</h3><ol><li>文本绕排图片</li></ol><pre><code class="language-css"> p {margin 0;border:1px soild red;} img {float:left;margin:0 4px 4px 0;}</code></pre><ol start="2"><li>创建分栏</li></ol><pre><code class="language-css"> p {float:left;width:200px;margin 0;border:1px soild red;} img {float:left;margin:0 4px 4px 0;}</code></pre><h3 id="围住浮动元素的方法">围住浮动元素的方法</h3><ol><li>为父元素添加overflow:hidden</li></ol><pre><code class="language-css">section {border:1px solid blue;margin:0 0 10px 0; overflow:hidden;}img {float:left;}p {border:1px solid red;}</code></pre><ol start="2"><li>同时浮动父元素</li></ol><pre><code class="language-css">section {border:1px solid blue;float:left;width:100%;}img {float:left;}footer {border:1px solid red;clear: left;}</code></pre><ol start="3"><li>添加非浮动的清除元素</li></ol><pre><code class="language-css">.clearfix::after {  content:&quot;.&quot;;  display:block;  height:0;  visibility:hidden;  clear:both;}</code></pre><h3 id="中栏流动布局的实现方法">中栏流动布局的实现方法</h3><ol><li>用负外边距实现</li></ol><pre><code class="language-html">&lt;div id=&quot;parent&quot;&gt;  &lt;div id=&quot;center&quot;&gt;&lt;/div&gt;  &lt;div id=&quot;left&quot;&gt;&lt;/div&gt;  &lt;div id=&quot;right&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;style&gt;  #left {    float: left;    width: 150px;    /* 调整left位置，值等于自身宽度 */    margin-left: -100%;  }  #center {    float: left;    width: 100%;  }  #right {    float: left;    width: 210px;    /* 使right到指定位置，值等于自身宽度 */    margin-left: -210px;  }&lt;/style&gt;</code></pre><ol start="2"><li>用css3单元格实现</li></ol><pre><code class="language-html">&lt;div id=&quot;parent&quot;&gt;  &lt;div id=&quot;left&quot;&gt;&lt;/div&gt;  &lt;div id=&quot;center&quot;&gt;&lt;/div&gt;  &lt;div id=&quot;right&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;style&gt;#left {  display: table-cell;  width: 150px;  background: #dcd9c0;  padding: 10px;}#center {display: table-cell;background: #ffed53;padding: 10px 20px;}#right {display: table-cell;width: 210px;background: #3f7ccf;padding: 10px;}&lt;/style&gt;</code></pre><ol start="3"><li>使用flex</li></ol><pre><code class="language-html">&lt;div id=&quot;parent&quot;&gt;  &lt;div id=&quot;left&quot;&gt;&lt;/div&gt;  &lt;div id=&quot;center&quot;&gt;&lt;/div&gt;  &lt;div id=&quot;right&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;style&gt;#parent {  display: flex;}#left {  width: 150px;}/* 均分#parent剩余的部分 */#center {  flex: 1;}#right {  width: 210px;}&lt;/style&gt;</code></pre><ol start="4"><li>使用grid</li></ol><pre><code class="language-html">&lt;div id=&quot;parent&quot;&gt;  &lt;div id=&quot;left&quot;&gt;&lt;/div&gt;  &lt;div id=&quot;center&quot;&gt;&lt;/div&gt;  &lt;div id=&quot;right&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;style&gt;#parent {  display: grid;  grid-template-column: auto 1fr auto;}#left {  grid-column: 1 / 2;}#center {  grid-column: 2 / 3;}#right {  grid-column: 3 / 4;}&lt;/style&gt;</code></pre><h2 id="flexbox布局">Flexbox布局</h2><h3 id="概念">概念</h3><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称&quot;容器&quot;。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称&quot;项目&quot;。<br>容器默认存在两根轴：水平的<strong>主轴</strong>（main axis）和垂直的<strong>交叉轴</strong>（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p><h3 id="容器属性">容器属性</h3><ol><li>flex-direction</li></ol><pre><code class="language-css">.box {  flex-direction: row | row-reverse | column | column-reverse;}</code></pre><ol start="2"><li>flex-wrap</li></ol><pre><code class="language-css">.box {  flex-wrap: nowrap | wrap | wrap-reverse;}</code></pre><ol start="3"><li>flex-flow</li></ol><pre><code class="language-css">.box {  flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;}</code></pre><ol start="4"><li>justify-content</li></ol><pre><code class="language-css">.box {  justify-content: flex-start | flex-end | center | space-between | space-around;}</code></pre><ol start="5"><li>align-items</li></ol><pre><code class="language-css">.box {  align-items: flex-start | flex-end | center | baseline | stretch;}</code></pre><ol start="6"><li>align-content</li></ol><pre><code class="language-css">.box {  align-content: flex-start | flex-end | center | space-between | space-around | stretch;}</code></pre><h3 id="项目属性">项目属性</h3><ol><li>order</li><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li><li>flex</li><li>align-self</li></ol><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">属性的demo</a></p><h3 id="骰子布局demo">骰子布局demo</h3><p><img src="https://img.5bang.top/10301.png" alt="first-face"></p><pre><code class="language-css">.first-face {   display: flex;  justify-content: center;  align-items: center;}</code></pre><p><img src="https://img.5bang.top/10302.png" alt="second-face"></p><pre><code class="language-css">.second-face {  display: flex;  justify-content: space-between;}.item:nth-child(2) {  align-self: flex-end;}</code></pre><p><img src="https://img.5bang.top/10303.png" alt="fifth-face"></p><pre><code class="language-css">.fifth-face {  display: flex;  justify-content: space-between;}.fifth-face .item {  display: flex;  flex-direction: column;  justify-content: space-between;}.fifth-face .item:nth-child(2) {  justify-content: center;}</code></pre><h2 id="grid布局">Grid布局</h2><h2 id="其他常用布局方式">其他常用布局方式</h2><h3 id="百分比布局">百分比布局</h3><pre><code class="language-css">.Grid {  display: flex;}.Grid-cell {  flex: 1;}.Grid-cell.u-full {  flex: 0 0 100%;}.Grid-cell.u-1of2 {  flex: 0 0 50%;}.Grid-cell.u-1of3 {  flex: 0 0 33.3333%;}.Grid-cell.u-1of4 {  flex: 0 0 25%;}</code></pre><h3 id="双飞翼布局">双飞翼布局</h3><pre><code class="language-html">&lt;div class=&quot;container&quot;&gt;  &lt;div class=&quot;center&quot;&gt;&lt;/div&gt;  &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;  &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;style&gt;/* 见中栏布局的第一种方法 */&lt;/style&gt;</code></pre><h3 id="圣杯布局">圣杯布局</h3><!-- #### 方式1```html<div class="holyGrail">  <div class="center"></div>  <div class="left"></div>  <div class="right"></div></div>``````css.holyGrail {  height: 300px;  /*左右padding等于左右盒子的宽度*/  padding: 0 200px 0 100px;}.left {  width: 100px;  height: 300px;  position: relative;  float: left;  margin-left: -100%;  left: -100px;  background: yellow;}.right {  width: 200px;  height: 300px;  position: relative;  float: left;  margin-left: -200px;  left: 200px;  background: orange;}.center {  width: 100%;  height: 300px;  float: left;  background: red;}``` --><h4 id="方式2">方式2</h4><pre><code class="language-html">&lt;div class=&quot;HolyGrail&quot;&gt;  &lt;div class=&quot;center&quot;&gt;&lt;/div&gt;  &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;  &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><pre><code class="language-css">.HolyGrail {  display: flex;  flex: 1;  min-height: 100vh;}.center {  flex: 1;  background: red;}.left, .right {  /* 两个边栏的宽度设为12em */  flex: 0 0 12em;  background: yellow;}.left {  /* 导航放到最左边 */  order: -1;}@media (max-width: 768px) {.HolyGrail {  flex-direction: column;  /* 如果是小屏幕，三栏会变为垂直叠加 */  flex: 1;}.center,.left,.right {    flex: auto;  }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript进阶</title>
      <link href="/2017/10/28/JavaScript_03/"/>
      <url>/2017/10/28/JavaScript_03/</url>
      
        <content type="html"><![CDATA[<h2 id="javascript引用类型">JavaScript引用类型</h2><h3 id="array">Array</h3><ol><li>Array.isArray()</li></ol><pre><code class="language-javascript">var a = [1, 2, 3];typeof a // &quot;object&quot;Array.isArray(a) // true</code></pre><ol start="2"><li>栈和队列</li></ol><pre><code class="language-javascript">var arr = ['a','b','c'];arr.push('d'); console.info(arr); // ['a','b','c','d']arr.unshift('e'); console.info(arr); // ['e','a','b','c','d']arr.pop();  console.info(arr); // ['e','a','b','c']arr.shift();console.info(arr); // ['a','b','c']</code></pre><ol start="3"><li>sort</li></ol><pre><code class="language-javascript">var arr = [1,2,4,3,5,7,6,8,];arr.sort(function(prev,next){  return prev - next; //升序});console.info(arr);</code></pre><ol start="4"><li>forEach() , filter()</li></ol><pre><code class="language-javascript">var obj = {  name: '李白',  times: [1, 2, 3],  print: function () {    this.times.forEach(function (n) {      console.log(this.name);    }, this);  }};obj.print(); // 打印&quot;李白&quot;3次</code></pre><p>forEach方法也可以用于类似数组的对象和字符串</p><pre><code class="language-javascript">var obj = {  0: 1,  a: 'hello',  length: 1}Array.prototype.forEach.call(obj, function (elem, i) {  console.log( i + ':' + elem);});// 0:1var str = 'hello';Array.prototype.forEach.call(str, function (elem, i) {  console.log( i + ':' + elem);});// 0:h// 1:e// 2:l// 3:l// 4:o</code></pre><p>filter方法的参数函数可以接受三个参数，第一个参数是当前数组成员的值，这是必需的，后两个参数是可选的，分别是当前数组成员的位置和整个数组</p><pre><code class="language-javascript">[1, 2, 3, 4, 5].filter(function (elem, index, arr) {  return index % 2 === 0;});// [1, 3, 5]</code></pre><p>filter方法还可以接受第二个参数，指定测试函数所在的上下文对象（即<strong>this</strong>对象）</p><pre><code class="language-javascript">var Obj = function () {  this.MAX = 3;};var myFilter = function (item) {  if (item &gt; this.MAX) {    return true;  }};var arr = [2, 8, 3, 4, 1, 3, 2, 9];arr.filter(myFilter, new Obj()) // [8,4,9]</code></pre><ol start="5"><li>reduce() , reduceRight()<br>reduce方法和reduceRight方法依次处理数组的每个成员，最终累计为一个值</li></ol><pre><code class="language-javascript">[1, 2, 3, 4, 5].reduce(function(x, y){  // x为累积变量，y为当前变量  return x + y;});// 1 2// 3 3// 6 4// 10 5//最后结果：15</code></pre><p>利用reduce(),写一个数组求和的sum方法</p><pre><code class="language-javascript">Array.prototype.sum = function (){  return this.reduce(function (partial, value) {    return partial + value;  },10) //赋初值为10};[3, 4, 5, 6, 10].sum()  //38</code></pre><p>reduceRight()</p><pre><code class="language-javascript">function substract(prev, cur) {  return prev - cur;}[3, 2, 1].reduce(substract) // 0[3, 2, 1].reduceRight(substract) // -4</code></pre><p>reduce()搜索某个元素</p><pre><code class="language-javascript">function findLongest(entries) {  return entries.reduce(function (longest, entry) {    return entry.length &gt; longest.length ? entry : longest;  }, '');}findLongest(['aaa', 'bb', 'c']) // &quot;aaa&quot;</code></pre><h3 id="如何判断引用类型">如何判断引用类型</h3><p>typeof vs instanceof</p><h3 id="单例内置对象">单例内置对象</h3><p>Global(window)<br>Math</p><h2 id="javascript作用域">JavaScript作用域</h2><pre><code class="language-javascript">'use strict';function foo() {    var x = 1;    x = x + 1;}function bar() {    var x = 'A';    x = x + 'B';}</code></pre><ul><li>不同函数内部的同名变量互相独立，互不影响</li></ul><pre><code class="language-javascript">'use strict';function foo() {    var x = 1;    function bar() {        var y = x + 1; // bar可以访问foo的变量x!    }    var z = y + 1; // ReferenceError! foo不可以访问bar的变量y!}</code></pre><pre><code class="language-javascript">'use strict';function foo() {    var x = 1;    function bar() {        var x = 'A';        alert('x in bar() = ' + x); // 'A'，由‘内’向‘外’查找    }    alert('x in foo() = ' + x); // 1    bar();}</code></pre><ul><li>如果内部函数定义了与外部函数重名的变量，则内部函数的变量将“屏蔽”外部函数的变量。</li></ul><h3 id="变量提升">变量提升</h3><blockquote><p>JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部</p></blockquote><pre><code class="language-javascript">'use strict';function foo() {    var x = 'Hello, ' + y;    alert(x); // Hello,undefined    var y = 'Bob';}foo();</code></pre><p><strong>注意!</strong><br>由于JavaScript的这一怪异的“特性”，我们在函数内部定义变量时，请严格遵守“<strong>在函数内部首先申明所有变量</strong>”这一规则。最常见的做法是用一个var申明函数内部用到的所有变量</p><h3 id="全局作用域">全局作用域</h3><blockquote><p>不在任何函数内定义的变量就具有全局作用域。实际上，JavaScript默认有一个全局对象<strong>window</strong>，全局作用域的变量实际上被绑定到window的一个属性</p></blockquote><pre><code class="language-javascript">'use strict';var course = 'Learn JavaScript';alert(course); // 'Learn JavaScript'alert(window.course); // 'Learn JavaScript'</code></pre><ul><li>直接访问全局变量course和访问window.course是完全一样的</li></ul><pre><code class="language-javascript">'use strict';function foo() {    alert('foo');}foo(); // 直接调用foo()window.foo(); // 通过window.foo()调用</code></pre><ul><li>以变量方式var foo = function () {}定义的函数实际上也是一个全局变量</li></ul><h3 id="局部作用域">局部作用域</h3><pre><code class="language-javascript">'use strict';function foo() {    for (var i=0; i&lt;100; i++) {        //    }    i += 100; // 仍然可以引用变量i}'use strict';function foo() {    var sum = 0;    for (let i=0; i&lt;100; i++) {        sum += i;    }    i += 1; // SyntaxError}</code></pre><ul><li>为了解决块级作用域，ES6引入了新的关键字<strong>let</strong>，用let替代var可以申明一个块级作用域的变量</li></ul><h3 id="名字空间">名字空间</h3><p>全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。</p><pre><code class="language-javascript">// 唯一的全局变量MYAPP:var MYAPP = {};// 其他变量:MYAPP.name = 'myapp';MYAPP.version = 1.0;// 其他函数:MYAPP.foo = function () {    return 'foo';};</code></pre><ul><li>减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中</li></ul><h3 id="解构赋值">解构赋值</h3><p>从ES6开始，JavaScript引入了解构赋值，可以同时对一组变量进行赋值。</p><pre><code class="language-javascript">let [x, [y, z]] = ['hello', ['JavaScript', 'ES6']];x; // 'hello'y; // 'JavaScript'z; // 'ES6'let [, , z] = ['hello', 'JavaScript', 'ES6']; // 忽略前两个元素，只对z赋值第三个元素z; // 'ES6'</code></pre><pre><code class="language-javascript">var person = {    name: '小明',    age: 20,    gender: 'male',    passport: 'G-12345678',    school: 'No.4 middle school',    address: {        city: 'Beijing',        street: 'No.1 Road',        zipcode: '100001'    }};var {name, address: {city, zip}} = person;name; // '小明'city; // 'Beijing'zip; // undefined, 因为属性名是zipcode而不是zip// 注意: address不是变量，而是为了让city和zip获得嵌套的address对象的属性:address; // Uncaught ReferenceError: address is not defined</code></pre><ul><li>可以对嵌套的对象进行赋值，但要保证对应层次的一致性</li></ul><blockquote><p><strong>使用场景</strong></p></blockquote><h4 id="交换变量">交换变量</h4><pre><code class="language-javascript">var x=1, y=2;[x, y] = [y, x]</code></pre><h4 id="快速获取当前页面的路径和域名">快速获取当前页面的路径和域名</h4><pre><code class="language-javascript">var {hostname:domain, pathname:path} = location;</code></pre><h4 id="绑定对象属性">绑定对象属性</h4><pre><code class="language-javascript">function buildDate({year, month, day, hour=0, minute=0, second=0}) {    return new Date(year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second);}buildDate({ year: 2017, month: 1, day: 1 });// Sun Jan 01 2017 00:00:00 GMT+0800 (CST)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>One more step</title>
      <link href="/2017/10/25/weeks_02/"/>
      <url>/2017/10/25/weeks_02/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="💲🎗🌜🌱🎗🌴" />    <label for="pass">💲🎗🌜🌱🎗🌴</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NaN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端笔面题整理</title>
      <link href="/2017/10/23/%E7%AC%94%E9%9D%A2%E9%A2%98/"/>
      <url>/2017/10/23/%E7%AC%94%E9%9D%A2%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="html-css篇">HTML+CSS篇</h2><blockquote><p>div+css的布局较table布局有什么优点？</p></blockquote><ul><li>改版时更方便，只需要改动css文件</li><li>页面加载速度更快，结构化清晰，页面更简洁</li><li>表现与结构相分离</li><li>易于优化seo,排名更靠前</li></ul><blockquote><p>你能描述一下渐进增强和优雅降级之间的不同吗?</p></blockquote><ul><li>渐进增强（progressive enhancement)：针对低版本浏览器进行页面构建，保证其基本功能。然后再在高版本的浏览器进行交互操作的改进，改善用户体验。</li><li>优雅降级（graceful degradation）：一开始就进行完整的功能构建，然后在低版本的浏览器上进行兼容。</li></ul><p><strong>区别</strong></p><ol><li>优雅降级从复杂的现状开始，试图减少用户体验的供给</li><li>渐进增强从基本的功能开始，以适应未来环境的需求,保证其根基处于安全的地带</li></ol><p><strong>观点</strong></p><ul><li>“优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器的前一个版本。</li><li>“渐进增强”观点则认为应关注于内容本身。内容是我们建立网站的诱因。这使得“渐进增强”成为一种更为合理的设计范例。这也是它被 Yahoo! 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。</li></ul><blockquote><p>为什么用多个域名来存储网站资源更有效？</p></blockquote><ul><li>CDN缓存更方便</li><li>能突破浏览器的限制</li><li>节省cookie带宽</li><li>节约主域名的连接数，优化页面的响应速度</li></ul><blockquote><p>请描述一下cookies，sessionStorage和localStorage的区别？</p></blockquote><ol><li><strong>sessionStorage</strong>用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。而<strong>localStorage</strong>用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。</li><li><strong>Web Storage</strong>的概念和cookie相似，区别是它是为了更大容量存储设计的。Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。<br><strong>coocies</strong>作为HTTP的规范存在，作用是与服务器进行交互。而web storag只是在本地的“存储”数据。</li></ol><blockquote><p>超链接访问过后hover样式就不出现的问题是什么？如何解决？</p></blockquote><ul><li>被点击访问过的超链接样式不在具有hover和active了,解决方法是改变CSS属性的排列顺序: L-V-H-A（link,visited,hover,active）</li></ul><blockquote><p>rgba()和opacity的透明效果有什么不同？</p></blockquote><ul><li>rgba()和opacity都能实现透明效果，但最大的不同是opacity作用于元素，以及元素内的<strong>所有内容</strong>的透明度，而rgba()只作用于元素的颜色或其背景色。（设置rgba透明的元素的子元素<strong>不会继承</strong>透明效果！）</li></ul><blockquote><p>px和em的区别</p></blockquote><ul><li>px和em都是长度单位，区别是，<strong>px</strong>的值是<strong>固定</strong>的，指定是多少就是多少，计算比较容易。<br><strong>em</strong>的值不是固定的，并且em会继承父级元素的字体大小。浏览器的默认字体高都是16px。所以未经调整的浏览器都符合: 1em=16px。那么12px=0.75em,10px=0.625em。</li></ul><blockquote><p>问题：从点击url到页面最终被呈现，经历了哪些过程？</p></blockquote><ol><li>DNS解析URL对应的IP</li><li>TCP连接(三次握手)</li><li>发送HTTP请求</li><li>服务器处理请求返回HTTP报文</li><li>浏览器解析渲染页面</li><li>关闭TCP连接(四次挥手)</li></ol><h2 id="js篇">js篇</h2><h3 id="排序">排序</h3><pre><code class="language-javascript">/* 冒泡排序 */function bubbleSort(arr) {    var flag = false; //定义一个变量为false,未交换位置      for (var i = 0; i &lt;= arr.length - 1; i++) {        for (var j = 0; j &lt;= arr.length - 1; j++) {            if (arr[j + 1] &lt; arr[j]) {                temp = arr[j + 1];                arr[j + 1] = arr[j];                arr[j] = temp;                flag = true; //已交换位置            }        }        if (flag) {            flag = false; //如果交换了位置，将flag重新设置为false        } else {            break;        }    }    return arr;}/* 快速排序 */function quikSort(arr) {    if (arr.length &lt;= 1) {        return arr;    }    var mNumIndex = Math.floor(arr.length / 2); //取基准值的下标    var mNum = arr.splice([mNumIndex], 1)[0]; //取基准值    var left = [];     var right = [];    for (var i = 0; i &lt;= arr.length; i++) {        if (arr[i] &lt;= mNum) { //数组小于基准值的放在左边            left.push(arr[i]);        } else {            right.push(arr[i]); //数组大于基准值的放在右边        }    }    return quickSoft(left) + concat([mNum], quickSoft(right)); //左边数组+基准值+右边数组}/* 选择排序 */function selectSort(arr) {    var min, temp;    for (var i = 0; i &lt; arr.length - 1; i++) {        min = i;        for (var j = i + 1; i &lt; arr.length; j++) {            if (arr[j] &lt; arr[min]) {                min = j;            }        }        swap(arr,min,i);    }    return arr;       }function swap(arr,i,j) {    var temp = arr[i];    arr[i] = arr[j];    arr[j] = temp; }/* 插入排序 */function insertSort(arr) {    var temp, j;    for (i = 1; i &lt;= arr.length; i++) {        temp = arr[i];        j = i;    }    while (j &gt; 0 &amp;&amp; arr[j - 1] &gt; temp) {        arr[j] = arr[j - 1];        j--;    }    arr[j] = temp;    }    return arr;}/* sort方法 */arr.sort(function (a, b) {    return a - b;});/* ES6 */arr.sort((a, b) =&gt; a - b); </code></pre><h3 id="求和">求和</h3><h4 id="reduce">reduce()</h4><pre><code class="language-javascript">Array.prototype.sum = function () {    return this.reduce(function(a,b){        return a + b;    },10)};[3,4,5,6,7].sum();</code></pre><h3 id="搜索">搜索</h3><h4 id="reduce-v2">reduce()</h4><pre><code class="language-javascript">function findLongest(entries) {    return entries.reduce(function(longest,entry) {        return entry.length &gt; longest.length ? entry : longest;    },'');}findLongest(['aaa','bb','c'])</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轻飘飘的这段时光</title>
      <link href="/2017/10/17/daily_04/"/>
      <url>/2017/10/17/daily_04/</url>
      
        <content type="html"><![CDATA[<p>这篇文章都不知道是从什么时候起头的，这些文字放在编辑器里，想到什么就写些什么，随心所欲的感觉倒也不错（果然是很棒的拖延症借口）。</p><h2 id="火车上">火车上</h2><p>每次坐在火车上时，总感觉有很多东西想要写出来。自己就像是一个观众，在看火车与时间赛跑，只是疾行的火车跑的再快也赶不上缓缓而逝的时光。</p><p>十一的八天假就这样一晃而过，回想起在家里的时光。总觉得是那么的美好。和谌丹开着玩笑，然后肆意地哈哈大笑。和老稳聊聊他的那些奇葩的同学，也经常调侃他。还有亚帅，总想起他一本正经跟大人们说话的样子。想想都很好玩。在家人面前，是最真实的自己，没必要伪装。这会让我感觉很舒适。</p><h2 id="校园里">校园里</h2><p>三周的阴雨天气，今天总算是放晴了。早上在操场上散步，抬头看看久违的蓝天，再看看那片绿茵场，“这是一段多么美好的清晨时光啊。”</p><p>不知为什么，来到大四以后。每天的时间都好像被刻意的拨快了一般。仔细想想，从开学到现在，我一本小说也没看过。不再捣腾手机，连偶尔看个比赛都有些小心翼翼。的确，我是有些慌了。我知道我的能力还不足以胜任工作，我还要学很多很多的东西。</p><h2 id="这几天">这几天</h2><p>昨天晚上为自己的博客，换了个主题—<code>yilia</code>,样式我很喜欢。最近在学css的相关知识，可以试着自定义一些东西（所谓的learn by doing)。但是主题配置似乎出现了些问题，昨天弄了好久也没解决。</p><p>想着今天早上把它给解决掉，但又遇到了一个新的主题—<code>Material</code>。也让我非常惊艳。跟之前手机用过的一个主题非常相似。而更让我惊讶的是，这个主题的主要开发者，竟然是两个未满20岁的少年。有一个还在上高中。瞬间就感觉到了无法言状的差距感。不过仔细想想倒也很正常，有些人早早就知道了自己喜欢干什么，并且能坚持自己的爱好。但更多的人，上了很多年的学也不知道自己该干些什么。</p><p>坦白讲，大学的几年里。我在不断地尝试一些东西，看了不少的书。Java，python，软件测试，Android，web安全等等。尽管很多都是浮光掠影，但也大致确立了知识的体系。从开始系统地接触前端到现在，还不到两个月的时间。我进步了不少，也试着去接触一些前沿的技术。不过呢，还是要从基础学起， HTML+CSS+JavaScript必须吃透。我在前几周的时间里，学习了它们的基础知识。进阶阶段的系统学习，却迟迟没有开始。</p><h2 id="胡思乱想">胡思乱想</h2><p>这几天，心情很烦躁。学习效率低下。没错，是我想的太多了。我在想找工作的事。人很难不受到环境的一丁点影响。当然，有时候我会幻想自己能达到技术压倒一切的境界，这样便可以忽略外在环境的嘈杂和虚幻（让我闭上眼睛，多傻笑一会儿）。</p><p>我先去跑会儿步去~~~</p><p>跑完步回来，又洗了个头。还是想着把这篇文章结个尾。<br>总觉得，每天跑完步从操场回宿舍的那段路，是非常舒适的。心中不会有太多的想法，脚步轻快又自在。</p><p><code>无知和弱小从来不是生存的障碍，傲慢才是</code></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NaN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爱你就像爱生命</title>
      <link href="/2017/10/15/%E7%88%B1%E4%BD%A0%E5%B0%B1%E5%83%8F%E7%88%B1%E7%94%9F%E5%91%BD/"/>
      <url>/2017/10/15/%E7%88%B1%E4%BD%A0%E5%B0%B1%E5%83%8F%E7%88%B1%E7%94%9F%E5%91%BD/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>在人世间有一种庸俗势力的大合唱，谁一旦对它屈服，就永远沉沦了，真是可惜。有无数为人师表的先生们在按照他们自己的模样塑造别人，真是可惜。</li></ul></blockquote><hr><blockquote><ul><li>小波的文字极有特色。就像帕瓦罗蒂一张嘴，不用报名。你就知道这是帕瓦罗蒂，胡里奧一唱你就知道是胡里奧一样，小波的文字也是这样，你一看就知道出自他的手笔。台湾李敖说过，他是中国白话文第一把手，不知道他看了王小波的文字还会不会这么说。真的，我就是这么想的。</li></ul></blockquote><hr><blockquote><ul><li>虽然小波出人意料地、过早地离开了我，但是回忆我们从相识到相爱到永別的二十年，我没有什么可抱怨的：我们曾经拥有幸福，拥有爱，拥有成功，拥有快乐的生活。</li></ul></blockquote><hr><blockquote><ul><li>生活过，写作过，爱过。</li></ul></blockquote><hr><blockquote><ul><li>人就像一本书，你要挑一本好看的书来看。我觉得我生命中最大的收获和幸运就是，我挑了小波这本书来看。</li></ul></blockquote><hr><blockquote><ul><li>自从我认识了你，我觉得所有的人都黯然失色，再也没有谁比你更好了，我的菩提树……无论是欢乐和悲伤，我总到那里去。“是啊，我的心总向往你，特别是在悲伤的时候。”</li></ul></blockquote><hr><blockquote><ul><li>我太懒了，太不像话了，居然一个星期不给你写信，你为什么原谅了我呢？我现在要给你写信，去他的政治经济学和那个瘦高个老师！他们休想扰乱我。再说王某人也轻易不会吃二分的。</li></ul></blockquote><hr><blockquote><ul><li>雾中散步，真正奇妙。谁都会有片刻的恍惚，觉得一切都走到了终结，也许再不能走下去了。</li></ul></blockquote><hr><blockquote><ul><li>昨天我看见了好多情侶，我觉得很喜欢那些人。过去我在马路边看见别人依依不舍就觉得肉麻。现在我忏悔。居然我能到了敢在大街上接吻的地步，我很自豪。</li></ul></blockquote><hr><blockquote><ul><li>我越来越认为，平庸的生活、为社会扮演角色，把人都榨干了。我们做的每一件事都是尽义务，我们自己的价值标准也是被规定了的。做人的乐趣不是太可怜了吗？难怪有人情愿做一只疯狗呢。</li></ul></blockquote><hr><blockquote><ul><li>如果我会发光，就不必害怕黑暗。如果我自己是那么美好，那么一切恐惧就可以烟消云散。</li></ul></blockquote><hr><blockquote><ul><li>一本在你手中待过很长时间的好书就像一张熟悉的面孔一样，永远不会忘记。</li></ul></blockquote><hr><blockquote><ul><li>她是瘦小的身材，消瘦的脸，眼睛真大啊。可爱的双眼皮，棕色的眼睛！对着我的时候这眼睛永远微笑而那么有光彩。光洁的小额头，孩子气的眉毛，既不太浓，也不太疏，长得那么恰好，稍微有点儿弯。端立的鼻子，坚决的小嘴，消瘦的小脸，那么秀气！柔软的棕色发辫。脖子也那么瘦：微微地动一下就可以看见肌肉在活动。</li></ul></blockquote><hr><blockquote><ul><li>我起初怀疑，一对不美的人的恋爱能是美的吗？后来的事实证明，两颗相爱的心在一起可以是美的。我们爱得那么深。</li></ul></blockquote><hr><blockquote><ul><li>以后咱们真的再也不能在野外过星期天了，要不我非一星期病一次不可。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爱情 </tag>
            
            <tag> 王小波 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>沉默的大多数</title>
      <link href="/2017/10/02/%E6%B2%89%E9%BB%98%E7%9A%84%E5%A4%A7%E5%A4%9A%E6%95%B0/"/>
      <url>/2017/10/02/%E6%B2%89%E9%BB%98%E7%9A%84%E5%A4%A7%E5%A4%9A%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>编导们利用&quot;一切尽在不言中&quot;的文化氛围，确实是大有可为。但我们写稿子的就倒了霉：想要使文字暧昧、可意会不可言传，就只好造些新词、怪词，或者串几句英文。我现在正犯后一种毛病，而且觉得良心平安：英文虽然难懂，但毕竟是种人话，总比编出一种鬼话要强一点吧。前面所写的homo、S/M，都是英文缩写。虽然难懂，但我照用不误。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
            <tag> 王小波 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知乎周刊</title>
      <link href="/2017/09/28/%E7%9F%A5%E4%B9%8E%E5%91%A8%E5%88%8A/"/>
      <url>/2017/09/28/%E7%9F%A5%E4%B9%8E%E5%91%A8%E5%88%8A/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>我们既渴望，又恐惧真正的亲密关系。我们对爱怀有一种防御心理，这种心理给了我们安全和保障的错觉，认为它会使我们免受伤害，实际上却阻碍了我们获得所渴求的亲密感情。</li></ul></blockquote><hr><blockquote><ul><li>用一种方法，最好是只有一种方法来做一件事。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>失控</title>
      <link href="/2017/09/27/%E5%A4%B1%E6%8E%A7/"/>
      <url>/2017/09/27/%E5%A4%B1%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>创新往往发生在边缘地带，发生在不那么优化的区域。创业公司的起点往往就处在这种边缘地带中。换句话说，创新往往意味着不那么优化，意味着某种程度的低效率。但系统的活性也正是由此而来。</li></ul></blockquote><hr><blockquote><ul><li>「蜂群思维」的神奇在于，没有一只蜜蜂在控制它，但是有一只看不见的手，一只从大量愚钝的成员中涌现出来的手，控制着整个群体。它的神奇还在于，量变引起质变。要想从单个虫子的机体过渡到集群机体，只需要增加虫子的数量，使大量的虫子聚集在一起，使它们能够相互交流。等到某一阶段，当复杂度达到某一程度时，「集群」就会从「虫子」中涌现出来。虫子的固有属性就蕴涵了集群，蕴涵了这种神奇。我们在蜂箱中发现的一切，都潜藏在蜜蜂的个体之中。不过，你尽管可以用回旋加速器和X光机来探查一只蜜蜂，但是永远也不能从中找出蜂巢的特性。</li></ul></blockquote><hr><blockquote><ul><li>潘菲尔德通过大胆的开颅术，在病人清醒的状态下利用电激探查其小脑活体，请他们讲述自己的感受。病人们能够回忆起非常生动的往事。电激的最微小移动能引发截然不同的想法。潘菲尔德在用探测器扫描小脑表面的同时，绘制出每个记忆在大脑中的对应位置。<br>他的第一个意外发现是，那些往事是可以重播的，就如同在若干年后播放录音机一般——「摁下重播键」。潘菲尔德在描述一位二十六岁妇女癫痫发作后的幻觉时用了「回闪」这个词：「同样的回闪出现了几次，都与她表亲的家或去那里的旅行有关——她已经有十到十五年没有去那里了，但小时候常去。」 潘菲尔德对活脑这块处女地的探索使得人们形成了根深蒂固的印象：脑半球就好比出色的记录装置，其精彩的回放功能似乎更胜过时下流行的留声机。我们的每个记忆都被精确地刻划在它自己的碟片上，由不偏不倚的大脑忠实地将其分类归档，并能像自动点唱机中的歌曲一样，摁动正确的按扭就能播放出来，除非受到暴力的损伤。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命运 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嫌疑犯X的献身</title>
      <link href="/2017/09/26/%E5%AB%8C%E7%96%91%E7%8A%AFX%E7%9A%84%E7%8C%AE%E8%BA%AB/"/>
      <url>/2017/09/26/%E5%AB%8C%E7%96%91%E7%8A%AFX%E7%9A%84%E7%8C%AE%E8%BA%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>别急，他告诫自己。急躁不能解决任何问题，这个方程式一定有完美的答案。</li></ul></blockquote><hr><blockquote><ul><li>靖子走出出租车时的表情，石神至今仍印象深刻，那是他从未见过的娇艳面容。既非母亲也非店员的表情，才是她的本来面目。那时她展现的，是身为女人的一面。在这个人面前，她展现了绝不让我看见的另一面……</li></ul></blockquote><hr><blockquote><ul><li>可惜太多老师不愿回答这种单纯的疑问。不，是答不出，石神知道，他们也没真正理解数学，只是按照既定的教材照本宣科，只想着让学生拿到好分数。对森冈提出的这种质疑，恐怕只会觉得不耐烦。</li></ul></blockquote><hr><blockquote><ul><li>她用力吸了一口气，双手捂嘴。心中猛地一撞，她差点儿失声尖叫。她全身血液沸腾，紧接着又全身冰凉。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础</title>
      <link href="/2017/09/24/JavaScript_01/"/>
      <url>/2017/09/24/JavaScript_01/</url>
      
        <content type="html"><![CDATA[<p>过去的一周里，在学习JavaScript的一些知识。确实，这跟之前学的Java，c有很大的不同。JavaScript作为曾经最被误解的语言（被称作丑陋，无用的玩具），到现在成为最为流行和重要的语言之一。这让任何人都会感到不可思议。这也恰是它吸引我的地方。想要感受它的魔力，先从基础开始。对于JavaScript，我会分为三个部分—基础，进阶和高级来学习。</p><h2 id="基本知识">基本知识</h2><blockquote><p>JavaScript=ECMAScript+DOM+BOM</p></blockquote><ul><li>ECMAScript JavaScript语言规范</li><li>DOM 针对HTML的编程接口</li><li>BOM 针对浏览器的编程接口</li></ul><blockquote><p>标识符</p></blockquote><ul><li>第一个字符必须是字母，下划线或美元符号</li><li>其他字符可以是字母，下划线，美元符号或数字</li></ul><h2 id="strict-mode">strict mode</h2><h3 id="目的">目的</h3><ul><li>明确禁止一些不合理、不严谨的语法，减少JavaScript的一些怪异行为。</li><li>增加更多报错的场合，消除代码运行的一些不安全之处，保证代码运行的安全。</li><li>提高编译器效率，增加运行速度。</li><li>为未来新版本的JavaScript做好铺垫。</li></ul><h3 id="方法">方法</h3><ol><li>全局</li></ol><pre><code class="language-javascript">&lt;script&gt;  'use strict';  console.log('这是严格模式');&lt;/script&gt; </code></pre><ol start="2"><li>函数</li></ol><pre><code class="language-javascript">function strict() {  'use strict';  return '这是严格模式';}function strict2() {  'use strict';  function f() {    return '这也是严格模式';  }  return f();}</code></pre><h3 id="过渡">过渡</h3><p><strong>非函数代码块不得声明函数</strong></p><pre><code class="language-javascript">'use strict';if (true) {  function f1() { } // 语法错误}for (var i = 0; i &lt; 5; i++) {  function f2() { } // 语法错误}</code></pre><ul><li>上面代码在if代码块和for代码块中声明了函数，在严格模式下都会报错</li></ul><p><strong>保留字</strong></p><pre><code class="language-javascript">function package(protected) { // 语法错误  'use strict';  var implements; // 语法错误}</code></pre><ul><li>严格模式新增了一些保留字：implements, interface, let, package, private, protected, public, static, yield。使用这些词作为变量名将会报错</li><li>此外，ES5本身还规定了另一些保留字（class, enum, export, extends, import, super），以及各大浏览器自行增加的const保留字，也是不能作为变量名的</li></ul><p>详细关于<a href="http://javascript.ruanyifeng.com/advanced/strict.html#toc21" target="_blank" rel="noopener">严格模式</a></p><p><strong>变量</strong></p><ol><li>局部变量</li></ol><pre><code class="language-javascript">function test(){var message='hi';  //局部变量}test();alert(message);  //错误</code></pre><ol start="2"><li>全局变量</li></ol><pre><code class="language-javascript">function test(){ message='hi';  //全局变量}test();alert(message);  //'hi'</code></pre><ul><li>定义局部变量时，不要漏了<strong>var</strong>，否则会造成局部变量的污染</li></ul><h2 id="数据类型">数据类型</h2><h3 id="typeof运算符">typeof运算符</h3><blockquote><p>原始类型</p></blockquote><pre><code class="language-javascript">typeof 123 // &quot;number&quot;typeof '123' // &quot;string&quot;typeof false // &quot;boolean&quot;</code></pre><ul><li>数值、字符串、布尔值分别返回number、string、boolean</li></ul><blockquote><p>函数</p></blockquote><pre><code class="language-javascript">function f() {}typeof f// &quot;function&quot;</code></pre><ul><li>函数返回function</li></ul><blockquote><p>undefined</p></blockquote><pre><code class="language-javascript">typeof undefined// &quot;undefined&quot;</code></pre><ul><li>undefined返回undefined<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></li></ul><pre><code class="language-javascript">// 错误的写法if (v) {  // ...}// ReferenceError: v is not defined// 正确的写法if (typeof v === &quot;undefined&quot;) {  // ...}</code></pre><ul><li>用来判断语句</li></ul><blockquote><p>其他</p></blockquote><pre><code class="language-javascript">typeof window // &quot;object&quot;typeof {} // &quot;object&quot;typeof [] // &quot;object&quot;typeof null // &quot;object&quot;</code></pre><ul><li>除上述情况外，其他情况都返回<strong>object</strong></li></ul><h3 id="undefined和null">undefined和null</h3><p>两者都可以表示“没有”，含义很相似，语法效果几乎一样。</p><pre><code class="language-javascript">if (!undefined) {  console.log('undefined is false');}// undefined is falseif (!null) {  console.log('null is false');}// null is falseundefined == null// true</code></pre><ul><li>在if语句中，它们都会被自动转为false</li></ul><p><strong>用法和含义</strong></p><pre><code class="language-javascript">// 变量声明了，但没有赋值var i;i // undefined// 调用函数时，应该提供的参数没有提供，该参数等于undefinedfunction f(x) {  return x;}f() // undefined// 对象没有赋值的属性var  o = new Object();o.p // undefined// 函数没有返回值时，默认返回undefinedfunction f() {}f() // undefined</code></pre><ul><li>当⼀个变量是为了保存⼀个对象，但没办法⽴即初始化的时候，应该为之分配⼀个null值</li></ul><h3 id="bull">bull</h3><p>如果JavaScript预期某个位置应该是布尔值，会将该位置上现有的值自动转为布尔值</p><blockquote><p>undefined<br>null<br>false<br>0<br>NaN<br>&quot;&quot;或’’（空字符串）</p></blockquote><ul><li>转换规则是除了上面六个值被转为false，其他值都视为true</li></ul><pre><code class="language-javascript">if ([]) {  console.log(true);}// trueif ({}) {  console.log(true);}// true</code></pre><ul><li>需要特别注意的是，空数组（[]）和空对象（{}）对应的布尔值，都是<strong>true</strong>。</li></ul><h3 id="number">number</h3><blockquote><p>整数和浮点数</p></blockquote><p>JavaScript 内部，所有数字都是以<strong>64位浮点数</strong>形式储存，即使整数也是如此。JavaScript 语言的底层根本没有整数，所有数字都是小数（64位浮点数）。容易造成混淆的是，<strong>某些运算只有整数才能完成</strong>，此时 JavaScript 会自动把64位浮点数，转成32位整数，再进行运算。</p><blockquote><p>特殊数值</p></blockquote><p><strong>+0和-0</strong></p><pre><code class="language-javascript">-0 === +0 // true 0 === -0 // true 0 === +0 // true+0 // 0-0 // 0(-0).toString() // '0'(+0).toString() // '0'</code></pre><ul><li>几乎所有场合，正零和负零都会被当作正常的0。</li></ul><pre><code class="language-javascript">(1 / +0) === (1 / -0) // false</code></pre><ul><li>除以正零得到+Infinity，除以负零得到-Infinity，这两者是不相等的</li></ul><p><strong>NaN</strong></p><blockquote><p>NaN是 JavaScript 的特殊值，表示“非数字”（Not a Number），主要出现在将字符串解析成数字出错的场合。</p></blockquote><pre><code class="language-javascript">NaN + 32 // NaNNaN - 32 // NaNNaN * 32 // NaNNaN / 32 // NaNNaN === NaN // false</code></pre><ul><li>NaN与任何数（包括它自己）的运算，得到的都是NaN</li></ul><p><strong>Infinity</strong></p><blockquote><p>Infinity表示“无穷”，用来表示两种场景。一种是一个正的数值太大，或一个负的数值太小，无法表示；另一种是非0数值除以0，得到Infinity。</p></blockquote><pre><code class="language-javascript">//场景一Math.pow(2, Math.pow(2, 100))// Infinity// 场景二0 / 0 // NaN1 / 0 // Infinity</code></pre><h3 id="string">string</h3><p><strong>字符串与数组</strong></p><pre><code class="language-javascript">var s = 'hello';s[0] // &quot;h&quot;s[1] // &quot;e&quot;s[4] // &quot;o&quot;// 直接对字符串使用方括号运算符'hello'[1] // &quot;e&quot;</code></pre><ul><li>字符串可以被视为字符数组，因此可以使用数组的方括号运算符，用来返回某个位置的字符（位置编号从0开始）</li></ul><pre><code class="language-javascript">var s = 'hello';delete s[0];s // &quot;hello&quot;s[1] = 'a';s // &quot;hello&quot;s[5] = '!';s // &quot;hello&quot;</code></pre><ul><li>字符串内部的单个字符无法改变和增删</li></ul><p><strong>length属性</strong></p><pre><code class="language-javascript">var s = 'hello';s.length // 5s.length = 3;s.length // 5s.length = 7;s.length // 5</code></pre><ul><li>字符串的length属性无法改变，但是不会报错</li></ul><h3 id="object">object</h3><blockquote><p>对象（object）是JavaScript的核心概念，也是最重要的数据类型。JavaScript的所有数据都可以被视为对象。简单说，所谓对象，就是一种无序的数据集合，由若干个“键值对”（<strong>key-value</strong>）构成。</p></blockquote><p><strong>生成方法</strong></p><pre><code class="language-javascript">var o1 = {}; //简洁明了var o2 = new Object(); //采用构造函数的写法清晰地表示了意图var o3 = Object.create(Object.prototype); //一般用在需要对象继承的场合</code></pre><p><strong>属性</strong></p><pre><code class="language-javascript">var o = {  p: function (x) {    return 2 * x;  }};o.p(1)// 2</code></pre><ul><li>对象的每一个“键名”又称为“属性”（property），它的“键值”可以是任何数据类型。如果一个属性的值为函数，通常把这个属性称为“方法”，它可以像函数那样调用</li></ul><pre><code class="language-javascript">var obj = {};obj.foo = 123;obj.foo // 123</code></pre><ul><li>属性可以动态创建，不必在对象声明时就指定</li></ul><p>这篇文章是关于JavaScript基础的学习总结，暂不深入讨论关于object的<a href="http://javascript.ruanyifeng.com/grammar/object.html" target="_blank" rel="noopener">更多内容</a></p><h3 id="function">function</h3><p><strong>声明</strong></p><ol><li>function命令</li></ol><pre><code class="language-javascript">function print(s) {  console.log(s);}</code></pre><ol start="2"><li>函数表达式</li></ol><pre><code class="language-javascript">var print = function(s) {  console.log(s);};</code></pre><ol start="3"><li>采用函数表达式声明函数时，function命令后面不带有函数名。如果加上函数名，该函数名只在函数体内部有效，在函数体外部无效。</li></ol><pre><code class="language-javascript">var print = function x(){  console.log(typeof x);};x// ReferenceError: x is not definedprint()// function</code></pre><ul><li>这样写的用处有两个一是可以在函数体<strong>内部调用自身</strong>，二是方便<strong>除错</strong>（除错工具显示函数调用栈时，将显示<strong>函数名</strong>，而不再显示这里是一个匿名函数）</li></ul><p><strong>return语句和递归</strong></p><ol><li>JavaScript引擎遇到return语句，就直接返回return后面的那个表达式的值，后面即使还有语句，也不会得到执行。也就是说，return语句所带的那个表达式，就是函数的返回值。</li></ol><pre><code class="language-javascript">function add(x, y) {  return x + y;}add(1, 1) // 2</code></pre><ol start="2"><li>函数可以调用自身—递归，下面计算斐波那契数列的代码，fib函数内部又调用了fib()。</li></ol><pre><code class="language-javascript">function fib(num) {  if (num === 0) return 0;  if (num === 1) return 1;  return fib(num - 2) + fib(num - 1);}fib(6) // 8</code></pre><h2 id="运算符">运算符</h2><p><strong>加法运算符</strong></p><pre><code class="language-javascript">'1' + {foo: 'bar'} // &quot;1[object Object]&quot;'1' + 1 // &quot;11&quot;'1' + true // &quot;1true&quot;'1' + [1] // &quot;11&quot;</code></pre><ul><li>由于运算符左边是一个字符串，导致右边的运算子都会先转为字符串，然后执行字符串连接运算</li></ul><pre><code class="language-javascript">'3' + 4 + 5 // &quot;345&quot;3 + 4 + '5' // &quot;75&quot;</code></pre><ul><li>这种由于参数不同，而改变自身行为的现象，叫做“重载”（overload）。由于加法运算符是<strong>运行时</strong>决定到底执行那种运算，使用的时候必须很小心</li></ul><p><strong>数值运算符</strong>and<strong>负数值运算符</strong></p><pre><code class="language-javascript">+true // 1+[] // 0+{} // NaN</code></pre><ul><li>数值运算符的作用在于可以将任何值转为数值（与Number函数的作用相同）</li></ul><pre><code class="language-javascript">var x = 1;-x // -1-(-x) // 1</code></pre><ul><li>负数值运算符（-），也同样具有将一个值转为数值的功能，只不过得到的值正负相反。连用两个负数值运算符，等同于数值运算符</li></ul><h2 id="语句">语句</h2><h2 id="函数">函数</h2><p>模拟函数的重载</p><blockquote><p>使用模拟函数重载来编写一个具有如下功能的函数：<br>1，如果输入参数大于三个，返回最后一个参数。<br>2，如果输入参数小于等于三个且全部为数字，则返回排序后的数组，如果最后一个数为奇数则降序排列，反之升序排列。<br>3，如果输入参数小于等于三个且包含字符串，则将所有参数强制转化为字符串联接返回。</p></blockquote><pre><code class="language-javascript">function myFunc() {  var arguLen = arguments.length  if (arguLen &gt; 3) {     //第一种情况      return arguments[arguLen-1];  }  else if (arguLen &lt;= 3) {    var numFlag = true;  //用于判断是否均为数字    var strFlag = false;  //用于判断是否包含字符串    for (var i =0; i&lt;=arguLen; ++i){      if (typeof arguments[i] != &quot;number&quot;) {        numFlag = false;      }      if (typeof arguments[i] === &quot;string&quot;) {        strFlag = true;        break;      }    }    if (numFlag) {  //第二种情况      // arguments是array-like object，故先转为数组      var args = [].slice.call(arguments,0);  //转成数组      // 最后一个参数为偶数时的情况      if (args[arguLen - 1] % 2 == 0){        return args.sort((a, b) =&gt; a - b);  //升序      }      else {        return args.sort((a,b) =&gt; b - a);  //降序      }    }    else if (strFlag) {  //第三种情况       var result = &quot;&quot;;       for (var i = 0; i &lt;= arguLen; ++i;) {         result += String(arguments[i]);       }       return result;       }      }    return;}</code></pre><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>可以用来检查一个没有声明的变量，而不报错。 <a href="#fnref1" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查令十字街84号</title>
      <link href="/2017/09/24/%E6%9F%A5%E4%BB%A4%E5%8D%81%E5%AD%97%E8%A1%9784%E5%8F%B7/"/>
      <url>/2017/09/24/%E6%9F%A5%E4%BB%A4%E5%8D%81%E5%AD%97%E8%A1%9784%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>总是在最边缘最异质的人身上，才得到自身最清晰的印记。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爱情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>白夜行</title>
      <link href="/2017/09/22/%E7%99%BD%E5%A4%9C%E8%A1%8C/"/>
      <url>/2017/09/22/%E7%99%BD%E5%A4%9C%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>我的天空里没有太阳，总是黑夜，但并不暗，因为有东西代替了太阳。虽然没有太阳那么明亮，但对我来说已经足够。凭借着这份光，我便能把黑夜当成白天。你明白吗？我从来就没有太阳，所以不怕失去。</li></ul></blockquote><hr><blockquote><ul><li>而是在眼神交会的那一刹那，为男孩眼里蕴含的阴沉黑暗所冲击。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>精进</title>
      <link href="/2017/09/20/%E7%B2%BE%E8%BF%9B/"/>
      <url>/2017/09/20/%E7%B2%BE%E8%BF%9B/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>种一棵树最好的时间是十年前，其次是现在。</li></ul></blockquote><hr><blockquote><ul><li>很多人回首自己的大学时代，感慨的并不是时光的匆匆而逝，而是自己没有去尝试更多的机会，后来只得面临选择越来越少的窘境。</li></ul></blockquote><hr><blockquote><ul><li>关键是改变自己的角色，让自己从一个“学习者”的角色变成一个“探索者”的角色。探索者当然也是学习者，但他除了通过学习来掌握现有的知识外，他还要进一步深入地探索，突破教师、教材、课程计划给自己的种种限定，建立自己独特的研究轨迹，去拓展和发现一个更开阔也更深邃的世界。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心理学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一周小结</title>
      <link href="/2017/09/17/weeks_01/"/>
      <url>/2017/09/17/weeks_01/</url>
      
        <content type="html"><![CDATA[<p>这段日子，时间过的很快。转眼之间，又过去了一个星期。这个星期我做了什么呢？我能记起来的是，系统的学习了HTML和CSS的一部分知识。这是第一次我把一本专业书吃透，书翻了一遍又一遍，视频也反复的看。跟之前碎片化的学习相比，效果的确是完全不一样。体现在更深层次的理解和运用上。很多人学到的东西，往往不会用。归根结底，还是还是没有真正的吃透知识，仅仅停留在看似懂的层面上。</p><p>学习完CSS工作原理这部分的知识后，我写了一篇总结的文章。我的写作能力和执行力确实需要加强。完成这篇文章，花了我近两天的时间。效率实在太低了。需要好好地加强这方面的能力。多阅读，多思考。不过，我这周的阅读时间太少了。睡觉之前还是要看看狗耳朵日报推送的新闻。</p><p>还能记起来的是看了一场精彩的球赛。上港在主场4：0击败恒大，本来以为次回合没什么悬念了。可结果恒大硬是把上港拖入了点球大战。而且比赛过程，也是一波三折。总之这场比赛看得很过瘾，不过也挺累的。加时赛加上点球大战，足足进行了3个小时。我也不知道我为什么喜欢看球赛，而且是喜欢一个人看球赛。跟那些完全不懂球的人一起看比赛，简直是一种折磨（尽管我也只是个伪球迷而已）。</p><p>这周，收获的确是有的。但是，还是有相当一部分的时间，没有好好利用上。仔细想想，这段时间我在干什么呢，无非是刷一些毫无营养的消息。还有胡思乱想。这会手机不在身旁，我反而觉得更加的舒适（没错，就是这样），不去想是不是有什么错过的重大消息。绝大部分情况下，根本就没什么值得关注的消息。我承认，我也和大多数人一样，患上了手机焦虑症，总感觉手机有消息提醒。而且，我把好友动态关了又开，开了又关。我决定了，关闭好友动态一周。其实，“好友”每天发的也都是些无关痛痒的东西。</p><p>对了，这周除了有一天下雨没去跑步之外，每天夜晚都跑步二十分钟。跑步就和写作一样，完成之后，心里还是有些成就感的。</p><p>最后，再来说说写作吧。搭建完这个博客的前几天，我写了两篇随笔。我经常会打开百度统计，看看有没有人来看我写的东西。结果是，除了前两天有人来看之外，后来再也无人问津。既然是博客，内心还是希望有人来看我写的东西的。不过，在这个时代，每个人都只会去刷朋友圈，有谁会闲着没事来看博客呢。好吧，那就只当是自娱自乐了。不过，我还是挺喜欢写作带来的乐趣的。</p><p>跑完步，洗了个身子，喝了杯牛奶，马上就要到熄灯的时候了，一天也就这样结束了。<br>果然，很多事情不像想象中那么美好。只希望<code>生活过，写作过，爱过。</code></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css工作原理</title>
      <link href="/2017/09/16/css_01/"/>
      <url>/2017/09/16/css_01/</url>
      
        <content type="html"><![CDATA[<p>这两天的时间在学习css的基础内容，主要是看《css设计指南》再结合一些视频，自己敲敲代码。这种学习方式还不错，能让我更好地理解css的基本原理。我打算分三部分来学习总结css这部分的内容。这是第一部分，主要复习css规则，<strong>选择器</strong>，以及继承和层叠。</p><h2 id="添加样式的三种方法">添加样式的三种方法</h2><ol><li>行内样式 =&gt; 写在特定HTML标签的style属性</li></ol><pre><code class="language-css">&lt;p style=&quot;font-family:arial;color:red;font-size:20px;&quot;&gt;一个段落。&lt;/p&gt;</code></pre><hr><ol start="2"><li>嵌入样式 =&gt; 放在HTML文档的head元素中</li></ol><pre><code class="language-css">&lt;head&gt;  &lt;style type=&quot;text/css&quot;&gt;    body {      background-color:yellow;    }    p {      color:blue;    }  &lt;/style&gt;&lt;/head&gt;</code></pre><hr><ol start="3"><li>链接样式 =&gt; 把样式放在一个单独的文件里（样式表），可以在任意多个HTML页面中链接同一个样式表</li></ol><pre><code class="language-html">&lt;head&gt;  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt;&lt;/head&gt;</code></pre><p><strong>优先级</strong>   行内样式 &gt; 嵌入样式 &gt; 链接样式（就近原则）<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><hr><h2 id="命名惯例">命名惯例</h2><p>选择器 (组) + 声明（属性+值）</p><h3 id="简单选择器">简单选择器</h3><h4 id="type-selector">type selector</h4><pre><code class="language-css">&lt;h2&gt;类型选择器&lt;/h2&gt;h2{border: 1px solid red;}</code></pre><ul><li>为h2加上红色边框</li></ul><h4 id="id-selectors">id selectors</h4><blockquote><p>语法 <strong>#id名</strong></p></blockquote><p>写法与类选择器相似，但在页面中只能唯一标识一个元素（每个id名在页面中只能用一次）</p><ol><li>用于页内导航</li></ol><pre><code class="language-css">&lt;a herf=&quot;#third&quot;&gt;article&lt;a&gt;&lt;h3 id=&quot;third&quot;&gt;article&lt;/h3&gt;</code></pre><ul><li>#表示链接的目标在当前页面，导航到同一页的h3元素位置</li></ul><hr><ol start="2"><li>返回顶部的链接</li></ol><pre><code class="language-html">&lt;a herf=&quot;#&quot;&gt;返回顶部&lt;/a&gt;</code></pre><h4 id="class-selectors">class selectors</h4><p>用于描述<strong>一组</strong>元素的样式，class可以在多个元素中使用</p><blockquote><p>语法   <strong>.类名</strong></p></blockquote><pre><code class="language-css">.center {text-align:center;}</code></pre><hr><blockquote><p>标签带类选择器</p></blockquote><pre><code class="language-css">p.center {text-align:center;}</code></pre><hr><blockquote><p>多类选择器</p></blockquote><pre><code class="language-css">.center.small {font-size:20px;}</code></pre><h4 id="什么时候用id-什么时候用类">什么时候用ID，什么时候用类</h4><ul><li>ID表示的是页面中的一个唯一的HTML元素，利用唯一ID，可以方便地定位到一个元素以及它的子元素。<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></li><li>类的目的是为了标识一组具有相同特征的元素，类可以让不同标签名的元素应用相同的样式。</li></ul><h3 id="属性选择器">属性选择器</h3><blockquote><p>语法 E[foo]  <em>an E element with a foo attribute <em></em></em></p></blockquote><pre><code class="language-css"> &lt;lable&gt; &lt;input type=&quot;text&quot; disabled /&gt; &lt;/lable&gt; input[disabled]{cursor : not-allowed;}</code></pre><ul><li>选中属性值为disabled的文本框，鼠标滑过时添加禁用样式</li></ul><blockquote><p>语法 E[foo^=“bar”] <em>an E element whose foo attribute value begins exactly with the string “bar”<em></em></em></p></blockquote><pre><code class="language-css">a[href^=&quot;#&quot;] {  background-color: blue;}&lt;a href=&quot;#&quot; &gt;top&lt;/a&gt;&lt;a href=&quot;#test&quot; &gt;test&lt;/a&gt;</code></pre><ul><li>选中属性值以#号开头的a元素，为其添加背景为蓝色的样式</li></ul><p><a href="https://www.w3.org/TR/selectors4/" target="_blank" rel="noopener">更多语法</a></p><hr><h3 id="上下文选择器">上下文选择器</h3><ol><li>e1 e2</li><li>e1 &gt; e2  子选择器</li><li>e1 + e2  紧邻同胞选择器 <em>e2必须紧跟在e1后<e m></e></em></li><li>e1 ~ e2  一般同胞选择器</li><li><code>*</code> 通用选择器 <strong>可以用它构成非子选择器</strong></li></ol><h3 id="伪类选择器">伪类选择器</h3><h4 id="结构化伪类选择器">结构化伪类选择器</h4><ol><li>e:first-child e:last-child</li></ol><pre><code class="language-html">&lt;ol  class=&quot;results&quot;&gt;   &lt;li&gt; chird1 &lt;/li&gt;   &lt;li&gt; child2 &lt;/li&gt;   &lt;li&gt; child3 &lt;/li&gt;&lt;/ol&gt; </code></pre><pre><code class="language-html">ol.results li:first-child{color: blue;}</code></pre><ul><li>选中child1,为其添加字体为蓝色样式</li></ul><pre><code class="language-css">ol.results li:last-child{color: red;} </code></pre><ul><li>选中child3,为其添加字体为红色样式</li></ul><ol start="2"><li>e:nth-child(n)</li></ol><pre><code class="language-html">&lt;tr&gt;  &lt;td&gt;一班&lt;/td&gt;  &lt;td&gt;30&lt;/td&gt;  &lt;td&gt;89&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;  &lt;td&gt;二班&lt;/td&gt;  &lt;td&gt;35&lt;/td&gt;  &lt;td&gt;85&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;  &lt;td&gt;三班&lt;/td&gt;  &lt;td&gt;32&lt;/td&gt;  &lt;td&gt;80&lt;/td&gt;&lt;/tr&gt; </code></pre><hr><pre><code class="language-css">table tbody tr:nth-child(2n+1){background-color: yellow;}</code></pre><ul><li>选中表格的奇数行，添加背景为黄色的样式，提高了表格的可读性</li></ul><h4 id="ui伪类选择器">UI伪类选择器</h4><ol><li>链接伪类</li></ol><ul><li>Link 等着用户点击</li><li>Visited 用户此前点击过这个链接</li><li>Hover 鼠标指针正悬停在链接上</li><li>Active 链接正在被点击（鼠标在元素上按下，还没有被释放）</li></ul><ol start="2"><li>:focus伪类</li></ol><ul><li>用户点击表单中的文本字段时会获得焦点</li></ul><ol start="3"><li>:target伪类</li></ol><pre><code class="language-css"> &lt;a href=&quot;#more_info&quot;&gt;更多&lt;/a&gt; &lt;h2 id=&quot;more_info&quot;&gt;指向这里&lt;/h2&gt; h2:target {background: yellow;}</code></pre><ul><li>点击链接时,位置跳转到h2，并为其添加背景为黄色的样式</li></ul><ol start="4"><li>:checked伪类</li></ol><ul><li>单选框或多选框被选中时，元素就会被选中</li></ul><h3 id="伪元素选择器">伪元素选择器</h3><ol><li>e::first-letter 选中e元素的第一个字母</li><li>e::first-line 选中e元素的第一行</li><li>e::before和::after 可以在e元素前面或后面添加特殊的内容</li></ol><pre><code class="language-css">&lt;p class=&quot;age&quot;&gt;22&lt;/p&gt;p.age::before{content:&quot;Age: &quot;;}P.age::after{content:&quot; years.&quot;;}</code></pre><ul><li>输出结果为 Age: 22 years.</li></ul><h2 id="继承">继承</h2><pre><code class="language-css">body{font-size:18px;}</code></pre><ul><li>全站的主字体大小只要在某个上层元素上指定即可，无需在每一个标签上分别指定。</li></ul><h2 id="层叠">层叠</h2><h3 id="样式来源">样式来源</h3><p>浏览器层叠各个来源样式的顺序</p><ul><li>浏览器默认样式表</li><li>用户样式表</li><li>链接样式表</li><li>嵌入样式</li><li>行内样式</li></ul><h3 id="层叠规则">层叠规则</h3><ol><li>ID&gt;Class&gt;Type</li><li>行内&gt;嵌入&gt;链接<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></li><li>设定的样式胜过继承的样式</li></ol><h3 id="计算特指度">计算特指度</h3><p>I-C-T</p><ul><li>选择符有一个ID，就在I的位置加1</li><li>选择符有一个类，就在C的位置加1</li><li>选择符有一个元素（标签）名，就在T位置加1</li></ul><blockquote><p>p <strong>0-0-1</strong>=1<br>p.largetext <strong>0-1-1</strong>=11<br>p#largetext <strong>1-0-1</strong>=101<br>body p#largetext <strong>1-0-2</strong>=102<br>body p#largetext ur.mylist <strong>1-1-3</strong>=113</p></blockquote><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>相同权值情况下 <a href="#fnref1" class="footnote-backref">↩</a></p></li><li id="fn2" class="footnote-item"><p>tips:  在页面的每个顶级区域添加一个ID，能得到明确的上下文，便于在编写CSS时只选择嵌套在相应区域内的标签 <a href="#fnref2" class="footnote-backref">↩</a></p></li><li id="fn3" class="footnote-item"><p>为同一个标签的同一个属性定义的样式 <a href="#fnref3" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ONE</title>
      <link href="/2017/09/15/one/"/>
      <url>/2017/09/15/one/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>真正的教育，从来不是点石成金、立地成佛的技巧，而是一段春风化雨、自然无为的过程。就像一棵树摇动另一棵树，一朵云推动另一朵云，一个灵魂唤醒另一个灵魂。它没有声响，它只是让走在前面的人，做好自己的事，走好自己的路，然后，任由改变自然发生。</li></ul></blockquote><hr><blockquote><ul><li>我能否这辈子重新来过？ 还会犯下不可原谅的同样错误吗？ 会的，只要有半点机会，会的。</li></ul></blockquote><hr><blockquote><ul><li>当我可以享受与你相对沉默，我就知道，你是那个对的人。</li></ul></blockquote><hr><blockquote><ul><li>肤浅的恋爱跟一部美剧、一台演唱会、一杯咖啡、一个电脑游戏具备同种功能，打发无聊和孤独，满足虚荣和欲望。唯独回避心灵深切的感受。</li></ul></blockquote><hr><blockquote><ul><li>也会去想，是不是找个男朋友会好一些。但对自己要求高了之后，对另一半的期许也会更高，自己也清楚，想找的他一定还在远方。现在能做的，只是像打磨器物一样，让时光把我打磨得更好。</li></ul></blockquote><hr><blockquote><ul><li>你要做一个不动声色的大人了。不准情绪化，不准偷偷想念，不准回头看。去过自己另外的生活</li></ul></blockquote><hr><blockquote><ul><li>见到她的那一刻，他便知道，一件无可挽回的事终于在自己的命运中发生了。</li></ul></blockquote><hr><blockquote><ul><li>本地人普通话讲得蹩脚，祥和强是分不清的。他们说，阿强好，阿强信得过，好像阿祥也是从前的产物一样，有一种不言自喻的优质感。</li></ul></blockquote><hr><blockquote><ul><li>好像“忙碌”、“急躁”才是这个时代每位年轻人身上最大的特质。大家都迫切地想要融入大时代，看起来每个人都有“很要紧”的事情要去完成，但其实“挤下来”的时间也不过被虚掷在了追捧网络热点，快速消费流行品上面。所谓的忙碌都是假相，从一个场景中迅速抽身也不过是奔赴下一场虚无，每个人都太急躁太混乱了。</li></ul></blockquote><hr><blockquote><ul><li>他们都有种人类共通的虚伪，刻意地隐藏自己的秘密和渴望，尽量让自己做一个体面的人。但他们的内核，都是不堪的，甚至懦弱的。</li></ul></blockquote><hr><blockquote><ul><li>像《彗星》结尾说的，世界上有很多个平行空间，每个空间里都有我们。有的空间里，我们在打闹，有的空间里，我们恨不得杀死对方，有的空间里，我们举杯相庆。也就是说，总存在一个空间里，我会有一个更好的版本，过着比现在更好的生活。</li></ul></blockquote><hr><blockquote><ul><li>松浦弥太郎在《今天也要用心过生活》里说，“我倾向于把坏了的东西继续使用，甚至觉得东西坏掉的那一刻才是你们的关系真正开始的时候，不要急于马上丢弃添购新品，而是下决心修好它。与人交往也是一样，经过冲撞、摩擦、破裂产生嫌隙，然后慢慢修复它，这才是你们深层次关系的真正开始。”</li></ul></blockquote><hr><blockquote><ul><li>马克对此万分歉疚，做爱时简直想把自己嵌进辛束身体里。</li></ul></blockquote><hr><blockquote><ul><li>所以没有什么不是可以重新开始的，即使成为灾难的废墟，祭奠和不被遗忘仍有它最大的价值。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人类简史</title>
      <link href="/2017/09/15/%E4%BA%BA%E7%B1%BB%E7%AE%80%E5%8F%B2/"/>
      <url>/2017/09/15/%E4%BA%BA%E7%B1%BB%E7%AE%80%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>中国人、印度人、穆斯林和西班牙人分属不同文化，在大部分事情上意见相左，但究竟为什么大家都同样相信黄金有价？为什么不是西班牙人相信黄金，穆斯林相信大麦，印度人相信贝壳，中国人相信丝绸？经济学家已经提出现成的答案。在贸易连接两个区域的时候，只要是能够运送的货品，就会受到供需力量的影响，让价格达到平衡。</li></ul></blockquote><hr><blockquote><ul><li>如果要在过去500年间挑出一个最重大、具代表性的一刻，一定就是1945年7月16日上午5点29分45秒。就在这一秒，美国科学家在新墨西哥的阿拉莫戈多引爆了第一颗原子弹。从这时开始，人类不仅有了改变历史进程的能力，更有了结束历史进程的能力。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 历史 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>围城</title>
      <link href="/2017/09/13/%E5%9B%B4%E5%9F%8E/"/>
      <url>/2017/09/13/%E5%9B%B4%E5%9F%8E/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>这一张文凭，彷佛有亚当、夏娃下身那片树叶的功用，可以遮羞包丑；小小一方纸能把一个人的空疏、寡陋、愚笨都掩盖起来。</li></ul></blockquote><hr><blockquote><ul><li>他仿美国人读音，维妙维肖，也许鼻音学得太过火了，不像美国人，而像伤风塞鼻子的中国人。他说「very well」二字，声音活像小洋狗在咕噜－－「vurry wul」。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础之HTML</title>
      <link href="/2017/09/11/html/"/>
      <url>/2017/09/11/html/</url>
      
        <content type="html"><![CDATA[<p>本来打算昨天对前几天学习的HTML基础内容，进行一下总结。但因为一些原因，还有执行力的问题，没有完成。今天的时间，暂且不去捣腾其他的事了。先把这篇总结完成。</p><h2 id="从标签开始">从标签开始</h2><blockquote><ul><li>标签 对自己所包含内容的一种描述。HTML标记内容是为了赋予网页语义<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>（semantic），也就是说让浏览器能理解网页内容。</li></ul></blockquote><p>如果把HTML比作一个房子的话，各种标签就像是房屋里的厨房，洗手间，卧室等等。它需要让客人（浏览器或者web爬虫等）知道它是什么。</p><h3 id="块级标签">块级标签</h3><ul><li>标题  <code>&lt;h1&gt;-&lt;h6&gt;</code></li><li>段落  <code>&lt;p&gt;</code></li><li>有序列表  <code>&lt;ol&gt;</code></li><li>无序列表  <code>&lt;ul&gt;</code></li><li>独立引用  <code>&lt;blockquote&gt;</code></li></ul><h3 id="行内标签">行内标签</h3><ul><li>链接 <code>&lt;a&gt;</code></li><li>图片<code>&lt;img&gt;</code></li><li>斜体<code>&lt;em&gt;</code></li><li>粗体<code>&lt;strog&gt;</code></li><li>简写<code>&lt;abbr&gt;</code></li><li>引证<code>&lt;cite&gt;</code></li><li>文本内引用<code>&lt;q&gt;</code></li></ul><h2 id="html文档结构">HTML文档结构</h2><p>了解完标签，“客人”进入房子后，就可以找到“洗手间”或是“卧室”了。但是我希望给客人更好的印象，所以我要提供房子的整体结构图。这样”客人“就能很方便的找到他们想找的东西。</p><p><img src="https://img.5bang.top/html_1.png" alt="Alt text"></p><p><code>&lt;html&gt;</code>标签是根级标签，<code>&lt;head&gt;</code>和<code>&lt;body&gt;</code>标签是它的两个直接子标签</p><h3 id="块级元素">块级元素</h3><p>相互堆叠在一起沿页面向下排列，每个元素分别占一行<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>。</p><h3 id="行内元素">行内元素</h3><p>相互并列，在空间不足以并列的情况下才沿下一行显示</p><h3 id="嵌套的元素">嵌套的元素</h3><blockquote><ul><li>在标记中嵌套的是HTML标签，在屏幕上嵌套的则是一个个盒子</li></ul></blockquote><p><strong>注意</strong>  <code>在一个包含很多元素的页面中，盒子套盒子会越套越深。因此合理的布局有助于通过标签看清页面结构，从而保证标签间正确的嵌套关系。</code></p><p><strong>tips</strong>  HTML标签的每个层次相对于上个层次缩进4个空格</p><h2 id="小结">小结</h2><ul><li>标签为内容提供结构，元素在屏幕上生成盒子</li><li>块级元素和行内元素的区别</li></ul><h2 id="还没结束">还没结束</h2><p>几个星期前Adobe正式宣布将在2020年前全部淘汰flash播放器插件，而且pc版的chrome在去年就已经不支持flash了。但是国内很多的视频网站上，格式依然为flash。</p><blockquote><ul><li>为什么国内大部分视频厂商不对PC开放HTML5?<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></li></ul></blockquote><h3 id="广告收入">广告收入</h3><ul><li>国内大部分视频网站的收入来自广告，HTML5更容易让用户绕过广告</li></ul><h3 id="技术">技术</h3><ul><li><strong>视频源存在兼容性问题。</strong> 原生的 HTML5 <code>&lt;video&gt;</code> 元素在 Windows PC 上仅支持 mp4 （H.264 编码）、webm、ogg 等格式视频的播放。而由于历史遗留问题（HTML5 视频标准最终被广泛支持以前，Flash 在 Web 视频播放方面有着统治地位），视频网站的视频源和转码设置，很多都高清源都是适用于 Flash 播放的 FLV 格式，只有少量低清晰度视频是 mp4 格式，webm 和 ogg 更是听都没听说过。比如优酷只有高清和标清才有 MP4 源，超清、1080P 等，基本都是 FLV 和 HLS（M3U8）的视频源（在 Windows PC 上支持 M3U8 比支持 FLV 更复杂，我们不做过多赘述）。</li><li><strong>HTML5 播放器容易被破解。</strong> 现在互联网环境下，资源盗版、盗链很常见。视频网站们也在花大力气防盗链。Flash 是插件，而且发展了这么多年，技术已经相当成熟，甚至可以做到在代码中直接插入编译好的 C 模块（FlasCC 技术，原称 Alchemy），很多视频网站（比如优酷和腾讯）的 Flash 播放器中都有破解难度相当大的 C 模块。如果换成 HTML5 播放，由于 JS 代码相当于开源的特性，破解者非常容易就可以下载、盗链播放视频、跳过广告。</li></ul><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>明白每个标签的用途（在什么情况下使用此标签合理） <a href="#fnref1" class="footnote-backref">↩</a></p></li><li id="fn2" class="footnote-item"><p>块级元素的父元素一般是body，body宽度默认与浏览器同宽。 <a href="#fnref2" class="footnote-backref">↩</a></p></li><li id="fn3" class="footnote-item"><p>答案整理自知乎 <a href="#fnref3" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>楼下的房客</title>
      <link href="/2017/09/11/%E6%A5%BC%E4%B8%8B%E7%9A%84%E6%88%BF%E5%AE%A2/"/>
      <url>/2017/09/11/%E6%A5%BC%E4%B8%8B%E7%9A%84%E6%88%BF%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>然而，颖如匀称修长的身段并不会使人充满邪念，而是令人想轻轻搂着、亲吻一整个下午的纯洁。</li></ul></blockquote><hr><blockquote><ul><li>罪的本身，就是一种专业，一种浪漫，一种迷人的憧憬。</li></ul></blockquote><hr><blockquote><ul><li>我笃信的人生守则不多，但第一条是：越没有话题的时候，越能看出一个人心底的样子。</li></ul></blockquote><hr><blockquote><ul><li>人们在对某一未知量的特殊价值进行评估之前，总会事先对这个量进行一番考量，此时锚定效应就会发生。</li></ul></blockquote><hr><blockquote><ul><li>二十一世纪的死大学生，大学录取率超过百分之一百二十的死大学生，哼，他们的心理素质真是弱的要命，就如同正在吐丝结茧的蚕宝宝，丝越吐越多，身体却越瘦越小。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中文传媒精选</title>
      <link href="/2017/09/11/%E4%B8%AD%E6%96%87%E4%BC%A0%E5%AA%92%E7%B2%BE%E9%80%89/"/>
      <url>/2017/09/11/%E4%B8%AD%E6%96%87%E4%BC%A0%E5%AA%92%E7%B2%BE%E9%80%89/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>阅读的乐趣就在于，它是一个广阔的世界，让你知道你的渺小，知道在历史长河中，或是站在全人类的角度看，很多东西是不必在意的，它让我们能变得更聪明一点。</li></ul></blockquote><hr><blockquote><ul><li>我几乎毫不费力就能想象出她生长的县城模样：嘈杂窄小的街道，三轮车、摩托车和小汽车拥挤在上面，街边的店面上，印着色彩鲜艳的硕大字体和明星头像，录音机大喇叭播放的廉价商品促销广告，如飞扬的尘土一样，飘荡在街道上空——这是从80年代开始的小城模样。但在这样俗艳又嘈杂的外表下，还包裹着一些新的时代内核：在充斥着教辅资料的新华书店里，可以买到各种欧美文学的作品。学校的图书馆里，还有最新的都市文学小说，村上的书也在其中，写着一个遥远的新世界：沙滩男孩的摇滚乐，Vans牌夹克，青春期坦白的性……</li></ul></blockquote><hr><blockquote><ul><li>一般都是去他办公室聊产品，但聊着聊着他就会说，最近发现几首特别好听的歌，来一起听听，结果一听就是一下午。他在办公室里抽着雪茄，我们跟着吸雾霾，几个男人都默不作声地听音乐，是一个很奇怪的画面。</li></ul></blockquote><hr><blockquote><ul><li>村上春树过着僧侣般严谨的生活。他一般在早晨4点钟起床，工作5至6个小时。下午的时候跑步10公里或者游泳1.5公里（或者两样都干），然后读一会儿书，听听音乐。晚上9点钟就寝。每天中午他在沙发上打个小盹，身体进入休息状态约半小时后会自然醒来。30年来，他将身体训练成一具非常精准的“时钟”。“我每天重复这种作息，从不改变。这种重复本身变得很重要，就像一种催眠术，我沉醉于自我，进入意识的更深处。不过，要把这种重复性的生活坚持很长时间——半年到一年，那就需要很强的意志力和体力了。从这个意义上讲，写大部头小说就像救生训练一样，体力和艺术敏感性同样重要。”他在接受《巴黎评论》记者的采访时这么说。</li></ul></blockquote><hr><blockquote><ul><li>正如现代媒介批判经典《娱乐至死》一书的作者尼尔·波兹曼所说，影像要求造成视觉冲击，要求有更多的画面。或者说，电视这种媒介的天然属性，本身就很难给人以完整的理性思考，只能是一种碎片化的，感官冲击强烈的叙事。</li></ul></blockquote><hr><blockquote><ul><li>由于众所周知的原因，过去人们只知道中朝两国唇齿相依，患难与共，在战争中培养起鲜血凝成的友谊，却不了解中朝高层之间也存在着重大的矛盾和分歧，而这些矛盾和分歧及其解决方式，与冷战在亚洲的格局有着密切关系。</li></ul></blockquote><hr><blockquote><ul><li>科学的中心思想就是，从两个看似相当矛盾的看法中找到不可或缺的平衡点，接纳新思维，不管它们是多么离奇古怪或者违背直觉，然后无情地怀疑、审视所有的想法，不论新旧。这就是在荒谬中找到真理的方法。</li></ul></blockquote><hr><blockquote><ul><li>莱特提出的命题是，人体的肠道菌群不只有助于消化，同时也是独立运作的器官，可能会引起腹泻，甚至是心理或精神疾病。</li></ul></blockquote><hr><blockquote><ul><li>朋友圈总是陷入到“羡慕别人”和“处心积虑让别人羡慕”的荒谬境地，发票圈和看票圈变得越来越无趣了。</li></ul></blockquote><hr><blockquote><ul><li>一个普通人想成为丘吉尔是不太可能的，但如果你对人与自然怀有好奇心，曾经发生在达尔文大脑中的想法，也可能会发生在你的脑子里，这个过程让人特别着迷。</li></ul></blockquote><hr><blockquote><ul><li>与恶龙缠斗过久，自身亦成为恶龙；凝视深渊过久，深渊将回以凝视。</li></ul></blockquote><hr><blockquote><ul><li>花五年的时间盯着计算机屏幕，研究人类的一些最奇怪、最黑暗的想法，可能不会让大多数人觉得是美好时光，但我发现，这些诚实的数据出乎意料地令人安慰。在不安全感、焦虑、挣扎和欲望方面，我从来都感到不那么孤独。</li></ul></blockquote><hr><blockquote><ul><li>科技的伟大有两个方向，一个是持续创新，引领人类文明向前，这是美国硅谷的基因；另一种是把领先的科技成熟化、低成本化、普及化，从而改变每一个人的生活，这是中国互联网的基因。</li></ul></blockquote><hr><blockquote><ul><li>抛弃汽车将让人们省下一笔钱。蔡斯表示，在欧洲，拥有一辆汽车的平均成本是每年6000欧元左右。如果你认为私家车将作为地位的象征继续存在，那么别忘记，马也曾经是地位的象征。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>狗耳朵日报</title>
      <link href="/2017/09/10/%E7%8B%97%E8%80%B3%E6%9C%B5%E6%97%A5%E6%8A%A5/"/>
      <url>/2017/09/10/%E7%8B%97%E8%80%B3%E6%9C%B5%E6%97%A5%E6%8A%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>我们大部分人都认为自己比一般人更加优秀：我们更有能力，更诚实可靠，更有激情并且更有天赋。而这种乐观的自我认知，在心理学会中也有一个专有名字，叫做“隐形斗篷错觉”（invisibility cloak illusion）。</li></ul></blockquote><hr><blockquote><ul><li>什么他们会有这样的想法？甚至部分人还将其视为时尚、潮流。除了人性天生的好逸恶劳外，消费资本主义大大刺激了这种不劳而获想法的盛行（所以不要嘚瑟，你所谓的时尚、特立独行，其实跟封建社会愚民的行径是一样的，都是在被社会思潮操纵而已)。</li></ul></blockquote><hr><blockquote><ul><li>你每天接受的信息是碎片化的，时间是碎片化的，认知是碎片化的，记忆就只有三天——不管是美国还是中国，不管是美国总统丑闻还是四川地震，再大的新闻事件发酵期也就是三天，随后就被杂七杂八的事冲散了。</li></ul></blockquote><hr><blockquote><ul><li>随着以深度学习为代表的人工智能技术走向主流，占据市场几十年的CPU可能被拉下王座；成本更低的FPGA、能够以更快速度处理数据的GPU、能够以更低精度进行计算的概率芯片和更多采用全新架构的专用处理器争夺市场的时代到来了。</li></ul></blockquote><hr><blockquote><ul><li>如果你真的什么都做不了，告诉你一个小技巧：想想那些你完全不想碰的事情。再做手边的事情就舒服多了。</li></ul></blockquote><hr><blockquote><ul><li>驱使这样的实业家推动世界进步的，通常不是名利，而是强烈的使命感和充满个人英雄主义色彩的梦想和野望，以及在极少数人身上可贵地伴随终生的好奇心。</li></ul></blockquote><hr><blockquote><ul><li>“Be not afraid of greatness: some men are bom great, some are achieve greatness and some have greatness thrust upon them.”</li></ul></blockquote><hr><blockquote><ul><li>犯错丢脸要趁早。该犯错的时候害怕犯错，只会在往后的岁月里犯更多错</li></ul></blockquote><hr><blockquote><ul><li>弱小和无知不是生存的障碍，傲慢才是。</li></ul></blockquote><hr><blockquote><ul><li>我一直认为最好的学习就是直接做，做砸了是学习，做好了是更好的学习。扎克伯格从来没有「学」过如何创建最大的社交网络，他直接把它做了出来。所谓的Learn by doing，在交办这件事情上，也是如此。</li></ul></blockquote><hr><blockquote><ul><li>我因为自己脆弱，所以很能同情别人的脆弱。而戏剧是检验人性的艺术，强的东西不太容易动人，你脆弱时，大家就会替你着急，帮你演戏，这时才是最动人的。</li></ul></blockquote><hr><blockquote><ul><li>我常跟演员说：「如果你表现得这么多，根本就不需要别人同情了。你的作用是让别人帮你着急，帮你演戏，因为你再怎么演，也没有观众的脑筋演得好。</li></ul></blockquote><hr><blockquote><ul><li>互联网未见得是孤独的解药，也许本身就创造了更大的孤独。热闹和孤独共生在同一个地盘上，在极致喧哗的舞台中央，站立着一个极致孤独的个体，为屏幕另一端的一个孤独个体唱歌。</li></ul></blockquote><hr><blockquote><ul><li>越低阶级的人越善于解读他人的情绪。他们在解读陌生人的表情和情绪上更加准确。——从这个意义上，低阶级的人实际上是对他人的痛苦更有共情力的。</li></ul></blockquote><hr><blockquote><ul><li>别急着抱怨才华得不到施展，当你还是个矮子的时候，指着天花板骂它太低，没啥意义。</li></ul></blockquote><hr><blockquote><ul><li>我觉得，每一家公司都有自己独特的使命。它是创始人培育的，但它最后会变成一个共同体，变成很多人梦想的共同体。就跟你的孩子一样，从小和你长在一起，但总有一天，它会变成一个独立的人。</li></ul></blockquote><hr><blockquote><ul><li>我们定义的创业者，不仅仅是指那些拥有一家公司的人，只要他是试图通过提升自己的认知，和更多的人达成协作，做一件前所未有的事，他在我们的眼里，就是一个创业者</li></ul></blockquote><hr><blockquote><ul><li>BAT用整个互联网从业人员大概500万这个人数当中的3%的劳动力，创造了这个行当近乎一半的产值。那就奇怪了，剩下的97%的人在干吗？我拿出纸来打了个草稿发现，97%的互联网人，他们平均一年产生的财富，还不到他们城市的平均水平。</li></ul></blockquote><hr><blockquote><ul><li>此外，几乎所有的量子物理学知识都是反日常经验的，它会让我们养成一种良好的科学思维精神——我们看到的一切事实，不一定是真的；我们所坚信的一切真理，不一定是对的。</li></ul></blockquote><hr><blockquote><ul><li>吾尝读《汉书》矣，盖数过而始尽之，如治道、人物、官制、兵法、财货之类，每一过专求一事。不待数过，而事事精窍矣</li></ul></blockquote><hr><blockquote><ul><li>焦点效应指的是，人们往往会把自己看做一切的中心，并且直觉地高估别人对我们的关注程度。</li></ul></blockquote><hr><blockquote><ul><li>尊敬每一个给我们帮助的人，向一切可以学习的人学习。有太多有师父的笨蛋，而天才常常特立独行。</li></ul></blockquote><hr><blockquote><ul><li>印象整饰是指一个人通过一定的方式影响别人形成对自己的印象的过程，由心理学家欧文 ·戈夫曼提出。戈夫曼认为，社会交往的一个重要方面就是我们有意或无意地尝试操纵和控制我们留给他人的印象，对于每一段社会交往而言，个体既是对自我的真实表达，同时又是为了对「观众」施加特定的影响。</li></ul></blockquote><hr><blockquote><ul><li>碎片化时间学习一些碎片化的东西，能否真正获得价值，这一点我是存疑的。</li></ul></blockquote><hr><blockquote><ul><li>倾听是一件很难的事。它需要你把自己的东西放下，才能真的听到对方怎么说。如果你固守着自己的东西，就不会有对新东西的好奇。</li></ul></blockquote><hr><blockquote><ul><li>他想起一些有关父亲的模糊记忆。同学拿到皮肤之后，他在“梦境之树”服务器建立了一个死亡骑士的角色，继续游戏。</li></ul></blockquote><hr><blockquote><ul><li>设计是在发现事物的本质规律，在既定的资源下，运用这些规律，去解决问题。</li></ul></blockquote><hr><blockquote><ul><li>控制欲增强，是因为爱情让我们暴露越来越多的软肋，不相信恋人会喜欢这个卑微的自己，需要用对方的包容和服从来确认自己值得被爱。</li></ul></blockquote><hr><blockquote><ul><li>如果能将我们的思维过程，用图像和清单表达出来，就能及时发现和修正bug，视觉化之后，也会更有条理和层次，更容易突破思维的边界。</li></ul></blockquote><hr><blockquote><ul><li>很多时候，我们所说的社会阶级上的固化和差异，并不仅仅是财富上的差距，更多是每个人眼界和选择的不同。</li></ul></blockquote><hr><blockquote><ul><li>“我这辈子遇到的来自各行各业的聪明人，没有一个不每天阅读的——没有，一个都没有。而沃伦读书之多，可能会让你感到吃惊，他是一本长了两条腿的书”。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文摘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何阅读一本书</title>
      <link href="/2017/09/07/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/"/>
      <url>/2017/09/07/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>太多的资讯就如同太少的资讯一样，都是一种对理解力的阻碍。换句话说，现代的媒体正以压倒性的泛滥资讯阻碍了我们的理解力。</li></ul></blockquote><hr><blockquote><ul><li>在检视阅读中，要回答的问题是：第一，这是什么样的一本书？第二，整本书在谈的是什么？第三，作者是借着怎样的整体架构，来发展他的观点或陈述他对这个主题的理解？你应该做一下笔记，把这些问题的答案写下来。</li></ul></blockquote><hr><blockquote><ul><li>换句话说，你一定要学会忘掉那些分开的步骤，才能表现出整体的动作，而每一个单一的步骤都还要确实表现得很好。但是，为了要忘掉这些单一的动作，一开始你必须先分别学会每一个单一的动作。只有这样，你才能将所有的动作连结起来，变成一个优秀的滑雪高手。</li></ul></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 如何读书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>追忆似水年华</title>
      <link href="/2017/09/07/%E8%BF%BD%E5%BF%86%E4%BC%BC%E6%B0%B4%E5%B9%B4%E5%8D%8E/"/>
      <url>/2017/09/07/%E8%BF%BD%E5%BF%86%E4%BC%BC%E6%B0%B4%E5%B9%B4%E5%8D%8E/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>我们的往事也一样。我们每每竭力回顾往事，总是枉然，即便使出全部智力也徒劳无益。往事不在智力的范围内，也非智力所及，而隐藏在某个我们猜想不到的物件之中，隐藏在这类物件赋予我们的感觉之中。这个物件，我们在死亡以前碰得到或碰不到全凭偶然了。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>是个晴天</title>
      <link href="/2017/09/06/daily_03/"/>
      <url>/2017/09/06/daily_03/</url>
      
        <content type="html"><![CDATA[<p><strong>今天早上  天气 <code>晴</code>  心情<code>不错</code></strong></p><p><img src="https://img.5bang.top/doodle.jpg" alt="Alt text"></p><hr><p>将近两个星期的阴雨连绵，今早终于放晴了。走在路上，地上的小虫子，来来回回，蹿个不停。路两旁的树叶，经过雨水的冲洗，在阳光下，也显得分外明绿。微风习习，我的脚步格外轻快。</p><p>其实，今天起的并不算早。因为昨晚在看国足的最后一场世界杯预选赛。我知道，只有出现奇迹，国足才有可能进入世界杯。但有的时候就是这样，明明知道奇迹不可能会发生，还是宁愿选择去相信。</p><p>结果不出意料，尽管国足2-1赢了卡塔尔，但由于其他场次的原因。中国没有拿到小组第三，也就结束了2018年俄罗斯世界杯的全部征程。我知道很多人对于国足存有偏见，觉得他们糟糕透了。的确，这些年国足的表现不尽如人意。但对于我而言，他就像是一个混的不济的亲人。就算他劣迹斑斑，不思进取。还是会去关注他，支持他。尽管有的时候，真的想大骂他两句。</p><p>从大一下学期爱上足球开始，我就一直在关注中国队。不得不说，西安的确是个足球氛围很好的地方。其实这两年国足还是取得了一些进步，尤其是里皮来了之后，球队风貌改观了不少。也取得了不错的成绩。</p><p>这个四年已经过去了，期待下一个四年的到来。这个四年我从河南来到了西安，从高中来到了大学，从迷茫来到了坚定。下一个四年，我不知道我会在哪里。但是 <code>Wherever I go,there you are.</code></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思考快与慢</title>
      <link href="/2017/09/06/%E6%80%9D%E8%80%83%E5%BF%AB%E4%B8%8E%E6%85%A2/"/>
      <url>/2017/09/06/%E6%80%9D%E8%80%83%E5%BF%AB%E4%B8%8E%E6%85%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>人们把相似度当成一种简单的启发手段（简单地说就是经验法则）来作艰难的判断。对这种启发性手段的依赖必然会造成其预测带有成见（系统性失误）。</li></ul></blockquote><hr><blockquote><ul><li>人们是根据从记忆中提取信息的容易程度来估测事情的重要程度的，而这往往也与媒体报道的广泛程度有关。常被提到的话题就在脑中变得鲜活，而其他的则会慢慢被遗忘。</li></ul></blockquote><hr><blockquote><ul><li>快思考既包括直觉思维的不同形式，比如专家式的和启发式的，也包括感觉和记忆等所有无意识的大脑活动，这些活动会让你知道桌上有盏台灯或者想起俄罗斯首都的名字来。</li></ul></blockquote><hr><blockquote><ul><li>人们在对某一未知量的特殊价值进行评估之前，总会事先对这个量进行一番考量，此时锚定效应就会发生。</li></ul></blockquote><hr><blockquote><ul><li>人类大脑的常规局限使它没有足够的能力重构过去的知识结构或信念。一旦接受了一种新的世界观（或对世界某一方面的看法发生了变化），你就会立即丧失很大一部分回忆能力，无法回想起自己观点改变之前的那些想法了。</li></ul></blockquote><hr><blockquote><ul><li>『事前验尸』：当一个机构即将做出一个重要决策但还没有下达决议时，科莱恩提议召集所有对这个决策有所了解的人开一次简短的会议。在会议之前有个简短的演说：『设想一下我们在一年后的今天已经实施了这个计划，但结果惨败。请用5~10分钟的时间写下惨败的缘由。』</li></ul></blockquote><hr><blockquote><ul><li>事前验尸的主要优点在于它引发了怀疑。另外，它还助长了支持该决策的人去探寻他们事前没有考虑到但可能存在的威胁。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心理学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>被讨厌的勇气</title>
      <link href="/2017/09/05/%E8%A2%AB%E8%AE%A8%E5%8E%8C%E7%9A%84%E5%8B%87%E6%B0%94/"/>
      <url>/2017/09/05/%E8%A2%AB%E8%AE%A8%E5%8E%8C%E7%9A%84%E5%8B%87%E6%B0%94/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>任何经历本身并不是成功或者失败的原因。我们并非因为自身经历中的刺激——所谓的心理创伤——而痛苦，事实上我们会从经历中发现符合自己目的的因素。决定我们自身的不是过去的经历，而是我们自己赋予经历的意义。”</li></ul></blockquote><hr><blockquote><ul><li>阿德勒心理学就是勇气心理学。你之所以不幸并不是因为过去或者环境，更不是因为能力不足，你只不过是缺乏“勇气”，可以说是缺乏“获得幸福的勇气”。</li></ul></blockquote><hr><blockquote><ul><li>之所以感觉孤独并不是因为只有你自己一个人，感觉自己被周围的他人、社会和共同体所疏远才会孤独。我们要想体会孤独也需要有他人的存在。也就是说，人只有在社会关系中才会成为“个人”。</li></ul></blockquote><hr><blockquote><ul><li>你由于太惧怕人际关系所以才会变得讨厌自己，你是在通过自我厌弃来逃避人际关系。</li></ul></blockquote><hr><blockquote><ul><li>如果真正地拥有自信，就不会自大。正因为有强烈的自卑感才会骄傲自大，那其实是想要故意炫耀自己很优秀。担心如果不那么做的话，就会得不到周围的认可。这完全是一种优越情结。</li></ul></blockquote><hr><blockquote><ul><li>它是陀思妥耶夫斯基的小说屮出现的一句话。“被铸造的自由”这种说法是何等的痛快啊！我认为这是一句非常精辟的话，它一语道破了货币的本质。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心理学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>少年巴比伦</title>
      <link href="/2017/09/05/%E5%B0%91%E5%B9%B4%E5%B7%B4%E6%AF%94%E4%BC%A6/"/>
      <url>/2017/09/05/%E5%B0%91%E5%B9%B4%E5%B7%B4%E6%AF%94%E4%BC%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>假如我一生中所经历的场景都可以倒放，以慢镜头的形式一遍遍重新来过，那么，医务室的那一幕肯定是排名前五位的经典镜头。</li></ul></blockquote><hr><blockquote><ul><li>嫉妒具有一种层次感，就是说，你只能去嫉妒那些和你差不多的人。</li></ul></blockquote><hr><blockquote><ul><li>这种记忆由于它本身就近似一个梦，于是它常常出现在我的梦里，被我反复磨洗，成为一个蹭亮的硬块。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青春 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pie模型</title>
      <link href="/2017/09/04/pie/"/>
      <url>/2017/09/04/pie/</url>
      
        <content type="html"><![CDATA[<h2 id="bug">bug</h2><ul><li><strong>fault</strong>: a <strong><em>static</em></strong> defect in the software 静态存在软件的缺陷</li><li><strong>error</strong>: an incorrect <strong><em>internal</em></strong> state that is the manifestation of some faults 运行到fault，触发了一个错误的中间状态</li><li><strong>failure</strong>:   <strong><em>external</em></strong>  失效，一直传播到软件外面使测试人员和用户可以观测到失效的行为</li></ul><h2 id="pie-model">pie model</h2><ul><li>执行必须通过错误的代码</li><li>触发错误的中间状态</li><li>失效行为</li></ul><blockquote><p>思考：有没有一种fault任何测试用例都无法检测出来，这种fault还称为fault吗？</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个人的电影</title>
      <link href="/2017/09/04/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E7%94%B5%E5%BD%B1/"/>
      <url>/2017/09/04/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E7%94%B5%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>“很多人说我重复自己，这话是不错的。时间其实就是重复，我就是在不断地重复自己，不单是重复某一部电影，而且重复自己所有的电影。我把那些人物放在不同影片的背景下，看看他们到底会怎样。”</li></ul></blockquote><hr><blockquote><ul><li>不知道什么时候开始，我变成一个很小心的人，每次我穿雨衣的时候，我都会戴太阳眼镜。你永远都不会知道什么时候会下雨，什么时候出太阳。”</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 王家卫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九月四日</title>
      <link href="/2017/09/04/daily_02/"/>
      <url>/2017/09/04/daily_02/</url>
      
        <content type="html"><![CDATA[<h2 id="前面">前面</h2><p>今天是新生开学的日子，看到了不少的小学弟和小学妹。不知不觉中，自己已经大四了。想想，都挺可怕的。不过，疑惑的是为什么有些小学弟看起来比我都老呢。哈哈，这还是挺让我宽慰的。<br>言归正传，大学的三年多里，还是挺有收获的。但大部分都不是在课堂上和老师那里。不过，还是有个别的老师非常有魅力。近代史的老师绝对算一个。这让我想起了一句话，<strong>学习任何东西，实际上都在学习它的历史。</strong><br>马上就要面临工作了，自己尽管平时也在捣鼓一些东西。但总是有些太杂，并不是十分精通某一方面。为了以后工作的舒心（少被别人骂），还是要系统专注地学习一些东西。</p><h2 id="为什么是前端">为什么是前端</h2><p>首先，我感兴趣的领域在web前端，web安全和软件测试。这些都是成为一名优秀的前端工程师所必不可少的。<br>其二，我本身是个比较懒的人。JavaScript有非常多强大的框架（在我敲下这个字的时候，可能就有一个框架出现），这会让解决问题变得很有效率。而且这个领域的迭代更新非常快，它会让我保持新鲜感，因为总有很多的知识需要我去了解。<br>还有，我能在知乎，GitHub,还有一些社区上接触到一些母牛不下崽（牛逼坏了。。。）的人，看他们的回答和项目源码，会收获很多。<br>最后，当然是<strong>最不重要</strong>的因素，那就是—前端领域的程序媛是很多的。。</p><h2 id="接下来要做的">接下来要做的</h2><p>还是要先从基础的知识开始，基础知识是最重要的，但往往也是最容易忽略的。我之前太不注重基础的学习，接下来的一段时间，要重新再学一遍HTML，CSS和JavaScript的基本语法。还有基本的布局方式，DOM操作和算法。<br>不要再纠结去哪学习这些东西了，就去知乎上jason同学推荐的<a href="http://www.imooc.com/learn/9" target="_blank" rel="noopener">慕课网</a>吧</p><h2 id="利用好blog">利用好Blog</h2><p>很多东西我看了一些视频或者书，我以为我懂了，可实际上并不是。而且，反复地用一种方式学习，效率总是很低。<br>博客是一种很好的学习方式，写作的过程，是再次思考的过程。接下来的一段时间，在每学完一部分知识后，我会写一篇博客来重新梳理。</p><h2 id="后面">后面</h2><p>希望我能坚持写博客，就像坚持跑步一样，这样每天会过的充实点。<br>写完这篇文章，也到了要睡觉的时候了。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提问的智慧</title>
      <link href="/2017/09/04/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7/"/>
      <url>/2017/09/04/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>我们不想掩饰对这样一些人的蔑视–他们不愿思考，或者在发问前不去完成他们应该做的事。这种人只会谋杀时间–他们只愿索取，从不付出，无端消耗我们的时间，而我们本可以把时间用在更有趣的问题或者更值得回答的人身上。 我们称这样的人为“失败者”（由于历史原因，我们有时把它拼作“lusers”）。</li></ul></blockquote><hr><blockquote><ul><li>黑客们总是善于分辨哪些问题应该由你自己解决；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由你来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。</li></ul></blockquote><hr><blockquote><ul><li>当你提出问题的时候，首先要说明在此之前你干了些什么；这将有助于树立你的形象：你不是一个妄图不劳而获的乞讨者，不愿浪费别人的时间。如果提问者能从答案中学到东西，我们更乐于回答他的问题。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人间词话</title>
      <link href="/2017/09/03/%E4%BA%BA%E9%97%B4%E8%AF%8D%E8%AF%9D/"/>
      <url>/2017/09/03/%E4%BA%BA%E9%97%B4%E8%AF%8D%E8%AF%9D/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>诗人对宇宙人生，须入乎其内，又须出乎其外。入乎其内，故能写之。出乎其外，故能观之。入乎其内，故有生气。出乎其外，故有高致。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随便写写</title>
      <link href="/2017/09/02/daily_01/"/>
      <url>/2017/09/02/daily_01/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面">写在前面</h2><p>有好几天没有跑步了，因为天气的原因（好吧，我承认这只是借口），可总归要找些有意思的事来做。我经常在闲暇的时候，翻翻一些别人的博客，那里可是大神经常出没的地方。<br>前两天我在网上搜一个问题，进入了一个博客，我非常喜欢这个博客的风格，简洁优雅。忽然之间我也想搭建一个这样的博客，我可以放一些学习和读书的笔记在上面，没事的时候也可以写写随笔之类的。<br>因为之前用过GitHub,也懂一些markdown的语法。上手起来并不是太难，不过还是遇到了非常多的问题。好在google都能够帮我解决。<br>花了两天多的时间，大致搭建好了这个博客，也将之前在kindle上标注的笔记移植到了这里。以后，我会一直更新和维护这个博客，不过更新的频率，全看心情了。<br>关于如何用Hexo+GitHub搭建博客，网上的教程实在是太多了。这里我就不再赘述了，就说一些值得注意的问题吧。</p><h2 id="不要用cmd来安装hexo">不要用<strong>cmd</strong>来安装Hexo</h2><p>下载并安装完成node.js后（官网下载速度极慢，推荐去中文网 <a href="http://nodejs.cn" target="_blank" rel="noopener">node.js</a>)，我们要来安装hexo，有些教程是让用cmd来安装hexo，但是<strong>never do that。<strong>因为会遇到鬼都不知道的问题,最好一开始就用</strong>Git</strong>来安装。</p><h2 id="cname文件不要有txt的后缀名">CNAME文件不要有txt的后缀名</h2><p>大致完成站点配置文件的部署后，我们可能会用自己的域名来替代长长的 GitHub Page。通过自己的域名来访问自己的博客，那可是件很cool的事。所以接下来需要做的事</p><blockquote><ul><li>通过GitHub绑定域名</li><li>添加解析</li><li>在source目录下新建CNAME文件</li></ul></blockquote><p>正常情况下，前两步都不会有什么问题，关键是第三步。在windows环境下，新建的文本文档会隐藏.txt的后缀名。我尝试过用记事本保存格式为<strong>所有文件</strong>，但是仍然会有.txt的后缀。后来，我用notepad++才解决这个问题。</p><h2 id="注意分类及标签格式">注意分类及标签格式</h2><p><strong>分类界面</strong><br>在source/路径下新建名为&quot;categories&quot;的文件夹，包含index.md文件，内容为</p><pre><code class="language-bash"> title: 分类 date:   type: &quot;categories&quot;</code></pre><p><strong>标签界面</strong> 同理</p><pre><code class="language-bash"> title: 标签 date:  type:  &quot;tags&quot;</code></pre><h2 id="其他">其他</h2><ul><li>推荐使用Next主题，<a href="http://theme-next.iissnan.com" target="_blank" rel="noopener">官方文档</a>清晰明了，上手比较容易</li><li>设置个人头像时注意尺寸，推荐 215*215 pix</li><li>解析域名时，GitHub Page会有一段时间登不上，过一会就好了</li><li>站点配置文件以及分类和标签下的index.md文件输入中文后，需要保存编码为<strong>UTF-8</strong>,否则会出现乱码</li><li>做出更改后如果一些设置没有更新，记得在Git中执行 <strong>hexo clean</strong></li></ul><h2 id="写在后面">写在后面</h2><p>如果自己动手后就会发现，采用Hexo框架开发个人博客，其实很简单。尽管Hexo基于node.js,但事实上搭建博客的整个过程，并不需要你懂太多的JavaScript。仅仅需要一些计算机的基础知识就够了。不过如果你想要更加个性化定制博客或者开发自己的主题，还是需要去了解JavaScript还有它的第三方库。<br>整个搭建过程虽然简单，但也会遇到各种各样的问题。一定要善于利用google或者百度，永远记住一句话：<strong>世界上没有问题是google一下解决不了的，如果有那就google两下。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
