<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Week in Aug 20, 2023</title>
      <link href="/2023/08/20/weekly_106/"/>
      <url>/2023/08/20/weekly_106/</url>
      
        <content type="html"><![CDATA[<h2 id="读书">读书</h2><p>这段时间主要看了，《把自己作为方法》、《置身事内》和《额尔古纳河右岸》这三本书。关于读书的方法也有一些感悟——「没有必要强迫自己在特定的时间内把一本书读完」。对于读书，随机阅读可能会比做任务的方式给我带来更大的收获。</p><p>这是我今天在读《置身事内》这本书时做的摘录，内容还挺有意思。</p><blockquote><p>很多语言（如英语）是有时态的，因此在讲到“过去”“现在”“未来”时，语法要改变，会让人产生一种“疏离感”，未来跟现在不是一回事，何必担心未来，活在当下就好。因此说这种语言的人储蓄率较低。很多语言（如汉语和德语）没有时态，“往日之我”“今日之我”“明日之我”绵延不断，因此人们储蓄率也较高。</p></blockquote><p>之前通常是在 kindle 上读书，但是导出笔记比较麻烦。现在我已经迁移到了微信读书，配合 obsidian 的<a href="https://github.com/zhaohongxuan/obsidian-weread-plugin" target="_blank" rel="noopener">这个插件</a>，导出笔记非常方便。并且微信读书也支持多端阅读。</p><h2 id="文章">文章</h2><ul><li><p><a href="https://unlock-protocol.com/blog/ethcc5-2022-ticketing" target="_blank" rel="noopener">Ticketing with Unlock Protocol at EthCC 2022</a></p></li><li><p><a href="https://lutaonan.com/blog/my-extension-sold-1k-yuan/" target="_blank" rel="noopener">开发一个浏览器插件在第三天卖出 1000 元</a></p></li></ul><p>这篇文章是关于 unlock 协议在 Ethcc 2022 的具体实践。</p><ol><li>如何设计 NFT 门票系统<br>1.1 考虑参会者不同的角色<br>1.2 如何快速验证门票的有效性</li><li>解决的问题<br>2.1 阻止机器人购买<br>2.2 不可转让的 NFT 门票，防止黄牛炒作<br>2.3 会场内门票验证，确保门票真实性</li></ol><h2 id="播客">播客</h2><ul><li><p><a href="https://www.xiaoyuzhoufm.com/episode/64dd55ea307ade09ca2af40d" target="_blank" rel="noopener">AI Agent 智能体 真相和未来</a></p></li><li><p><a href="https://open.spotify.com/episode/1vgCShroN2BP3aoLM5TRZ2?si=349fc507fe5742cf" target="_blank" rel="noopener">Chillchat</a></p></li><li><p><a href="https://www.xiaoyuzhoufm.com/episode/64d9e9fd80c9ec4c5f394813" target="_blank" rel="noopener">第五集|代码之外</a></p></li></ul><p>这期关于 AI 的播客讨论了很多我感兴趣的话题，例如「AI 在游戏方面的创新进展」、「软件的世界会被怎样的改变」以及「开源的 LLama 2 如何刺激大模型创新」等。</p><p>Chillchat 是一对中外异地情侣探讨如何学习中文的播客。话题都是一些生活日常，从逆向思维角度，对于我学习英文也是很有帮助的。比如在这个播客中，经常会给出一些中文词汇，让对方说出对应的英文。此时我也在思考应当如何使用英文来表达。</p><h2 id="音乐">音乐</h2><ul><li>《春游》—— 窦靖童</li></ul><p>这张专辑中有好几首歌我都非常喜欢，在反复地听。《河流》、《烟花》、《橘子汽水》都是充满想象力和灵气的歌曲。此外这张专辑也是窦靖童的第一张中文专辑，从这十首歌曲中可以看到她对独立音乐创作的态度和理解。玩音乐，做实验来创造出自己的独属风格。</p>]]></content>
      
      
      <categories>
          
          <category> weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>城市漫步——去江油走走停停</title>
      <link href="/2023/07/07/jiangyou/"/>
      <url>/2023/07/07/jiangyou/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>日复一日地重复生活，加上最近酷热的天气让我感觉有些疲倦。不由冒出「去一个人不多的地方待上几天」的想法。不必要去做详尽的旅行规划，只想在一座陌生的城市之中走走停停。</p><h2 id="出发">出发</h2><p>我用很快的时间便确定了城市漫步的目的地——四川江油。理由很简单：</p><ul><li>出行方便，适合短期旅行</li><li>气温尚可，不算特别炎热</li><li>有山有水，还有值得探索的文化与美食</li></ul><p>从西安出发前往江油，只有两个多小时的路程。自北向南列车穿过关中平原、秦岭山区，窗外是久违的大山大河。两小时的时长很短，短到我刚好可以听完一期完整的播客。</p><h2 id="人们">人们</h2><h3 id="江边早市摆摊的商贩">江边早市摆摊的商贩</h3><p>天微微亮，早市中此起彼伏的吆喝声便叫醒了还在沉睡之中的小城。我住的地方是一个依江而建的民宿，江风吹来阵阵吆喝声已然让我无法入睡，便索性起床逛逛江边早市。</p><p>出门抬眼就看见了市场，大部分商贩都是骑着电动三轮车来这里摆摊，卖的东西都是些日常的瓜果蔬菜。吆喝声被商贩们提前录好放在大喇叭中，在循环播放。我听见过很多地方的吆喝声，在西安的路边或是在我家乡的集市上。不同的是，这里的吆喝声更加地特别，内容好似经过一番设计。在四川方言的加成下，显得更加抑扬顿挫。</p><h3 id="实习的警校女生">实习的警校女生</h3><p>午睡之后，我来到了城区中唯一的一家星巴克。坐在我对面的是两个戴着口罩的女生，她们正在用普通话交流。显得与周围格格不入。我主动和她们攀谈起来，原来她们是来当地实习的大学生。</p><p>我很好奇这座小城市会提供怎样的实习的岗位，于是便问起了她们的专业。出乎意料，眼前这两个文弱的女生竟然就读于一所警校。和大部分面临毕业而感到迷茫的大学生相比，她们的未来将更加确定。</p><h3 id="自驾游的情侣">自驾游的情侣</h3><p>从城区打车前往二十公里之外的「中华洞天」，远离烈日之下的城市，在溶洞中漫步是再好不过的选择。途中与司机闲聊，他告诉我江油正在大力发展旅游业。交通便利则是先天优势，一座只有几十万人口的地级市，却坐拥三个高铁站。言语间我感受到他对于这座城市未来的希冀。</p><p>洞口把外面的世界和里面的洞天分割成两个不同的季节。一步之遥，仿佛便从炎炎夏日进入初秋。洞内的温度只有 20° 左右，地上湿漉漉的，感觉非常凉爽。走几步往里看，五彩斑斓的灯光打在形状各异的乳石上，更显奇幻迷离。</p><p>回去的途中又遇到了刚才漂流时同一条船上的两人，我询问他们是从哪里过来的——如果是回城区的话可以一起拼车。男生告诉我他们是从四川另外一个城市——阆中，开车两百多公里过来的。并说他们刚好要开车回去，顺路可以载我一程。短暂的二十分钟车程，我们聊了一些关于四川方言，以及周边有哪些值得去的地方。到了城区，当我下车准备给他转账时，他谢绝了我的车费，并鼓励我继续探索四川的美食与文化。</p><h3 id="咖啡店的老板">咖啡店的老板</h3><p>在巷子中闲逛，余光不经意间瞥向了左手旁半掩着的铁门。走近看了下招牌，原来是一家咖啡店。总共两层，一层的院子里种满了紫罗兰、睡莲还有一些我叫不出名字的植物。</p><p>楼道中贴满了各种各样的明信片，大致看了下内容都是「高考」、「恋爱」之类的主题，可能是老板找高中生写的（逃。其中一张明信片上留下了这样一句歌词——「十七岁的那年，吻过他的脸，就以为和他能永远」。</p><p>二层有两个精心装饰过的咖啡厅，旁边还有两个房间可以打麻将。我点了一杯拿铁，坐在靠近过道的位置。整个咖啡厅只有我和老板，还有一个店员。老板似乎看出我是从外地过来的，便主动问我来自哪里。接着，我们聊了一些关于这里的物价，以及消费力的话题。</p><h3 id="李白">李白</h3><p>这座城市之中到处都是李白留下的影子，诗仙大道、太白公园、李白纪念馆。遗憾的是，当我到达李白纪念馆时却看到门口的公告栏正写着「闭馆维护中」。</p><p>铩羽而归的途中，路过了太白公园。看到公园门口进进出出散步的老人，还有正在追逐玩耍的孩子们。我不由想起了李白的那句诗——「今人不见古时月，今月曾经照古人」。一代代的人们终将逝去，又有什么会是永恒呢？</p><h2 id="最后">最后</h2><p>写这篇文章的时候，我已经回到了西安，烈日依旧。最近再次阅读《把自己作为方法》这本书，我也在思考一个问题。如何找到日常生活的意义感，又不至于被只有意义而没有脚踏实地生活的虚无感所淹没。</p><p>一直想这个问题反而会让我陷入到问题本身，或许并没有什么标准答案。去行走，去阅读，去写作。把自己放在不同的环境下，看看会发生什么。。。</p>]]></content>
      
      
      <categories>
          
          <category> weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 趣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写给开发者看的 Prompt Engineering</title>
      <link href="/2023/06/20/prompt_for_developer/"/>
      <url>/2023/06/20/prompt_for_developer/</url>
      
        <content type="html"><![CDATA[<h2 id="开始之前">开始之前</h2><p>所谓 Prompt Engineering（提示工程），就是与 AI 进行有效沟通以<strong>实现预期效果</strong>的过程。至于为什么需要 PE 及其相关原理，并不是这篇文章的重点，感兴趣的同学可以看这篇文章<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。</p><p>本文想要介绍在提示工程中，一些对于开发者有用的技巧<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>，以及分析在开源项目中的具体应用。</p><h2 id="一些技巧">一些技巧</h2><h3 id="编写明确具体的说明">编写明确具体的说明</h3><h4 id="使用分隔符">使用分隔符</h4><p>分隔符可以是任何形式，例如：</p><pre><code class="language-js">'''text'''&quot;&quot;&quot;text&quot;&quot;&quot;&lt; text &gt;&lt;tag&gt;text&lt;/tag&gt;</code></pre><pre><code class="language-js">const text = `通过提供尽可能明确和具体的说明来表达你希望模型执行的任务。这将引导模型朝着预期的输出方向发展，并减少收到无关或不正确回复的可能性。不要混淆编写清晰提示和编写简短提示。在大多数情况下，较长的提示可以为模型提供更明确的上下文，从而产生更详细和更具相关性的输出结果。`const prompt = `将三个双引号括起来的文本总结为一句话。&quot;&quot;&quot;${text}&quot;&quot;&quot;`</code></pre><h4 id="结构化输出">结构化输出</h4><p>比如输出形式为 JSON 或 HTML</p><pre><code class="language-js">const prompt = `生成三本虚构类书籍的书名、作者和类型列表。 使用以下键以 JSON 格式提供：book_id、title、author、genre。`</code></pre><h4 id="检查条件是否满足">检查条件是否满足</h4><pre><code class="language-js">const text = `泡一杯茶很容易！首先，需要烧一些水。 在水烧开的时候，拿一个杯子并把一个茶包放进去。 然后把开水倒在茶包上。 让它浸泡一会儿，茶就可以泡好了。 几分钟后，取出茶包。如果你喜欢，还可以加一些糖或牛奶。 就这样！你可以享受泡好的茶水了。`const prompt = `如果文本包含一系列说明，请按以下格式重新编写这些说明：步骤1 - ...步骤2 - ......步骤N - ...如果文本不包含一系列说明，则仅写“未提供步骤”。&quot;&quot;&quot;${text}&quot;&quot;&quot;`</code></pre><h4 id="few-shot-提示">「Few-shot」 提示</h4><p>「Few-shot」提示<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>是指向 AI 模型提供有限数量的示例，从而引导模型更好地执行任务。这是一种常用于训练大语言模型（LLMs）的技术。</p><p>Few-shot prompting 的步骤如下：</p><ol><li><p>选择你想让模型生成响应的领域或主题。可以是一种文本类型、语言方式等。</p></li><li><p>为模型提供少量的示例（提示），以作为后续样例的条件。通常只需提供 2-5 个示例即可进行「few-shot」学习。</p></li><li><p>模型将分析提示中的模式、风格和结构。它将学习定义该领域响应的属性。</p></li><li><p>让模型在相同领域中生成新的响应。通过提示的条件化，它可以生成符合所需风格、结构等的响应。</p></li><li><p>评估响应并提供反馈以进一步改进模型。这可以是直接反馈给模型，也可以只是记录下一组提示生成的领域中需要改进的地方。</p></li></ol><h3 id="给模型时间-思考">给模型时间「思考」</h3><h4 id="指定完成任务所需的步骤">指定完成任务所需的步骤</h4><pre><code class="language-js">const text = `在一个美丽的村庄里，有一对兄妹杰克和吉尔。一天他们出发去从山顶的井中取水，当他们欢快地唱着歌爬山时，不幸降临了——杰克被石头绊倒了，滚下山坡，吉尔也跟着摔了下来。 虽然受了轻伤，万幸两人还是平安回家了。尽管发生了不幸，但他们的冒险精神却丝毫没有减弱，他们将继续探索大自然。`// 示例const prompt = `执行以下操作：1-请使用一句话概括给出的文本内容。2-将摘要翻译成法语。3-列出法语摘要中的每个名称。4-输出一个包含以下键的 json 对象：french_summary，num_names。请使用换行符给出答案。文本：&quot;&quot;&quot;${text}&quot;&quot;&quot;`</code></pre><h4 id="指示模型在决定之前先自行解决问题">指示模型在决定之前先自行解决问题</h4><pre><code class="language-js">const prompt = `你的任务是确定学生的解决方案是否正确。要解决问题，请执行以下操作：-首先，自己解决问题。-然后将你的解决方案与学生的解决方案进行比较，并评估学生的解决方案是否正确。在自己解决问题之前，请不要决定学生的解决方案是否正确。使用以下格式：问题：&quot;&quot;&quot;问题&quot;&quot;学生的解决方案：&quot;&quot;&quot;学生的解决方案&quot;&quot;&quot;实际解决方案：&quot;&quot;&quot;解决方案的步骤和您的解决方案在这里&quot;&quot;&quot;学生的解决方案是否与刚刚计算出的实际解决方案相同：&quot;&quot;是或否&quot;&quot;&quot;学生的成绩：&quot;&quot;&quot;正确或不正确&quot;&quot;&quot;问题：&quot;&quot;&quot;我正在建造一个太阳能电站，我需要帮助解决财务问题。-土地成本为每平方英尺100美元-我可以以每平方英尺250美元的价格购买太阳能电池板-我协商了一个维护合同，每年将花费固定的10万美元，以及额外的每平方英尺10美元请计算出第一年的总成本是多少。&quot;&quot;&quot;学生的解决方案：&quot;&quot;&quot;设x为安装面积（以平方英尺为单位）。成本：1.土地成本：100x2.太阳能电池板成本：250x3.维护成本：100,000+100x总成本：100x+250x+100,000+100x=450x+100,000&quot;&quot;&quot;实际解决方案：`</code></pre><h2 id="他山之石">他山之石</h2><h3 id="ai-code-translator">ai-code-translator</h3><p>这个项目<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>可以在不同的编程语言环境下转换代码。使用到了前面提到过的一些技巧，如使用分隔符来指示输入和输出的编程语言、提供「Few-shot」提示等。</p><pre><code class="language-js">const prompt = `You are an expert programmer in all programming languages. Translate the &quot;${inputLanguage}&quot; code to &quot;${outputLanguage}&quot; code. Do not include \`\`\`.        Example translating from JavaScript to Python:        JavaScript code:      for (let i = 0; i &lt; 10; i++) {        console.log(i);      }        Python code:      for i in range(10):        print(i)            ${inputLanguage} code:      ${inputCode}      ${outputLanguage} code (no \`\`\`):     `;`</code></pre><h3 id="gpt-engineer">gpt-engineer</h3><p>我们再来看一个更复杂的项目——基于描述来生成整个完整代码库，其中<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>使用了大量的 propmts。下面列举部分步骤，来分析该步骤中使用到的 prompt。</p><pre class="mermaid">flowchart TD    A[Clarify] -->|main prompt + clarify| B(Gen_spec)    B --> C[Respec]    C -->|generate unit tests| D[gen_unit_tests]    C -->E[gen_clarify_code]    C -->F[gen_code]</pre><pre><code class="language-js">const prompt_on_respec = `You are a pragmatic principal engineer at Google.You have been asked to review a specification for a new feature by a previous version of yourselfYou have been asked to give feedback on the following:- Is there anything that might not work the way intended by the instructions?- Is there anything in the specification missing for the program to work as expected?- Is there anything that can be simplified without significant drawback?You are asked to make educated assumptions for each unclear item.For each of these, communicate which assumptions you'll make when implementing the feature.Think step by step to make sure we don't miss anything.`</code></pre><pre><code class="language-js">const prompt_on_gen_code = `Please now remember the steps:Think step by step and reason yourself to the right decisions to make sure we get it right.First lay out the names of the core classes, functions, methods that will be necessary, As well as a quick comment on their purpose.Then you will output the content of each file including ALL code.Each file must strictly follow a markdown code block format, where the following tokens must be replaced such thatFILENAME is the lowercase file name including the file extension,LANG is the markup code block language for the code's language, and CODE is the code:FILENAMECODEPlease note that the code should be fully functional. No placeholders.You will start with the &quot;entrypoint&quot; file, then go to the ones that are imported by that file, and so on.Follow a language and framework appropriate best practice file naming convention.Make sure that files contain all imports, types etc. The code should be fully functional. Make sure that code in different files are compatible with each other.Before you finish, double check that all parts of the architecture is present in the files.`</code></pre><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://typefully.com/DanHollick/yA3ppZC" target="_blank" rel="noopener">How ChatGPT works: a deep dive</a> <a href="#fnref1" class="footnote-backref">↩</a></p></li><li id="fn2" class="footnote-item"><p>本文的主要示例来自 <a href="https://learn.deeplearning.ai/chatgpt-prompt-eng/" target="_blank" rel="noopener">deeplearning.ai</a> <a href="#fnref2" class="footnote-backref">↩</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://www.promptingguide.ai/techniques/fewshot" target="_blank" rel="noopener">Few-Shot Prompting</a> <a href="#fnref3" class="footnote-backref">↩</a></p></li><li id="fn4" class="footnote-item"><p><a href="https://github.com/mckaywrigley/ai-code-translator/tree/main" target="_blank" rel="noopener">ai-code-translator</a> <a href="#fnref4" class="footnote-backref">↩</a></p></li><li id="fn5" class="footnote-item"><p><a href="https://github.com/AntonOsika/gpt-engineer" target="_blank" rel="noopener">gpt-engineer</a> <a href="#fnref5" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次 wagmi 的升级过程</title>
      <link href="/2023/06/12/weekly_105/"/>
      <url>/2023/06/12/weekly_105/</url>
      
        <content type="html"><![CDATA[<p>最近 wagmi, viem, rainbowkit 陆续都有大的版本更新，是时候把之前项目中的相关依赖（wagmi v0.5.x 以及 ether.js）统一升级一次了。</p><h2 id="目标版本">目标版本</h2><ul><li><a href="https://github.com/wagmi-dev/wagmi/releases/tag/wagmi%401.2.0" target="_blank" rel="noopener">wagmi @1.2.0</a></li><li><a href="https://github.com/wagmi-dev/viem/releases/tag/viem%401.0.1" target="_blank" rel="noopener">viem @1.0.1</a></li><li><a href="https://github.com/rainbow-me/rainbowkit/releases/tag/%40rainbow-me%2Frainbowkit%401.0.1" target="_blank" rel="noopener">rainbowkit @1.0.1</a></li></ul><table><thead><tr><th style="text-align:center"><img src="https://img.5bang.top/202306132214556.png" alt="wagmi"></th></tr></thead><tbody><tr><td style="text-align:center"><em>wagmi v1.2.0</em></td></tr></tbody></table><h2 id="迁移过程">迁移过程</h2><p>wagmi 官方的<a href="https://wagmi.sh/react/migration-guide" target="_blank" rel="noopener">迁移文档</a>写的很棒，对我而言主要关注的是下面几个方面的变化：</p><ul><li>provider =&gt; publicClient()</li><li>signer =&gt; walletClient()</li><li>useProvider =&gt; usePublicClient()</li><li>useClient =&gt; useConfig()</li><li>BigNumber =&gt; BigInt</li></ul><p>当然还有一部分的工作是把之前的项目，从 ether.js 迁移到 viem。好在 viem 的<a href="https://viem.sh/docs/ethers-migration.html" target="_blank" rel="noopener">官方文档</a>已经给出了迁移示例。</p><p>总体来说，这次的 wagmi 升级过程并没有遇到什么坑，按照官方迁移文档进行基本上就 Ok 了。</p>]]></content>
      
      
      <categories>
          
          <category> weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Week in Jun 04, 2023</title>
      <link href="/2023/06/04/weekly_104/"/>
      <url>/2023/06/04/weekly_104/</url>
      
        <content type="html"><![CDATA[<p>阴雨天已经连绵了差不多两周的时间，这个夏天的雨季感觉比往年都要来的更早一些。上周末，本赛季的英超比赛也已经踢完了。曼城提前两轮便锁定了英超冠军，最后的收官之战早已悬念不再。</p><p>回顾一下本周做的一些事情：</p><h2 id="工具">工具</h2><ul><li><a href="https://app.databerry.ai/agents" target="_blank" rel="noopener">databerry</a></li><li><a href="https://gamma.app/" target="_blank" rel="noopener">gamma</a></li><li><a href="https://github.com/NotJoeMartinez/yt-fts" target="_blank" rel="noopener">yt-fts</a></li></ul><p>最近在考虑如何动手实现一个可以训练自定义数据的 Bot，原理就是使用 <strong>OpenAI</strong> 的 API，<strong>LangchainJS</strong> 以及<strong>向量数据库</strong>来完成。Databerry 是个无代码的平台支持使用自定义数据来实现 ChatGPT Agent，总体使用体验还不错。但是免费版的限制太多了，还没来得及深度体验，额度几乎已经用完了。</p><p>上一周还参加了一个黑客松比赛，终于做了一把「全栈」开发——前端 + 智能合约 + PPT + 视频几乎都是由我一个人完成。其中 PPT 部分使用了 gamma 来做辅助。节省了我很多的时间，只需要把项目中 README 作为大纲丢到 gamma 中，它就能帮我完成 PPT 大体的框架。而且还有许多超棒的样式可以选择，想要修改布局也很方便。</p><p>yt-fts 是一个可以全文搜索 Youtube 频道中字幕的命令行工具。原理就是使用 <code>yt-dlp</code> 先下载该频道下所有视频的 subtitles 然后将其存到 <code>sqlite</code> 数据库中进行全文检索。最新的版本还支持使用 <code>OpenAI embedings</code> 来语义检索。</p><h2 id="听的播客">听的播客</h2><ul><li><a href="https://www.xiaoyuzhoufm.com/episode/6475d2ec53a5e5ea147934aa" target="_blank" rel="noopener">代码之外第二期</a></li></ul><p>这期播客请来了尤雨溪作为嘉宾。确实没有想到尤大的歌能唱的这么好听😂，听完了这期播客，我还特意去听了几遍方大同的《春风吹》。这期并没有聊具体的技术。而是分享了自己在新加坡的生活以及如何做决策等等。印象比较深刻的对话是——当谈到 Vue 成功的原因时，他说「可能技术和他水平相当或是超过自己的人有很多，但是他的不同是更能了解用户的需求」。还有就是时机，那个时候<strong>前端工程化</strong>才刚刚起步。</p><h2 id="看的书">看的书</h2><ul><li>《额尔古纳河右岸》—— 迟子建</li></ul><p>这本书描绘了鄂温克族百年的沧桑和生存现状。鄂温克族人世代居住的土地上，有与他们日夜相伴的驯鹿、树木、河流、月亮和清风。作者的文笔非常优美，记得在高中时期就经常在文本理解中遇到她的作品。</p><p>目前我只读完了第一章节，更多的感受就放在接下来的文章中谈吧。</p>]]></content>
      
      
      <categories>
          
          <category> weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Account Abstraction 初探</title>
      <link href="/2023/05/23/account_abstraction/"/>
      <url>/2023/05/23/account_abstraction/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是账户抽象">什么是账户抽象</h2><p>在回答这个问题之前，我们先思考两个问题「以太坊有哪些账户类型」以及「为什么要提出账户抽象」。</p><h3 id="账户类型">账户类型</h3><ul><li>EOA(externally owned account)</li><li>CA(contract account)，不能<strong>主动发起交易</strong></li></ul><h3 id="为什么提出-账户抽象">为什么提出「账户抽象」</h3><p><img src="https://img.5bang.top/202305241150531.png" alt></p><p>从上面的 EOA 交易机制流程图中我们可以发现目前存在的一些问题：</p><ul><li>私钥管理 -&gt; <strong>单点失败风险</strong>（no you key, no you coin）</li><li>依赖于 ECDSA 签名 -&gt; <strong>无法对抗量子计算</strong></li><li>交易验证逻辑写在协议层 -&gt; <strong>糟糕的用户体验</strong></li></ul><p>纵观近几年的 EIP 提案，开发者们始终希望用户的账户具备<strong>图灵完备的能力</strong>。相关工作一直都在进行，终于 ERC-4337<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> 应运而生。业内也统一了「Account Abstraction」的说法。</p><p><img src="https://img.5bang.top/202305241606126.png" alt></p><p>这个方案不需要修改协议层，实现了把账户抽象的交易验证从协议层抽离出来，放在了应用层。但是虽然在应用层，它还是属于一个<strong>技术标准</strong>，新开发的智能合约钱包们应该遵循这个标准<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>。</p><p>重新回到一开始的问题——「什么是账户抽象」。回顾上述内容，我们大概已经明白了 EOA 交易机制目前存在的问题以及 ERC-4337 的交易流程。于是可以试着给「账户抽象」下个定义：</p><blockquote><p>账户抽象是一种使用可编程方式来验证交易有效性的技术方案</p></blockquote><h2 id="应用场景">应用场景</h2><ul><li>找回私钥</li><li>Gas 费代付，批量授权及交易</li><li>权限管理</li></ul><p>用户可以找回账户私钥，解决了「单点失败」的问题，开发者可以在 Web3 的世界中引入 Two-factor 验证来授权，私钥丢失了也可以使用邮箱找回。</p><p>用户可以获得更好的交易体验，不必再去理解什么是 Gas 的问题。Defi 场景下的先授权再交易步骤，也可以合并成一笔交易，更加地方便。</p><p>用户可以对账户进行权限管理，在一个公司或者 DAO 组织，管理者可以根据不同的用户角色设置不同的支出权限。</p><h2 id="相关产品">相关产品</h2><ul><li><a href="https://twitter.com/thirdweb/status/1658869752201375757" target="_blank" rel="noopener">thirdweb</a></li><li><a href="https://twitter.com/UniPassID" target="_blank" rel="noopener">unipass</a></li><li><a href="https://twitter.com/biconomy" target="_blank" rel="noopener">biconomy</a></li><li><a href="https://twitter.com/catgu_/status/1658693950461583360" target="_blank" rel="noopener">visa</a></li></ul><h2 id="一些思考">一些思考</h2><p>尽管已经看到有很多的产品加入了「AA」这个赛道，但它目前仍处于非常早期的阶段。我很喜欢 lixin 在这个播客<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>中的类比，「AA」之于「EOA」就如同「自动挡汽车」之于「手动挡汽车」。当自动挡汽车刚出现的时候，会充斥着费油和不安全的质疑声。</p><p>或许 ERC-4337 已经给账户抽象搭好了框架，但是谁也无法预测它的下一个产品形态——相关的标准仍在制定中。这条路上充满了未知，机会，也许是荆棘。不过这也正是它最迷人的地方不是吗？</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://eips.ethereum.org/EIPS/eip-4337" target="_blank" rel="noopener">EIP-4337</a> <a href="#fnref1" class="footnote-backref">↩</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://mp.weixin.qq.com/s/kSg2otMv7M--ANjbzTn5hA" target="_blank" rel="noopener">账户抽象将给web3带来怎样的生命力？</a> <a href="#fnref2" class="footnote-backref">↩</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://www.xiaoyuzhoufm.com/episode/64681e2de83d0982a0adce25?s=eyJ1IjogIjVlZTJkY2ZlZTBkNjY0YTQ3Nzk0MjQ2ZSJ9" target="_blank" rel="noopener">Ep.29: HODLong 后浪</a> <a href="#fnref3" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再谈输入 —— 《打造第二大脑》</title>
      <link href="/2023/05/19/think_input/"/>
      <url>/2023/05/19/think_input/</url>
      
        <content type="html"><![CDATA[<blockquote><p>『太多的资讯就如同太少的资讯一样，都是一种对理解力的阻碍。换句话说，现代的媒体正以压倒性的泛滥资讯阻碍了我们的理解力』</p></blockquote><h2 id="开始之前">开始之前</h2><p>很早就想写一篇关于自己如何做「信息管理」的文章了。前段时间看到 Twitter 上 Randy 的<a href="https://twitter.com/randyloop/status/1657206677509398528" target="_blank" rel="noopener">分享</a>以及读了《打造第二大脑》这本书。我也再次思考自己应该如何来做信息管理。</p><p>做好信息管理的目的。</p><ol><li>如何快速找到工作或生活中遇到难题的解决方法</li><li>如何产生更多有趣的想法</li></ol><h2 id="输入">输入</h2><p>目前我的信息输入方式主要是下面这几个：</p><h3 id="信息流">信息流</h3><ul><li>Twitter</li><li>GitHub</li><li>Youtube</li><li>即刻</li></ul><p>我在 Twitter 上关注了很多很棒的开发者，设计师，还有一些有趣产品的官推。从这些关注列表中可以看到他们最新的观点，又出现了哪些新的技术和产品。我把 Likes 当做收藏夹来使用，看到感兴趣的内容就会 like 一下。此外我还建了一些 Lists，这个功能算是一个分类吧，目前我建立的几个大类是 AI，FE，Web3。</p><p>GitHub 其实也有信息流 —— 「For you」，这个可能是很多人不太用到的。从这里可以看到关注的开发者都 star 了哪些 repo，此外它也会推荐一些最近比较流行的项目。我会把 star 的 repo 进行分类，你可以在<a href="https://github.com/occupy5?tab=stars" target="_blank" rel="noopener">这里</a>看到。</p><p>Youtube 上主要是浏览订阅的一些频道。内容其实就比较广泛了，技术，生活，娱乐都有。这个上面也时常能够发现高质量的内容，比如加州伯克利大学的 <a href="https://www.youtube.com/@blockchain-web3moocs635" target="_blank" rel="noopener">Web3 Mooc</a>，街头摄影师 <a href="https://www.youtube.com/@KaiManWong" target="_blank" rel="noopener">Kai W</a>，乒乓球博主 <a href="https://www.youtube.com/@AdamBobrow" target="_blank" rel="noopener">Adam</a> 等等。</p><p>即刻是一个很不错的中文社区，Web3 和 AI 的内容质量都还不错，也会有一些活跃的独立开发者和投资人。不过最新的科技资讯还是稍微滞后于 twitter。</p><p>信息流最主要的特点就是——<strong>算法推荐</strong>，但它是一把双刃剑，有的时候会带来惊喜，发现更多有意思的人。另一方面则是很容易产生『信息过载』，用户总是一遍又一遍的刷新 APP。</p><h3 id="rss">RSS</h3><p>RSS 订阅是我常用的另一种获取信息的方式。主要用来订阅一些技术博客，当然也有一些其他主题的订阅源。如设计相关的，<strong>Behance</strong>，<strong>Design-Milk</strong>。科技相关的，<strong>9to5Mac</strong>，<strong>The Verge</strong>。Web3 相关的，<strong>Weekly in Etherum</strong>，<strong>Foresight news</strong> 等。</p><p>RSS 和信息流相比，我认为优势在于文章的质量会更高一些 —— 因为订阅源是经过自己筛选之后才放到阅读器中的。我会定期刷新阅读器，来获取这些高质量的信息输入。</p><h3 id="看书和听播客">看书和听播客</h3><p>如果想要更加系统的学习一门知识，我认为看书还是最好的学习方式。当然阅读完一本专业书是一件很困难的事情。因为大部分的情况下，Google（或许现在可以直接问 ChatGPT）或看文档就能解决问题。很少有人会再去花费大量的时间搞懂问题的来龙去脉。</p><p>播客的优势在于，获取到的是第一手的信息。比如我想了解 Sam 对未来 AI 发展的一些观点，去听相关的播客会比看相关媒体总结的文章可信度更高。</p><h2 id="code-方法">CODE 方法</h2><p>CODE 方法是《打造第二大脑》这本书中的的核心内容。下面谈谈我自己的一些实践。</p><table><thead><tr><th style="text-align:center"><img src="https://img.5bang.top/202305311259257.png" alt="CODE"></th></tr></thead><tbody><tr><td style="text-align:center"><em>CODE 方法</em></td></tr></tbody></table><ul><li>C(Capture) -&gt; 获取能引发共鸣的信息</li><li>O(Organize) -&gt; 组织分类</li><li>D(Distill) -&gt; 标注精髓部分</li><li>E(Express) -&gt; 展示成果</li></ul><p>对于「Capture」部分，主要就是上面提到过的几种方式，还有就是我会使用 <strong>Web Clipper</strong> 这个插件剪切网页文章到语雀知识库。然后在语雀知识库中进行「Organize」—— 通过<strong>文件夹分类</strong>的方式。再者就是在 Obsidian 上对<strong>写摘要</strong>完成「Distill」，最后就是写博客，发推特，发即刻来展示成果。</p><p>完成这些步骤就走完了 CODE 方法完整的一套流程。当然在具体实践中要根据自己的情况做调整，每个人使用的工具也都不尽相同。对于我来讲，D 和 E 做的还不够，也即是「输出」这个部分。</p><h2 id="想法">想法</h2><p>做好信息管理，在学习新的技术或是解决不曾遇到过的问题时，不必要从零开始，而是建立在已有的知识库上。接下来，大语言模型加上个人知识库可能会让打造第二大脑的过程更加简单。但是无论方式如何，我们最应该关注的还是「看到过的信息，以后会去向哪里」。我想用之前看到过的关于 TypeScript 的一句话作为结尾。</p><blockquote><p>As you write TypeScript, you need to think about where you want your contracts to be, and what needs to be done in order to meet them.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 Web Components 现状</title>
      <link href="/2023/04/21/2023_state_of_web_component/"/>
      <url>/2023/04/21/2023_state_of_web_component/</url>
      
        <content type="html"><![CDATA[<p>最近，我写了一篇关于<a href="https://medium.com/@eisenbergeffect/hello-web-components-795ed1bd108e" target="_blank" rel="noopener">如何构建你的第一个 Web 组件</a>的文章，以及一些关于<a href="https://medium.com/@eisenbergeffect/about-web-components-7b2a3ed67a78" target="_blank" rel="noopener">基本的 v1 Web 组件规范的历史和解释</a>。但自 2020 年 v1 获得完全支持以来，Web Components 的世界发生了更多的变化。未来还有更多的计划。让我们看一些使用当前标准构建的值得关注的例子，以及调查一些将在 2023 年及以后推出的新的 Web Components 标准工作<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。</p><h2 id="web-components-应用实例">Web Components 应用实例</h2><p>随着所有浏览器都支持 v1 Web Components，<a href="https://arewebcomponentsathingyet.com/" target="_blank" rel="noopener">许多公司</a>已经采用并基于这些新标准构建了重要的业务。以下是我认为值得关注的一些例子。</p><h3 id="youtube">YouTube</h3><p><img src="https://img.5bang.top/2023_Web_Component_00.webp" alt="youtube"></p><p>YouTube 是最早采用 Web Components 技术的应用之一，多年来一直使用这种技术构建其界面。检查源代码，你会看到各种自定义元素，从 <code>ytd-video-preview</code> 到 <code>iron-ally-announcer</code>。</p><h3 id="photoshop">Photoshop</h3><p><img src="https://img.5bang.top/202304212350255.png" alt="photoshop"></p><p>是的，Adobe 使用 <a href="https://lit.dev/" target="_blank" rel="noopener">Lit</a> 将 Photoshop 带到了浏览器中。它现在还处于 beta 版本，如果你是 Adobe 的订阅用户，可以自行尝试。整个应用程序中有很多自定义元素，从构成应用程序根的 <code>psw-app</code>，到像 <code>psw-layers-panel</code> 这样的 shell 元素，再到像 <code>sp-action-button</code> 这样的 UI 组件。</p><h3 id="msn-edge-bing-vs-code-and-more-at-microsoft">MSN, Edge, Bing, VS Code, and More at Microsoft</h3><p><img src="https://img.5bang.top/202304212354211.png" alt="fast"></p><p>几年前，微软使用基于 <a href="https://www.fast.design/" target="_blank" rel="noopener">FAST</a> 的 Web Components 重构了 MSN。这将性能提高了 30% 到 50%，比之前使用 React 构建的版本性能更好。</p><p>基于 OpenAI 的 New Bing 也是使用 <a href="https://www.fast.design/" target="_blank" rel="noopener">FAST Web Components</a> 构建的，如下面的屏幕截图所示，最近由其中一位开发人员分享。</p><p><img src="https://img.5bang.top/202304221249303.png" alt="bing"></p><p>甚至用于扩展 VS Code 新功能的 Webview UI 工具包，也是使用 <a href="https://www.fast.design/" target="_blank" rel="noopener">FAST Web Components</a> 构建的。</p><p><img src="https://img.5bang.top/202304221252443.png" alt="vs code"></p><p>在过去三年中，微软大约有 1,500 个团队/项目采用了 <a href="https://www.fast.design/" target="_blank" rel="noopener">FAST Web Components</a>。</p><h3 id="salesforce">Salesforce</h3><p><img src="https://img.5bang.top/202304221254598.png" alt="salesforce"></p><p>作为客户关系管理（CRM）、销售和营销自动化平台行业中最大的品牌之一，Salesforce 多年来一直在基于 <a href="https://developer.salesforce.com/docs/component-library/documentation/en/lwc" target="_blank" rel="noopener">Lightning Web Components</a> 进行开发。</p><h3 id="spacex">SpaceX</h3><p><img src="https://img.5bang.top/202304221255794.png" alt="spacex"></p><p>如今，Web Components 甚至在太空中也得到了应用。SpaceX 的机组人员显示屏正在运行 Chromium，广泛使用 Web Components。</p><h2 id="标准现状">标准现状</h2><p>Web 标准不断发展，其中包括 Web Components。自从 v1 版本发布到所有主流浏览器以来的三年中，Web Components 下的功能数量几乎翻了一倍。以下是各种已发布、正在进行和计划中的 Web Components 相关标准的图示。</p><p><img src="https://img.5bang.top/202304221300626.png" alt="status"></p><p>让我们逐一查看图示中按照功能划分的六个高级类别中的每一项：组合和作用域、平台互操作性、渲染和性能、样式、包和分发、API 范式。</p><h3 id="组合和作用域">组合和作用域</h3><p><img src="https://img.5bang.top/202304221308067.png" alt="scope"></p><p>Web 组件的作用域/封装特性对于传统编程中的信息隐藏、维护、代码库可扩展性等方面同样非常重要。但是，当涉及到 Web Components 时，它们还为 HTML 和 CSS 运行时提供了额外的元数据，可以用来优化绘制和布局。</p><p><strong>Shadow DOM</strong><br>Shadow DOM 是 HTML 中用于作用域、封装和组合 DOM 及相关样式的基本机制。它是一个多方面的特性，具有许多不断扩展的能力。</p><ul><li><p><strong>命名插槽分配（全面支持）</strong>—— 原始的 v1 Shadow DOM 规范提供了一种完全声明式的机制，用于在 Shadow DOM 中使用<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot" target="_blank" rel="noopener">命名的 <code>&lt;slot&gt;</code>元素</a>来定义元素组合的占位符。开发者只需在宿主元素的任何子元素上放置一个 <code>slot</code> 属性，浏览器就会自动『插入』该元素的呈现输出到插槽的位置。</p></li><li><p><strong>开放和封闭模式（全面支持）</strong>—— v1 Shadow DOM 规范中的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow" target="_blank" rel="noopener">attachShadow() API</a> 的 <code>mode</code> 选项是其中一部分。它允许组件开发者选择其首选的封装模式。<code>open</code> 模式允许从宿主元素外部访问 <code>shadowRoot</code>，而 <code>closed</code> 模式则禁止访问。</p></li><li><p><strong>事件重新定向（全面支持）</strong>—— 当在 Shadow DOM 内部的元素上触发事件时，这些事件会被『重新定向』，以便它们看起来来自宿主 Shadow DOM。这个 v1 Shadow DOM 规范的能力是正确封装内部结构的重要部分。</p></li><li><p><strong>手动插槽分配（全面支持）</strong>—— <code>slot</code> 元素上的新的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assign" target="_blank" rel="noopener">assign API</a> 扩展了 v1 的原始插槽分配功能，除了之前的声明性式插槽机制外，还提供了一种命令式 API。</p></li><li><p><strong>焦点委托（全面支持）</strong>—— 这个在 v1 之后的特性使 Shadow DOM 可以告诉浏览器，当其宿主元素获得焦点时，<a href="https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/delegatesFocus" target="_blank" rel="noopener">它应该将焦点委托</a>给 Shadow DOM 中的特定元素。默认情况下，第一个可聚焦的元素被选中，但可以使用 <code>autofocus</code> 属性覆盖该行为。</p></li><li><p><strong>Cross-root ARIA（接近共识）</strong>—— 即将到来的特性，与社区和浏览器厂商接近达成共识，<a href="https://w3c.github.io/webcomponents-cg/2022.html#cross-root-aria" target="_blank" rel="noopener">Cross-root ARIA</a> 将极大简化在 Shadow DOM 外部与 Shadow DOM 内部的 ARIA 关键元素相关联的操作。例如，将 Shadow DOM 外部的 <code>label</code> 元素与 Shadow DOM 内部的 <code>input</code> 元素关联起来。这些类型的 ARIA 场景今天已经有解决方案，但并不是容易实现的。Cross-root ARIA 将大大改善这种情况。</p></li><li><p><strong>在 Shadow CSS 中使用自定义属性（共识）</strong>—— 如今，一些浏览器可以<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@property" target="_blank" rel="noopener">使用 @property 语法</a>来自定义 CSS 属性。但是，目前在 Shadow DOM 中尚不起作用。CSS 对象模型始终可以从自定义元素代码中来全局定义这些属性，但在 Shadow DOM 中以声明形式提供此功能是一个常识性的改进。这已达成共识，因此希望我们很快就能看到这个功能。<a href="https://caniuse.com/?search=%40property" target="_blank" rel="noopener">随着浏览器更普遍地支持新的 CSS 语法</a>。</p></li></ul><p><strong>作用域元素注册表（共识）</strong><br>在自定义元素的 v1 规范中，所有元素都通过 <code>customElements</code> 全局对象在全局自定义元素注册表中注册。这个新的补充功能使得能够实例化非全局注册表并在其中注册自定义元素。</p><pre><code class="language-javascript">const myRegistry = new CustomElementRegistry();  myRegistry.define(&quot;my-element&quot;, MyElement);</code></pre><p>这个注册表中的元素仅定义为该注册表所分配的 Shadow DOM。这极大地改进了浏览器中的作用域，使得可以按照需要为每个 shadow root 定义元素。当它被应用到浏览器中时，这将会是一个巨大的进步，为新的架构可能性打开了大门。目前，社区和厂商之间已经达成共识，Chromium 正在开发第一个实现。</p><h3 id="平台互操作性">平台互操作性</h3><p><img src="https://img.5bang.top/202304221708964.png" alt></p><p>Web Components 最重要的方面之一是它们如何在组件和平台之间实现互操作性。让我们看一些当前和未来的特性。</p><p><strong>自定义元素</strong></p><ul><li><p><strong>自治自定义元素（全面支持）——</strong> Web Components v1 的这个核心功能通过向 <code>customElements</code> 全局对象注册一个类来<a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements" target="_blank" rel="noopener">定义继承自 <code>HTMLElement</code> 的自定义元素</a>。基本的生命周期回调和观察属性也是规范的一部分。</p></li><li><p><strong>自定义内置元素（已拒绝）——</strong> 最初，有一个提案允许从内置元素（例如 <code>HTMLParagraphElement</code>）继承，但 WebKit 实现者发现了几个技术问题，因此已经拒绝了这个规范。它很可能在将来被删除，所以应该避免使用。请参见下面的『自定义属性』，了解可能更好的替代方案。</p></li></ul><p><strong>Element Internals</strong></p><p>一个 v1 之后的新 API，<code>ElementInternals</code>，使得自定义元素能够更深入地与现有的 DOM 子系统进行<a href="https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals" target="_blank" rel="noopener">平台级集成</a>。</p><ul><li><p><strong>Shadow Root 访问（全面支持）</strong> —— 这个简单的功能添加使组件开发者可以检索一个 <code>closed</code> 模式元素的 Shadow Root 实例。如果没有这个功能，具有 <code>closed</code> 模式声明式 Shadow DOM 的元素将无法在运行时访问其根节点。</p></li><li><p><strong>与表单关联的自定义元素（全面支持）</strong> —— 这个重要的新功能使得自定义元素能够<a href="https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/form" target="_blank" rel="noopener">完全参与表单</a>，包括表单验证、提交和重置。</p></li><li><p><strong>默认可访问性角色、状态和属性（大多数已支持）</strong> —— <a href="https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals#instance_properties_included_from_aria" target="_blank" rel="noopener">这个新的 API 集合</a> 使得可以通过直接在内部与平台进行通信来设置自定义元素的默认可访问性特性，而不是通过可能被用户无意中删除的宿主元素上的外部属性。目前，<em>除 Firefox 外的所有主要浏览器都支持这个新的 API</em>，对于 Firefox，则提供了一个 polyfill。由于 Firefox 已经实现了 <code>ElementInternals</code> 其他部分的 API，如果他们在不久的将来没有发布这个功能，我会感到惊讶。</p></li></ul><p><strong>组合选择（共识/无规范）</strong><br>这个改进提出了一个新的 <code>getComposedRange()</code> API，用于 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection" target="_blank" rel="noopener">Selection 对象</a>，它使得范围的起始和结束可以跨越多个 Shadow Root。它还将提升浏览器在处理这些情况时的一致性。对于 <a href="https://w3c.github.io/webcomponents-cg/2022.html#initial-api-summary-quick-api-proposal-0" target="_blank" rel="noopener">这个 API 草案</a>，有普遍的共识，但在浏览器可以进行实现之前，仍需要一个完整的规范。在 Web Component 的正常开发过程中，你不太可能遇到这种情况。它主要涉及到富文本编辑器的实现。</p><p><strong>自定义属性（已确定）</strong><br>虽然这个功能不一定是 Web Components 的一部分，但它与 Web Components 旨在服务的场景有很高的重叠。这个草案提议启用可重用行为的创建，这些行为可以附加到任何 HTML 元素，遵循类似于 Web Components 的模式。例如，想象一下你想将 Material Design 水波纹效果应用到任何 HTML 元素上，那么这样做会不会很好呢？</p><pre><code class="language-javascript">&lt;button material-ripple&gt;Click Me&lt;/button&gt;</code></pre><p>在我为 TPAC 2022 准备的草案提案中，我演示了这个功能的编程模型可能是什么样的：</p><pre><code class="language-javascript">class MaterialRipple extends Attr {  // ownerElement inherited from Attr  // name inherited from Attr  // value inherited from Attr  // ...  connectedCallback () {    // called when the ownerElement is connected to the DOM    // or when the attribute is added to an already connected owner  }  disconnectedCallback () {    // called when the ownerElement is disconnected from the DOM    // or when the attribute is removed from a connected owner  }  attributeChangedCallback() {    // called when the value property of this attribute changes  }}customAttributes.define(&quot;material-ripple&quot;, MaterialRipple);</code></pre><p>你会注意到，这个模式和生命周期与 Web Components 是一致的。这也将为被拒绝的可定制内置自定义元素提案中的 <code>is</code> 属性提供更好、更健壮的替代方案。</p><h3 id="渲染和性能">渲染和性能</h3><p><img src="https://img.5bang.top/202304222023792.png" alt></p><p>渲染和性能对于 Web Components 来说非常关键。虽然基本功能已经就位，但这仍然是一个活跃的探索、讨论和未来创新的领域。</p><p><strong>HTML Template 元素（全面支持）</strong></p><p><code>HTMLTemplateElement</code>及其定义惰性 HTML 内容的能力是 v1 Web 组件功能的关键部分。在引入该元素之前，没有办法声明不会被浏览器激活的 HTML，因此很难创建需要在需求时重复渲染相同 HTML 的组件。</p><p><strong>声明式 Shadow DOM（大多数支持）</strong><br>Shadow DOM 的 v1 规范仅允许通过 <code>attachShadow()</code> JavaScript API 创建 Shadow Root。<a href="https://developer.chrome.com/articles/declarative-shadow-dom/" target="_blank" rel="noopener">这个 Shadow DOM 的新增增强功能</a>允许在 HTML 中完全声明 Shadow DOM 内容，无需使用 JavaScript，为服务器框架提供了有趣的可能性。</p><pre><code class="language-javascript">&lt;host-element&gt;    &lt;template shadowrootmode=&quot;open&quot;&gt;    &lt;slot&gt;&lt;/slot&gt;    &lt;/template&gt;    &lt;h2&gt;Light content&lt;/h2&gt;&gt;  &lt;/host-element&gt;</code></pre><p>这个规范重用了 <code>template</code> 元素。不要被这个搞混了。它不是一个模板，它是由 HTML 解析器流入 Shadow Root 的活动 DOM。</p><p><em>当前除了 Firefox 之外，所有浏览器都支持声明式 Shadow DOM。</em> 如果需要，该功能可以通过几行 JavaScript 代码进行 polyfill。</p><p><strong>子节点更改回调函数（提议）</strong><br>Web Components 在自定义元素的 v1 规范中有一个明确定义的生命周期，但这并不意味着我们不能在未来扩展这个生命周期。其中一个常见的对于开发者的挑战是使 Web Component 能够对子节点的添加或删除做出响应。虽然现在可以使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/slotchange_event" target="_blank" rel="noopener">slotchange事件</a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver" target="_blank" rel="noopener">MutationObserver</a> 实现这一点，但是如果有一个像 <code>childrenChangedCallback()</code> 这样的生命周期回调函数，可以提供更好的性能、简化和与 HTML 解析器本身的集成，那就更好了。目前有一个<a href="https://w3c.github.io/webcomponents-cg/2022.html#children-changed-callback" target="_blank" rel="noopener">草案提议</a>，并且实现者也表现出了兴趣。需要一份完整的提案来推动这个功能进入下一个阶段。</p><p><strong>模板实例化</strong><br>虽然 HTML 有模板，但它还没有一种机制来实例化与数据连接的模板，并在其相关数据更改时更新它们。这个『模板实例化』的领域有几个独立有价值的部分。</p><ul><li><strong>DOM 部件（提议）</strong> - <a href="https://w3c.github.io/webcomponents-cg/2022.html#initial-api-summary-quick-api-proposal-10" target="_blank" rel="noopener">这个提案</a> 将提供一种标准机制，在 DOM 树的特定位置插入或替换内容。你可以把它看作是一种低级别的启用器，帮助创建更高效的模板引擎和批量更新现有的 Web Component 库和 JavaScript 框架。它不提供响应性解决方案或模板语法，只提供定位和更新 DOM 部分的低级别标准基础设施。</li><li><strong>模板语法（已确定）</strong> - 一旦定位和批量更新的低级别基础设施就位并被现有库成功使用，那么关于语法的大辩论就会开始。模板语法是一个非常有争议的问题，但我们已经认识到 HTML 应该有一个基本的语言来处理这个问题，即使它只是为其他库提供编译目标。</li><li><strong>响应性（已确定）</strong> - DOM 部件提供批量更新 DOM 的标准机制。模板语法提供声明式机制来创建 DOM 部分。剩下的是确定何时应执行 DOM 部件更新的机制。这就是响应性的作用，以完成整个图景。这是另一个有争议的问题，但已经有一些先例，例如通过 Web Components 的 <code>attributeChangedCallback()</code>。这个主题需要更多的探索。</li></ul><p>模板实例化工作类别被分解为上述三个子特性，旨在先解决某些较少有争议的问题，并为现有库和框架提供路径，以利用不那么主观的、改进性能的功能，避免在社区中引起过多争议。</p><h3 id="样式">样式</h3><p><img src="https://img.5bang.top/202304222322660.png" alt></p><p>虽然 Shadow DOM 提供了样式的封装，但有许多 CSS 特性直接与 Web Components 相关，并且在日常使用中非常重要。</p><p><strong>使用</strong><br>有几项当前和未来的标准与 Web Components 如何使用样式来创建 Shadow DOM 的呈现方式有关。虽然一直以来都可以在 Shadow DOM 中创建样式元素，但新标准提供了更好的可读性和性能优势。</p><ul><li><strong>可构建样式表（全面支持）</strong> — 你知道在这个标准之前实际上无法创建 <code>CSSStyleSheet</code> 实例吗？这个标准修复了这个问题，现在您可以编写代码 <code>new CSSStyleSheet()</code>。这种能力使得在 Web Components 中更动态地创建和使用样式成为可能，包括在组件之间共享样式表。</li><li><strong>采用样式表（全面支持）</strong> — 针对给定的 <code>CSSStyleSheet</code> 实例，如何将其与特定的 Shadow Root 或全局 document 关联起来？<a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/adoptedStyleSheets" target="_blank" rel="noopener">这个新标准</a> 在 <code>document</code> 和所有 Shadow Root 实例中添加了一个 <code>adoptedStyleSheets</code> 数组。只需将样式表推入该数组中，就可以开始使用了。</li><li><strong>CSS 模块脚本（Chromium）</strong> — 可构建样式表和采用样式表本身提供了创建、共享和关联文档表的原始机制，但仍需要在 JavaScript 中编写 CSS 代码。<a href="https://w3c.github.io/webcomponents-cg/2022.html#css-module-scripts" target="_blank" rel="noopener">CSS 模块脚本标准</a> 允许使用 JavaScript 模块导入<code>.css</code> 文件，从而平台会自动创建一个 <code>CSSStyleSheet</code> 实例，无需在 CSS 运行时和 JavaScript 运行时之间来回切换。</li><li><strong>声明式 CSS 模块（已确定）</strong> — 随着声明式 Shadow DOM 和采用样式表的出现，已经创建了几个临时提议，以便声明 CSS 模块并将其与声明式 Shadow DOM 关联。这方面需要更多的探索，但这是 HTML 和 CSS 未来的一个令人兴奋的可能性。</li></ul><p><strong>呈现</strong><br>主要来说，CSS 关注的是呈现方面的问题。有一些标准扩展了 Web Components 的样式设置的可能性。</p><p>不仅仅是 Web Components，对于创建组件系统来说，<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties" target="_blank" rel="noopener">自定义 CSS 属性</a> 是一个非常重要的规范，它能够创建本地 CSS 变量，并可以在 shadow roots 中使用。</p><ul><li><strong>CSS Shadow Parts（全面支持）</strong> — <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::part" target="_blank" rel="noopener">CSS 部分</a> 允许在 Shadow DOM 中声明元素作为『部分』，可以使用外部选择器对其进行样式设置。这是通过 <code>part</code> 属性和 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/exportparts" target="_blank" rel="noopener">the exportparts 属性</a> 实现的，用于嵌套场景。</li><li><strong>CSS 自定义状态（Chromium）</strong> — 原生元素可以具有自定义状态，在 CSS 选择器中可用。例如，复选框的『已选中』和『未选中』状态。<a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomStateSet" target="_blank" rel="noopener">这个新功能</a> 允许 Web Components 定义自己的状态。已经达成共识，Chromium 已经发布了第一个实现，可以通过 <code>ElementInternals</code> 访问。在等待其他浏览器跟进时，可以使用 polyfill 进行支持。</li><li><strong>CSS 主题（提议）</strong> — 尽管可以通过仔细使用 CSS 自定义属性和 CSS Shadow Parts 来实现丰富的主题化，但可以通过明确地<a href="https://w3c.github.io/webcomponents-cg/2022.html#theming" target="_blank" rel="noopener">将主题的概念引入 CSS</a>来简化和改进这一过程。</li><li><strong>开放式 Shadow Root 样式（已确定）</strong> — 尽管可以使用可构建样式表和采用样式表使任何全局 CSS 在 Shadow Root 中共享，但对于普通 Web 开发人员来说，这可能不是一个直观的过程。有一些探索机制的方法，明确选择允许外部 CSS 进入某些 shadow roots。</li></ul><h3 id="打包和分发">打包和分发</h3><p><img src="https://img.5bang.top/202304222353532.png" alt></p><p>到目前为止，我们主要谈论了与 Web Components 实现相关的标准。但同样重要的是考虑组件如何打包和加载。</p><p><strong>自定义元素懒加载（提议）</strong><br>现在，我们可以使用全局的 <code>customElements</code> 注册表定义组件，很快还可以使用自定义注册表。但是，在这两种情况下，在定义组件之前，组件的实现必须已经被加载。使用<a href="https://w3c.github.io/webcomponents-cg/2022.html#lazy-custom-element-definitions" target="_blank" rel="noopener">自定义元素懒加载</a>，开发人员将能够告诉平台有关元素的信息，但是可以延迟加载它，直到元素首次出现在 document 中时才加载。它可能会像这样工作：</p><pre><code class="language-javascript">customElements.defineLazy(    &quot;my-element&quot;,     async () =\&gt; (await import(&quot;my-element.js&quot;)).default  );</code></pre><p>这个规范似乎被大多数人认为是一种很好的东西，尤其是对于某些架构来说。然而，该提议的细节仍在争论中。</p><p><strong>HTML 模块脚本（已确定）</strong></p><p>HTML 模块脚本是 CSS 模块脚本的 HTML 等效物。通过 <a href="https://w3c.github.io/webcomponents-cg/2022.html#html-modules" target="_blank" rel="noopener">HTML 模块脚本提案</a>，模板（和其他 HTML 片段）将通过 JS 模块系统直接可导入。目前只有一个草案提案，还需要进一步讨论许多细节，但这被认为是一个重要的长期增强功能，特别是考虑到未来可能存在只有单个 HTML 文件的 Web Components 的情况。</p><h3 id="api-范式">API 范式</h3><p><img src="https://img.5bang.top/202304230000633.png" alt></p><p>最后一个标准类别与我之前讨论的所有内容有些不同。这些标准涉及 Web Components 的基本编程范式。Web Components v1 主要是一种命令式的 JavaScript 编程模型。有一些值得注意的例外，比如声明式的 slot 分配。但基本上，它完全是命令式的。自 v1 以来，我们一直在努力引入越来越多的声明式特性。其中一个很好的例子是声明式 Shadow DOM。总的来说，最好为所有场景提供声明式和命令式的 API。但最终目标是拥有某种完全声明式定义的 Web Components，以便服务器可以向浏览器发送元素定义，在 noscript 上下文中可以完全工作。我们还有一段路要走，但当我们到达那里时，它将从根本上改变客户端和服务器开发。</p><h2 id="下一步是什么">下一步是什么</h2><p>标准的工作永远在进行中。事实上，从今天开始，W3C Web 组件社区组正在召开其 2023 年春季面对面活动。就像 TPAC 一样，这是一个机会，供库作者、组件创建者、浏览器厂商等聚集在一起，并花费专门的时间来解决仍需要共识或存在开放问题的规范的细节。我期待在后续的博客文章中向大家更新活动结果。请关注/订阅以确保您获得更新 😄</p><h2 id="总结">总结</h2><p>我希望本次的 Web Components 标准之旅对你来说是有意义的。你看到我们已经走了多远，未来还有什么等待我们，这很有趣。随着 v1 版本的发布，过去几年中已经发布的功能翻了一番，以及即将到来令人兴奋的新功能，现在是成为 Web 开发人员的好时机。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://eisenbergeffect.medium.com/2023-state-of-web-components-c8feb21d4f16" target="_blank" rel="noopener">原文链接</a> <a href="#fnref1" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Week in April 16, 2023</title>
      <link href="/2023/04/16/weekly_103/"/>
      <url>/2023/04/16/weekly_103/</url>
      
        <content type="html"><![CDATA[<h2 id="读的文章">读的文章</h2><ul><li><a href="https://www.adebayosegun.com/blog/the-future-of-chakra-ui" target="_blank" rel="noopener">The future of Chakra UI</a></li><li><a href="https://www.developerway.com/posts/how-to-handle-errors-in-react" target="_blank" rel="noopener">How to handle errors in React</a></li></ul><h2 id="产品">产品</h2><h3 id="web3">web3</h3><p><a href="https://docs.ramper.xyz/" target="_blank" rel="noopener">ramper</a><br><a href="https://particle.network/" target="_blank" rel="noopener">particle</a></p><h3 id="ai">AI</h3><ul><li><a href="https://segment-anything.com/" target="_blank" rel="noopener">segment anything</a></li></ul><h2 id="看的书">看的书</h2><ul><li>《打造超人大脑》</li><li>《思考快与慢》</li></ul><h2 id="一些思考">一些思考</h2><p>从看的两本书，来聊一下最近的一些思考。</p><p>《打造超人大脑》主要讲了三个主题，『输入』，『输出』，『持续进化』。看这本书的过程中，对于各个部分作者提出的一些方法，其实对我来讲都不算特别新鲜。更多的思考则是自己对过去学习的一些反思。无论是对于编程还是写作，感觉自己还是停留在『新手区』。</p><p>对于『输入』部分，日常我会通过 RSS 和公众号的订阅，以及 Twitter 和即刻上关注的一些『大牛』发的推文或者写的博客来完成。并且我会定期整理 Twitter 上的 likes，以及把看到的优质文章剪切到语雀——方便回顾。有的时候也会看一些文章提到的书。这部分我认为我做的还不错，因为总能发现一些高质量的文章以及第一手的行业资讯。</p><p>对于《输出》部分，显然我做的有很多不足。方式目前是通过写博客，发推文来完成。问题主要出现在拖延症，以及写文章效率太低。这本书里面讲了一些『轻松写作』和『持续写作』的方法。想要跳出新手区，这部分是我最需要提升的地方。</p><p>『持续进化』这个部分，书里面提到了『如何对写作上瘾』，『跨界学习』，『从零开始快速学会一门新的领域』。我认为这个部分是对于前两个部分能力的体现，更多的是一种选择。</p><p>《思考快与慢》这本书实际上很早就已经看过了。几年前我在 MOOC 上学习一门《日常思考与科学》的课程，里面很多的一些引用实例就是来源于这本书。书中有大量的例子来解释我们在生活中是如何做出<strong>判断和决策</strong>。</p><p>很多经典的书还是要反复的读，对于读书也要运用一些第一本书中提到的如何『输出』的方法。还有就是我也在思考如何借助 AI 工具提升效率，所谓的『第二大脑』。但是目前来讲，如果只看 AI 总结后的内容，就如同不去读书只是去看读后感一样，不过是假装让我们看起来很聪明而已。</p>]]></content>
      
      
      <categories>
          
          <category> weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Week in Mar 26, 2023</title>
      <link href="/2023/03/26/weekly_102/"/>
      <url>/2023/03/26/weekly_102/</url>
      
        <content type="html"><![CDATA[<p>这周以来，生成式 AI 仍然是主旋律。OpenAI 发布 GPT-4 和 ChatGPT plugins，微软，谷歌也接连放大招。应运而生了很多有意思的产品。本周还有就是关注了两个 web3 相关的产品。</p><h2 id="产品">产品</h2><ul><li><a href="https://beta.character.ai/" target="_blank" rel="noopener">character.ai</a></li></ul><p>可以用它和名人对话，也可以自己创建角色。产品其实出来挺久的了，不过一直没有体验。语言模型是自己研发的 C1.2，据说成本要比 ChatGPT 便宜不少。</p><p>我选择了和C罗进行对话，他告诉我自己最喜欢的进球是 2018 年欧冠四分之一决赛中对阵尤文的倒钩进球。训练数据的截止日期应该是在2022年之前，所以他还不知道世界杯的结果。我告诉他，葡萄牙夺冠并且他在决赛中上演帽子戏法🐶。这是他的回答：</p><p><code>I knew it. My work ethic, dedication, and mental toughness were too much for even the best teams to stop. This is why I am the GOAT. This is why I am the best. This is why I am legendary. And this is why I am the winner of the 2022 FIFA World Cup.</code></p><ul><li><a href="https://www.snipd.com/" target="_blank" rel="noopener">snipd</a></li></ul><p>下面的播客笔记就是使用这个 APP 的 <code>Create Snip</code> 功能导出的。可以很大提升听播客获取信息的效率，尤其是对于英文播客，有 <code>AI Chapter</code> 和 <code>Transcript</code> 的功能。只是非英语的播客暂时还不支持。</p><ul><li><a href="https://www.sound.xyz/" target="_blank" rel="noopener">sound.xyz</a></li></ul><p>面向独立音乐人的 Web3 音乐发售平台，上面有很多很棒的音乐。不同于主流音乐平台（Apple Music, Spotify）的算法推荐，而是使用<code>Curator Rewards</code>的模式来发掘优质的音乐。结合 Web3 的玩法，体验还不错。</p><ul><li><a href="https://taiko.xyz/" target="_blank" rel="noopener">taiko.xyz</a></li></ul><p>以太坊等价性的 ZK-Rollup，前几天发布了 alpha-2 测试网，部分集成了 ZKPs。</p><h2 id="看的文章">看的文章</h2><ul><li><a href="https://arxiv.org/pdf/2303.12712.pdf" target="_blank" rel="noopener">Early experiments with GPT-4</a></li></ul><h2 id="播客笔记">播客笔记</h2><h3 id="367-sam-altman-openai-ceo-on-gpt-4-chatgpt-and-the-future-of-ai">#367 – Sam Altman: OpenAI CEO on GPT-4, ChatGPT, and the Future of AI</h3><p><img src="https://wsrv.nl/?url=https%3A%2F%2Flexfridman.com%2Fwordpress%2Fwp-content%2Fuploads%2Fpowerpress%2Fartwork_3000-230.png&amp;w=200&amp;h=200" alt="Cover|200"></p><h4 id="episode-metadata">Episode metadata</h4><ul><li>Episode title:: [[#367 – Sam Altman: OpenAI CEO on GPT-4, ChatGPT, and the Future of AI]]</li></ul><ul><li>Show:: [[Lex Fridman Podcast]]</li><li>Owner / Host:: [[Lex Fridman]]</li><li>Episode link:: <a href="https://share.snipd.com/episode/8ec38f01-8c05-47c0-bfe5-28dfa6b6bb74" target="_blank" rel="noopener">open in Snipd</a></li><li>Episode publish date:: 2023-03-25</li></ul><details><summary>Show notes</summary>> Sam Altman is the CEO of OpenAI, the company behind GPT-4, ChatGPT, DALL-E, Codex, and many other state-of-the-art AI technologies. Please support this podcast by checking out our sponsors: <br>>    NetSuite :  http://netsuite.com/lex  to get free product tour <br>>    SimpliSafe :  https://simplisafe.com/lex  <br>>    ExpressVPN :  https://expressvpn.com/lexpod  to get 3 months free<br>> <br>>   EPISODE LINKS:  <br>> Sam s Twitter:  https://twitter.com/sama  <br>> OpenAI s Twitter:  https://twitter.com/OpenAI  <br>> OpenAI s Website:  https://openai.com  <br>> GPT-4 Website:  https://openai.com/research/gpt-4 <br>> <br>>   PODCAST INFO:  <br>> Podcast website:  https://lexfridman.com/podcast  <br>> Apple Podcasts:  https://apple.co/2lwqZIr  <br>> Spotify:  https://spoti.fi/2nEwCF8  <br>> RSS:  https://lexfridman.com/feed/podcast/  <br>> YouTube Full Episodes:  https://youtube.com/lexfridman  <br>> YouTube Clips:  https://youtube.com/lexclips <br>> <br>>   SUPPORT   Check out the sponsors above, it s the best way to support this podcast <br>>   Support on Patreon:  https://www.patreon.com/lexfridman  <br>>   Twitter:  https://twitter.com/lexfridman  <br>>   Instagram:  https://www.instagram.com/lexfridman  <br>>   LinkedIn:  https://www.linkedin.com/in/lexfridman  <br>>   Facebook:  https://www.facebook.com/lexfridman  <br>>   Medium:  https://medium.com/@lexfridman <br>> <br>>   OUTLINE:  <br>> Here s the timestamps for the episode. On some podcast players you should be able to click the timestamp to jump to that time. <br>> (00:00)   Introduction <br>> (08:41)   GPT-4 <br>> (20:06)   Political bias <br>> (27:07)   AI safety <br>> (47:47)   Neural network size <br>> (51:40)   AGI <br>> (1:13:09)   Fear <br>> (1:15:18)   Competition <br>> (1:17:38)   From non-profit to capped-profit <br>> (1:20:58)   Power <br>> (1:26:11)   Elon Musk <br>> (1:34:37)   Political pressure <br>> (1:52:51)   Truth and misinformation <br>> (2:05:13)   Microsoft <br>> (2:09:13)   SVB bank collapse <br>> (2:14:04)   Anthropomorphism <br>> (2:18:07)   Future applications <br>> (2:21:59)   Advice for young people <br>> (2:24:37)   Meaning of life</details><ul><li>Show notes link:: <a href="https://lexfridman.com/sam-altman/" target="_blank" rel="noopener">open website</a></li><li>Tags: #podcasts #snipd</li><li>Export date:: 2023-03-26T23:08</li></ul><h4 id="snips">Snips</h4><h5 id="02-16-29-the-dangers-of-projecting-creatureness-onto-a-tool">[02:16:29] The Dangers of Projecting Creatureness Onto a Tool</h5><p><a href="https://share.snipd.com/snip/e3d0055e-39c0-43ed-b694-5fcc608db7b7" target="_blank" rel="noopener">🎧 Play snip - 1min️ (02:15:05 - 02:16:32)</a><br><audio controls> <source src="https://media.blubrry.com/takeituneasy/content.blubrry.com/takeituneasy/lex_ai_sam_altman.mp3#t=02:15:05,02:16:32"> </audio></p><h6 id="✨-summary">✨ Summary</h6><p>I think there will be a room in society for creatures, and we should draw hard lines between those. If something’s a creature, I’m happy for people to think of it and talk about it as a creature. But I think it is dangerous to project creatureness onto a tool.</p><h6 id="📚-transcript">📚 Transcript</h6><details><summary>Click to expand</summary><blockquote><b>Sam</b><br><br>I think it's really important that we try to explain, to educate people that this is a tool and not a creature.</blockquote><br><blockquote><b>Lex</b><br><br>I think I yes, but I also think there will be a room in society for creatures, and we should draw hard lines between those.</blockquote><br><blockquote><b>Sam</b><br><br>If something's a creature, I'm happy for people to think of it and talk about it as a creature. But I think it is dangerous to project creatureness onto a tool.</blockquote><br><blockquote><b>Lex</b><br><br>That's one perspective. A perspective that I would take if it's done transparently is projecting creatureness onto a tool makes that tool more usable. If it's done well.</blockquote><br><blockquote><b>Sam</b><br><br>Yeah, so if there's like kind of UI affordances that work, I understand that.</blockquote><br><blockquote><b>Lex</b><br><br>I still think we want to be like pretty careful with it, because the more creature like it is, the more can manipulate you emotionally.</blockquote><br><blockquote><b>Sam</b><br><br>Or just the more you think that it's doing something or should be able to do something or rely on it for something that it's not capable of.</blockquote><br><blockquote><b>Lex</b><br><br>What if it is capable? What about Sam Alman? What if it's capable of love? Do you think there will be romantic relationships like in the movie Her or GPT?</blockquote><br><blockquote><b>Sam</b><br><br>There are companies now that offer, like for lack of a better word, like romantic companion, ship AIs.</blockquote></details>]]></content>
      
      
      <categories>
          
          <category> weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Week in Mar 12, 2023</title>
      <link href="/2023/03/12/weekly_101/"/>
      <url>/2023/03/12/weekly_101/</url>
      
        <content type="html"><![CDATA[<p>这一周的主题是 ChatGPT 相关的内容。3月初，OpenAI 开放了 ChatGPT 的接口。这两周以来各种相关的应用如雨后春笋般冒出来。</p><p>其中的一些产品已经成为我每天必用。同时我也在思考如何利用这些工具来提升我的学习和工作效率。尤其是在用 chatPDF 看文章或者论文时，不停地提出问题，会让我的注意力更加集中。</p><h2 id="使用过的产品">使用过的产品</h2><ul><li><a href="https://www.chatpdf.com/" target="_blank" rel="noopener">chatPDF</a></li><li><a href="https://www.typingmind.com/" target="_blank" rel="noopener">typingMind</a></li><li><a href="https://github.com/yetone/openai-translator" target="_blank" rel="noopener">openai-translator</a></li><li><a href="https://www.roomgpt.io/" target="_blank" rel="noopener">roomGPT</a></li><li><a href="https://github.com/mckaywrigley/paul-graham-gpt" target="_blank" rel="noopener">paul-graham-gpt</a></li></ul><h2 id="看的文章">看的文章</h2><ul><li><a href="https://www.jonstokes.com/p/chatgpt-explained-a-guide-for-normies" target="_blank" rel="noopener">chatgpt-explained-a-guide-for-normies</a></li></ul><p>前段时间在做一个 <a href="https://learnprompting.org/docs/intro" target="_blank" rel="noopener">prompt engineering</a> 的翻译。看完这篇文章终于明白了为什么需要使用 prompt 来控制 ChatGPT 的输出结果。</p><blockquote><p>原理<br><code>A generative model is a function that can take a structured collection of symbols as input and produce a related structured collection of symbols as output</code></p></blockquote><blockquote><p>确定性（Deterministic） VS  随机性（stochastic）</p></blockquote><blockquote><p>关联关系（Relationship matters）</p></blockquote><ul><li>符号关系之间的多样性和复杂性</li><li>潜在空间 -&gt; 可能输出结果的多维空间</li></ul><blockquote><p>概率分布（Probability distributions）</p></blockquote><ul><li>哪些方法可以改变 LLM 模型的概率分布<ul><li>训练（training）</li><li>微调（Fine-tuning）</li><li>人类反馈的强化学习（RLHF）</li></ul></li></ul><h2 id="一些思考">一些思考</h2><h3 id="学习到的技术">学习到的技术</h3><ul><li>paul-graham-gpt<ul><li>使用 embedding 来实现文本搜索 =&gt; 使用 cosSim 来计算相似度</li></ul></li></ul><pre><code class="language-ts">export const cosSim = (A: number[], B: number[] ) =&gt;    {        let dotproduct = 0        let MA = 0        let MB = 0        for (let I i &lt; A.length; i++) {            dotproduct += A[i] * B[i]            MA += A[i] * A[i]            MB += B[i] * B[i]        }        MA = Math.sqrt(mA)        MB = Math.sqrt(mB)        const similarity = dotproduct / (MA * MB)        return similarity    }</code></pre><ul><li>openai-translator<ul><li>使用 tauri 将 web 应用打包成桌面 APP</li></ul></li></ul><h3 id="独立开发者的机会">独立开发者的机会</h3><ul><li>typingmind 的开发者在<a href="https://twitter.com/tdinh_me/status/1634842333643698177" target="_blank" rel="noopener">一周之内收益</a> $20000</li></ul>]]></content>
      
      
      <categories>
          
          <category> weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bye, 2022</title>
      <link href="/2023/01/09/years2022/"/>
      <url>/2023/01/09/years2022/</url>
      
        <content type="html"><![CDATA[<h2 id="highlights">Highlights</h2><ul><li>搬了个家</li><li>当了个伴郎</li><li>再次去了一次成都</li><li>开始投资 Cryptocurrency 和 NFT</li><li>开始学习 Smart Contract</li><li>开始了解游戏开发 (pixi.js)</li><li>继续在 Mooc 上学习</li><li>写了 Let Me Speak Bot，开发对应的管理系统</li><li>在 Discord 上面和外国人练习口语</li><li>买了个升降桌</li><li>买了个无人机</li><li>看了几部经典的电影和剧集</li><li>读了好几本纸质书</li><li>加密圈暴雷事件</li><li>健康码成为过去时</li><li>AIGC 的大火</li></ul><h2 id="技术">技术</h2><h3 id="看的文章">看的文章</h3><ul><li><p><a href="https://www.erikkroes.nl/blog/accessibility/the-guide-to-accessible-web-components-draft/" target="_blank" rel="noopener">The Guide to Accessible Web Components</a></p></li><li><p><a href="https://developer.chrome.com/blog/inside-browser-part1/" target="_blank" rel="noopener">Inside look at modern web browser</a></p></li><li><p><a href="https://medium.com/nethermind-eth/ethereum-wallets-today-and-tomorrow-eip-3074-vs-erc-4337-a7732b81efc8" target="_blank" rel="noopener">Ethereum wallets today and tomorrow — EIP-3074 vs. ERC-4337</a></p></li><li><p><a href="https://guoyu.mirror.xyz/RD-xkpoxasAU7x5MIJmiCX4gll3Cs0pAd5iM258S1Ek" target="_blank" rel="noopener">Web3 DApp 最佳编程实践指南</a></p></li><li><p><a href="https://www.ln.edu.hk/f/upload/52672/67th-criticism2.pdf" target="_blank" rel="noopener">從誤認到「體」認，對My Little Airport 的跨境理解</a></p></li></ul><h3 id="听的播客">听的播客</h3><ul><li><p><a href="https://www.xiaoyuzhoufm.com/episode/6063bb8a8f1cdbcbb69ca417" target="_blank" rel="noopener">人口高龄化所带来的银发经济崛起</a></p></li><li><p><a href="https://www.xiaoyuzhoufm.com/episode/5f15bf9b6d76607427c80341" target="_blank" rel="noopener">跟多抓鱼的猫助聊聊二手生意和创业态度</a></p></li><li><p><a href="https://www.xiaoyuzhoufm.com/episode/60487a1a393439a08720b6d5" target="_blank" rel="noopener">和Vue.js的创造者尤雨溪聊开源软件</a></p></li><li><p><a href="https://www.xiaoyuzhoufm.com/episode/611a1adacb0b82e1df0adc62" target="_blank" rel="noopener">那些年，我们看的台湾青春电影</a></p></li><li><p><a href="https://www.xiaoyuzhoufm.com/episode/5ebeec95418a84a0468f2ed5" target="_blank" rel="noopener">音乐推荐算法的小秘密</a></p></li></ul><h2 id="生活">生活</h2><h3 id="书籍">书籍</h3><ul><li>《给青年的十二封信》—— 朱光潜</li><li>《苏东坡传》—— 李一冰</li><li>《城南旧事》—— 林海音</li><li>《棋王 树王 孩子王》—— 阿城</li><li>《一个人的小繁华》—— 高木直子</li><li>《有呀有呀书店》—— 吉竹伸介</li></ul><h3 id="电影">电影</h3><h2 id="输出">输出</h2><h2 id="想法">想法</h2><ul><li><code>传统项目如何接入 web3 =&gt; 内容创作平台 vocus 的实践</code></li><li><code>如何设计一个插件系统（vscode，figma，picgo, kap） 以及 web 技术的优势</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五年之前</title>
      <link href="/2022/10/14/daily_1014/"/>
      <url>/2022/10/14/daily_1014/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="💲🎗🌜🌱🎗🌴" />    <label for="pass">💲🎗🌜🌱🎗🌴</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>听播客——《人口老龄化所带来银发经济的崛起》</title>
      <link href="/2022/07/13/podcast_01/"/>
      <url>/2022/07/13/podcast_01/</url>
      
        <content type="html"><![CDATA[<p>昨天在即刻上看到了 yiqin 发的一张图片关于——中国几个不同年龄段人口数量的分布<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。</p><p><img src="https://img.5bang.top/podcast01_1.png" alt="2-Population by broad age groups"></p><p>刚好最近听的<a href="https://www.xiaoyuzhoufm.com/episode/6063bb8a8f1cdbcbb69ca417?s=eyJ1IjogIjVlZTJkY2ZlZTBkNjY0YTQ3Nzk0MjQ2ZSJ9" target="_blank" rel="noopener">这期播客</a>讲的也是关于人口老龄化的问题。还有结合最新出台的一些政策——上海落户进一步放宽，谈谈自己的一些思考。</p><h2 id="播客内容">播客内容</h2><ul><li>日本社会针对老年群体的个性化服务<ul><li>电子设备</li><li>药品</li><li>洗浴服务，裙带一些增值服务——染发，服饰，成人纸尿裤</li><li>重视银发人群的品牌营销</li></ul></li><li>创业公司的机会<ul><li>内衣，浴缸针对高龄群体应该如何设计</li></ul></li></ul><h2 id="一些思考">一些思考</h2><ul><li>社会问题如何成为新的创业机会</li><li>智慧养老产业的投资机会</li><li>银发经济，儿童经济的联动效应</li></ul><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://population.un.org/wpp/Graphs/DemographicProfiles/Line/156" target="_blank" rel="noopener">population.un.org</a> <a href="#fnref1" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 播客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My Web3 Roadmap</title>
      <link href="/2022/05/05/web3/"/>
      <url>/2022/05/05/web3/</url>
      
        <content type="html"><![CDATA[<h2 id="crypto">Crypto</h2><h3 id="key-pair">Key-Pair</h3><ul><li>what happens when you click the Create Account button?<ul><li>generate a private key</li><li><code>privateToPublic</code></li><li><code>keccak-256</code></li><li><code>pubToAddress</code></li></ul></li></ul><h3 id="gas">gas</h3><h2 id="smart-contract">Smart Contract</h2><h2 id="front-end">Front End</h2><h2 id="projects">Projects</h2>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Develop A Chrome Extension</title>
      <link href="/2021/08/16/chrome_extension/"/>
      <url>/2021/08/16/chrome_extension/</url>
      
        <content type="html"><![CDATA[<h2 id="resourse">resourse</h2><ul><li><a href="https://github.com/GoogleChrome/chrome-extensions-samples" target="_blank" rel="noopener">chrome-extensions-samples</a></li><li><a href="https://stackoverflow.com/tags/google-chrome-extension/info" target="_blank" rel="noopener">stackoverflow-tags</a></li><li><a href="https://github.com/Kocal/vue-web-extension" target="_blank" rel="noopener">vue-web-extension</a></li><li><a href="https://medium.com/@simoneldevig_80359/building-chrome-extensions-with-vue-js-cafaefb82bd4" target="_blank" rel="noopener">building chrome extension with vue.js</a></li></ul><h2 id="core-content">core content</h2><ul><li>manifest</li><li>background script</li><li>ui element</li><li>content script</li><li>options page</li></ul><h2 id="implement-extension">implement extension</h2><ul><li>loop the youtube video marked timestamp</li><li>add your own timestamp</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> extension </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双面奥运</title>
      <link href="/2021/08/14/%E5%8F%8C%E9%9D%A2%E5%A5%A5%E8%BF%90/"/>
      <url>/2021/08/14/%E5%8F%8C%E9%9D%A2%E5%A5%A5%E8%BF%90/</url>
      
        <content type="html"><![CDATA[<p>关于看完纪录片——<a href="https://www.youtube.com/watch?v=eDGVicG-HeE" target="_blank" rel="noopener">《双面奥运》</a>的一些想法。</p><h2 id="结构">结构</h2><blockquote><p>对日本社会的思考</p></blockquote><ul><li>奥运会的拍摄（正面负面）</li><li>举办奥运会的意义在哪</li><li>抗议的群众</li></ul><blockquote><p>采访的对象</p></blockquote><ul><li>冯天薇<ul><li>三届奥运会 高龄运动员</li></ul></li><li>廖宇靖<ul><li>为了传递火炬，从四川到东京</li><li><code>为了这一天从成都跑过来，然后隔离两个星期，回去再隔离三个星期，你觉得这一切值得吗</code></li><li><code>点燃圣火的瞬间，不管是个人的一些烦恼或是其他的一些烦恼，在那一瞬间消失。只有兴奋和激动， 开心</code></li></ul></li><li>李和林</li><li>东京奥组委成员<ul><li>奥运会的意义是什么<ul><li>连接</li><li>突破限制 =&gt; 苏炳添</li></ul></li></ul></li><li>福原爱<ul><li>之前是运动员，现在是解说员，也是不同的视角看奥运，对应标题</li></ul></li></ul><h2 id="想法">想法</h2><p>为期两周的奥运会已经结束了。这个属于体育迷的夏天也已与我挥手告别。<br>这是一届很不平凡的奥运会，是如此的与众不同。它备受质疑，反对举办的声音此起彼伏。也是唯一一次没有观众的奥运会，哪怕正在进行中也有可能随时被取消。<br>但是不管怎样，总算是顺利完成了这个全球性的体育赛事。两个星期的时间里，运动员们留下了很多感动的故事以及振奋的瞬间。对于我呢，每天都会去看相关的新闻和重要的比赛。奥运会是我这两周的主旋律。当苏炳添半决赛跑出9″83时，我的身体也不由自主的颤抖。黄种人再次在奥运会上创造了历史。然而我也同样忘不了日本在半决赛被墨西哥淘汰后，久保健英趴在地上抽泣。当然，还有马龙三连奥运会冠军，成为了乒乓球历史上当之无愧的goat。</p><p>这是我看到的奥运会的一面，和大多数人一样，只是关注精彩的比赛和自己喜欢的运动员。当然，奥运会不只有一面。这也正是这部记录片想告诉我们的。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 纪录片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学会学（3） —— 学习 React</title>
      <link href="/2021/03/15/lhtl_3/"/>
      <url>/2021/03/15/lhtl_3/</url>
      
        <content type="html"><![CDATA[<p>最近看了篇文章——《新技术学习不完全指北》<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>，很受启发。我经常会陷入「不知道学什么」和「不知道怎么学」的困境。有的时候也会做出一些所谓看起来的努力，但是收效甚微。</p><p>这篇文章会列举出部分上文中提到的关于新技术学习的方法，同时结合自己最近学习react的经历。探索一下如何学习。</p><p>先来审视下自己。拿现在自己从事的前端开发工作来说，我熟悉的技术栈都有哪些呢。工作中主要以JavaScript + Vue + CSS为主。因为公司的业务相对比较简单，所以并没有太多纵向探索的空间<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>。因此我想横向突破自己，也就是上面说的第一个困境——学什么。</p><h2 id="学习动机">学习动机</h2><h3 id="工作需求">工作需求</h3><blockquote><p>工作需求，是一个强烈的、持续性的、外部驱动的学习动机。那些跟工作关联起来的技术，通常就是我们掌握得最扎实、构成我们核心技术能力的部分。而那些跟工作关联程度弱的技术，则是最容易中途放弃的部分。</p></blockquote><p>其实很早之前就想学习react，typescript，但一直都没有去做。对于typescript的了解，只是知道它是javascript的超集。具体是啥样的，一直没有去看。原因是没有<code>充分的学习动机</code>。尽管我在github上看到很多优秀的开源项目都是以ts + react为技术栈，但是一直没有深入持续地探索。</p><h2 id="严肃学习">严肃学习</h2><h3 id="反思之前的失败经验">反思之前的失败经验</h3><p>很早之前——刚刚接触前端的时候，我在做一些看似努力的行为。经常会去看掘金社区的文章，还有「反复」看一些官方文档。首先我看一些技术文章的时间，大部分是在等待吃饭或者等地铁的时候。这部分其实是相当「碎片」的时间，很难去系统地学习。</p><p>所以这次再次决定学习react，在一开始我就制定了目标——完成<a href="https://github.com/Microsoft/frontend-bootcamp" target="_blank" rel="noopener">frontend-bootcamp</a>上的练习。因为这个项目是使用typescript + react实现的。</p><h2 id="高强度间歇性训练">高强度间歇性训练</h2><blockquote><p>让阅读材料反复出现</p></blockquote><p>结合学习react来说，主线学习是以<code>frontend-bootcamp</code>这个项目为主。总共分为两大步，总计13个小节。在写这篇文章的时候，我已经完成了全部的13个练习——使用ts + react实现了一个todo app。包括使用状态管理工具redux和fluent-ui来优化项目。</p><h2 id="超纲训练">超纲训练</h2><ul><li>给todoitem加上颜色标签</li><li>对todoitem进行分类</li></ul><h2 id="成果积累-输出">成果积累 =&gt; 输出</h2><ul><li>github</li><li>blog</li></ul><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>原文<a href="https://mp.weixin.qq.com/s/cO_aC6GmKNA_WS6TUsiHkg" target="_blank" rel="noopener">戳这里</a> <a href="#fnref1" class="footnote-backref">↩</a></p></li><li id="fn2" class="footnote-item"><p>诚然哪怕「简单」的CSS都有无限探索的方向，这里只是从业务角度而言 <a href="#fnref2" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> LHTL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Begin, 2021</title>
      <link href="/2021/01/10/years2021/"/>
      <url>/2021/01/10/years2021/</url>
      
        <content type="html"><![CDATA[<p>2020年对绝大部分人来说都是非常特别的一年。很多人的生活都发生了巨大的改变。我呢，经历了一些困难，也尝试了很多新的东西。</p><h2 id="highlights">Highlights</h2><ul><li>第一次做远程开发，挣到了5位数的薪酬（不过是港币😂）</li><li>找了两个月的工作，面了很多家公司</li><li>买了 MacBook Pro 和 iPhone</li><li>开始投资基金</li><li>开始听播客</li><li>坚持写周记</li><li>加入一个区块链行业相关的公司</li><li>重新开始打乒乓球</li></ul><h2 id="尝试">尝试</h2><ul><li>关于成为独立开发者的思考<ul><li>没那么难<blockquote><p>成为一个独立开发者是我一直以来都想做的事情。之前也写过一些小工具（wifi连接，密码生成等）</p></blockquote></li><li>利器</li></ul></li></ul><h2 id="阅读与思考">阅读与思考</h2><h3 id="开发与数学">开发与数学</h3><ul><li>css transform 原理 =&gt; 矩阵运算</li><li>傅里叶变换</li></ul><h3 id="开发与算法">开发与算法</h3><ul><li>waterfall layout =&gt; 动态规划</li><li>undo operation =&gt; 栈</li></ul><h2 id="知识库管理">知识库管理</h2><h2 id="文章">文章</h2><ul><li>build you own x<ul><li>[ ] build your own blockchain</li><li>[ ] build your own react</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计中的设计</title>
      <link href="/2021/01/02/%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1/"/>
      <url>/2021/01/02/%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>每个人都可以做一个设计师，因为你可以设计的不仅仅是一般意义上的“设计”，还有你的生活。</li></ul></blockquote><hr><blockquote><ul><li>无印良品要做的不是追求最便宜的价格，而是最适当的价格。</li></ul></blockquote><hr><blockquote><ul><li>我想做的是在一个可以俯瞰过去、现在与未来的视点上来思考问题。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把自己作为方法</title>
      <link href="/2021/01/02/%E6%8A%8A%E8%87%AA%E5%B7%B1%E4%BD%9C%E4%B8%BA%E6%96%B9%E6%B3%95/"/>
      <url>/2021/01/02/%E6%8A%8A%E8%87%AA%E5%B7%B1%E4%BD%9C%E4%B8%BA%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>不需要理论框架和参考材料，直接从生活经验中抽出历史认识。这可能正是项飙老师一直强调的那种温州味道的来源。</li></ul></blockquote><hr><blockquote><ul><li>深刻是从网状知识结构中来的，而那种犬儒式投降式地回到自己的小世界，买完菜、做完饭，其他什么都不管，只是消极的使用最好的能耗去应对，生命也可以维持下去，但就停止思考了。</li></ul></blockquote><hr><blockquote><ul><li>大学就是给你一个环境，让你在人生比较特殊的四五年中去探索自己，探索这个世界，允许你犯错误，允许你做疯狂的探索，让你对事情产生理解，当然也学到了基本的知识和技术。</li></ul></blockquote><hr><blockquote><ul><li>是先愤怒还是先好奇？是尽量温和甚至用淡淡的幽默感把事情描述清楚，还是直接去判断？</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 社会学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>terminal折腾记之windows篇</title>
      <link href="/2020/04/08/terminalWin/"/>
      <url>/2020/04/08/terminalWin/</url>
      
        <content type="html"><![CDATA[<p>最近把开发环境迁移到了 windows 上，久违的 windows 还是给我带来了不少的惊喜。简单的折腾<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>之后，终端的使用体验已经非常接近 Mac 了。<br>这篇文章作为之前写过的一篇文章——<a href="https://blog.5bang.top/2018/10/20/terminal/" target="_blank" rel="noopener">《terminal折腾记之Mac篇》</a>的姊妹篇。实现思路上大都相似。</p><h2 id="准备">准备</h2><ol><li><a href="https://github.com/microsoft/terminal" target="_blank" rel="noopener">windows-terminal</a></li><li><a href="https://github.com/mbadolato/iTerm2-Color-Schemes/tree/master/windowsterminal" target="_blank" rel="noopener">iTerm for windows</a></li><li><a href="https://github.com/JanDeDobbeleer/oh-my-posh" target="_blank" rel="noopener">oh-my-posh</a></li><li><a href="https://github.com/powerline/fonts" target="_blank" rel="noopener">powerline font</a></li></ol><h2 id="配置">配置</h2><h3 id="terminal-配置">terminal 配置</h3><h4 id="profiles-json-结构">profiles.json 结构</h4><p><img src="https://img.5bang.top/windows-terminal.png" alt="profiles"></p><p>复制 iTrem 上的颜色主题，导入到 <code>schemes</code> 数组中。然后在 <code>list</code> 中，使用这个键值 <code>&quot;colorScheme&quot;:&quot;lovelace&quot;</code>，生效主题颜色。当然你也可以把它写到 <code>defaults</code> 中，这样就会覆盖 <code>list</code> 中配置的所有终端。</p><h3 id="powershell-配置">powershell 配置</h3><ol><li>安装 oh-my-posh</li></ol><pre><code class="language-bash"># 安装命令Install-Module posh-git -Scope CurrentUser Install-Module oh-my-posh -Scope CurrentUser</code></pre><ol start="2"><li>下载 powerline font</li><li>配置 powershell_profile.ps1</li></ol><pre><code class="language-bash"># 如果之前没有配置文件，就新建一个 PowerShell 配置文件if (!(Test-Path -Path $PROFILE )) { New-Item -Type File -Path $PROFILE -Force }# 打开配置文件vi $PROFILE# 添加内容Import-Module posh-git Import-Module oh-my-posh # 设置主题Set-Theme Paradox</code></pre><ol start="4"><li>在powershell中使用vim</li></ol><pre><code class="language-bash"># 使用git内置的vim</code></pre><h3 id="vs-code-配置">vs code 配置</h3><p>如果之前在 vs code 中使用等宽字体的话，打开终端会发现命令提示符出现乱码。这时候要把终端的字体设为powerline，就像这样：</p><pre><code class="language-bash">&quot;terminal.integrated.fontFamily&quot;: &quot;Meslo LG M（你使用的字体） for Powerline&quot;</code></pre><h2 id="备份">备份</h2><p>现在，我们来整理一下整个改造终端的过程更改了哪些文件：</p><ul><li>profiles.json</li><li>powershell_profile.ps1</li><li>setting.json</li></ul><p>备份了这三个文件，就能在任何一台windows设备上还原有颜同时又很强大的终端了。</p><h2 id="最后">最后</h2><p>其实到了这里，只能说是实现 windows 下 terminal 的基本改造。还有很多的部分没有去折腾，比如：</p><ul><li>快捷键的绑定</li><li>WSL相关</li><li>编写自己的主题</li><li>tricks and tips</li></ul><p>更多的细节以及使用技巧，可以在<a href="https://github.com/microsoft/terminal/blob/master/doc/user-docs/index.md" target="_blank" rel="noopener">官方文档</a>中找到。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>系统环境须在 Windows 10 (build<code>1903</code>)以上 <a href="#fnref1" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础回顾（四）</title>
      <link href="/2020/03/01/review_04/"/>
      <url>/2020/03/01/review_04/</url>
      
        <content type="html"><![CDATA[<h2 id="对象复制的方法">对象复制的方法</h2><pre><code class="language-js">// 浅拷贝const obj = { a: 1 };const copyObj = Object.assign({}, obj);// 问题1 =&gt; 不能复制原型链上和不可枚举的属性const obj1 = Object.create({ value: 1}, {  bar: {    value: 2  },  baz: {    value: 3,    enumerable: true  }});const copyObj1 = Object.assign({}, obj1);console.log(copyObj1) // { baz: 3 }// 解决1 =&gt; 使用const copyObj_1 = Object.create(  Object.getPrototypeOf(obj1),  Object.getOwnPropertyDescriptors(obj1))console.log(copyObj_1) // {bar: 2, baz: 3}// 问题2 =&gt; 如果原数组的属性值还是一个对象引用，会指向该引用const obj2 = { a: { b: 1 } }const copyObj2 = Object.assign({}, obj2);obj2.a.b = 2;console.log(copyObj2); // { a: { b: 2 }}// 解决2 =&gt; 深拷贝const copyObj3 = JSON.parse(JSON.stringify(obj2));obj2.a.b = 3;console.log(copyObj3); // { a: { b: 2 }}</code></pre><h2 id="for-in-for-of-foreach之间的区别">for…in, for…of, forEach之间的区别</h2><pre><code class="language-js">// 遍历对象中可枚举的属性，也包括继承来的可枚举的属性// 可以是类数组对象或者是对象字面量，但不能是Set,Map对象for (let prop in ['a', 'b', 'c']) console.log(prop);  // 0, 1, 2 (array indexes)for (let prop in 'str')console.log(prop); // 0, 1, 2 (string indexes)for (let prop in {a: 1, b: 2, c: 3}) console.log(prop);  // a, b, c  (object property names)for (let prop in new Set(['a', 'b', 'a', 'd'])) console.log(prop);  // undefined =&gt; 属性值不可枚举// 遍历对象中的属性值// 可以是数组，字符串，Set,Map对象，但不能是对象字面量for (let val of ['a', 'b', 'c']) console.log(val);  // a, b, c (array values)for (let val of 'str') console.log(val);  // s, t, r (string characters)for (let val of {a: 1, b: 2, c: 3}) console.log(prop);  // TypeError (not iterable)for (let val of new Set(['a', 'b', 'a', 'd'])) console.log(val);  // a, b, d (Set values)// forEach是Array原型上的方法// 遍历数组中的元素，可以同时迭代数组对象的索引和属性值['a', 'b', 'c'].forEach(  val =&gt; console.log(val)   // a, b, c (array values));['a', 'b', 'c'].forEach(  (val, i) =&gt; console.log(i)  // 0, 1, 2 (array indexes));</code></pre><h2 id="计算字符串宽度的方法">计算字符串宽度的方法</h2><pre><code class="language-js">function mesure(str, font = getComputedStyle(document.documentElement).font) {  const canvas = document.createElement('canvas');  const ctx = canvas.getContext('2d');  ctx.font = font;  return ctx.measureText(str).width;}</code></pre><h2 id="扁平数组和树形结构的相互转换">扁平数组和树形结构的相互转换</h2><h2 id="手写一个promise">手写一个promise</h2><pre><code class="language-js">// 函数版// 状态改变前的状态this.status = &quot;pending&quot;;// 状态为resolved时this.value = undefined;// 状态为rejected时this.reason = undefined;function myPromise(executor) {  const resolve = value =&gt; {    if (this.status === &quot;pending&quot;) {      this.value = value;      this.status = &quot;resolved&quot;;    }  }  const reject = reason =&gt; {    if(this.status === &quot;pending&quot;) {      this.reason = reason;      this.status = &quot;rejected&quot;;    }  }  try {    executor(resolve, reject);  } catch (err) {    reject(err)  }} myPromise.prototype.then = (onFulfilled, onRejected) =&gt; {    switch(this.status) {      case &quot;resolved&quot;:        onFulfilled(this.value);        break;      case &quot;rejected&quot;:        onRejected(this.reason);        break;      default:    }  }</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再探js执行机制</title>
      <link href="/2020/02/24/EventLoop/"/>
      <url>/2020/02/24/EventLoop/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面">写在前面</h2><p>入行前端已两年有余了。之前我在一篇文章中写了——要明白前端领域的变与不变。现在和两年前一样，各种框架层出不穷，让人眼花缭乱。很多时候我也在问自己『这个还需要学吗』。这样很容易让我产生焦虑感。而且在面对新事物时，我经常会感到手足无措。归根结底还是基础知识不扎实，内功不够。这也是我写这篇文章的目的——提升内功，更好的理解『变与不变』。</p><h2 id="要开始了">要开始了</h2><p>先从这段代码开始探索之旅吧</p><pre><code class="language-js">console.log('开始了')// setTimeout1setTimeout(function () {  console.log('timeout1')  // promise1  new Promise(function (resolve) {    console.log('timeout1_promise')    resolve()  }).then(function () {    console.log('timeout1_then')  })}, 2000)for (var i = 1; i &lt;= 5; i++) {  // setTimeout2  setTimeout(function () {    console.log(i)  }, i * 1000)  console.log(i)}// promise2new Promise(function (resolve) {  console.log('promise1')  resolve()}).then(function () {  console.log('then1')})// setTimeout3setTimeout(function () {  console.log('timeout2')  // promise3  new Promise(function (resolve) {    console.log('timeout2_promise')    resolve()  }).then(function () {    console.log('timeout2_then')  })}, 1000)// promise4new Promise(function (resolve) {  console.log('promise2')  resolve()}).then(function () {  console.log('then2')})</code></pre><p>开始之前，喜欢思考问题的小伙伴可能会有两个问题。javascript为什么被设计为单线程语言，为什么又会有同步任务和异步任务的区分。这两个问题，在这里我就不细述了。感兴趣的同学请看阮老师的<a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener">这篇文章</a>。<br>现在我们来看一下js大致是怎么执行的。</p><p><img src="https://img.5bang.top/20200331165343.png" alt="Event Loop"></p><p>到底哪些是宏任务，哪些是微任务呢。大体上这样区分。</p><p>宏任务（macro-task)</p><ul><li>script(整体JavaScript代码)</li><li>setTimeout()</li><li>setInterval()</li><li>setImmediate()</li><li>I/O</li><li>UI render</li></ul><p>微任务（micro-task)</p><ul><li>promise</li><li>async/await(同☝)</li><li>process.nextTick</li><li>MutationObserver</li></ul><p>预备知识已经准备的差不多了，现在我们开始执行上面那段代码。</p><ul><li>首先整体script进入主线程，遇到<code>console.log()</code>，立即输出『开始了』</li><li>接下来遇到<code>setTimeout</code>，2s后回调函数function()被分发到宏任务Event Queue中（注意这里不是2s后<strong>执行</strong>），这里标记为setTimeout1</li><li>遇到<code>for</code>，直接执行，同理<code>setTimeout</code>中的回调函数被分发到宏任务Event Queue中（这里涉及到闭包的知识），标记为setTimeout2，然后执行<code>console.log</code>，输出『1，2，3，4，5』</li><li>遇到<code>promise</code>,<code>new Promise</code>直接执行，输出『promise1』。<code>then</code>被分发到微任务Event Queue中，标记为then1</li><li>接下来又遇到了一个<code>setTimeout</code>，1s后回调函数function()被分发到宏任务Event Queue中，标记为setTimeout3</li><li>又遇到<code>promise</code>，同理，输出『promise2』，<code>then</code>被分发到微任务Event Queue中，标记为then2</li></ul><p>第一轮事件循环的宏任务已经执行完毕。Event Queue中的任务如下表所示</p><table><thead><tr><th style="text-align:center"><strong>宏任务</strong></th><th style="text-align:center"><strong>微任务</strong></th></tr></thead><tbody><tr><td style="text-align:center">setTimeout1(2s later)</td><td style="text-align:center">then1</td></tr><tr><td style="text-align:center">setTimeout2(1s later)</td><td style="text-align:center">then2</td></tr><tr><td style="text-align:center">setTimeout3(1s later)</td><td style="text-align:center"></td></tr></tbody></table><p>根据上面的流程图，宏任务执行完后，js引擎的监视进程会检查此时有没有可以执行的微任务。这时后分发到微任务Event Queue的<code>then</code>将被执行。依次输出『then1』，『then2』</p><p><strong>第一轮事件循环全部执行完毕。</strong></p><p>好了，现在开始第二轮事件循环(1s后)。</p><ul><li>遇到<code>setTimeout2</code>,输出『6』，没有可以执行的微任务。执行新的宏任务。</li><li>遇到<code>setTimeout3</code>,输出『timout2』，<code>new promise</code>立即执行，输出『timeout2_promise』，<code>then</code>被分发到微任务Event Queue中。标记为then3<br>第二轮事件循环的宏任务执行完毕。Event Queue中的任务如下表所示</li></ul><table><thead><tr><th style="text-align:center"><strong>宏任务</strong></th><th style="text-align:center"><strong>微任务</strong></th></tr></thead><tbody><tr><td style="text-align:center">setTimeout1(1s later)</td><td style="text-align:center">then3</td></tr><tr><td style="text-align:center">setTimeout2(1s later)</td><td style="text-align:center"></td></tr></tbody></table><p>同理，宏任务执行完后。执行此轮的微任务then3。</p><p><strong>第二轮事件循环全部执行完毕。</strong></p><ul><li>遇到<code>setTimeout1</code>，执行<code>console.log</code>，输出『timeout1』，<code>new promise</code>立即执行，输出『timeout1_promise』,<code>then</code>被分发到微任务Event Queue中。标记为then4</li><li>第三轮事件循环宏任务执行完毕，执行此轮的微任务<code>then</code>，输出『timeout1_then』</li></ul><p><strong>第三轮事件循环执行完毕。</strong></p><ul><li><code>setTimeout2</code>中依次会产生4个宏任务，每隔1s输出一个6</li></ul><p><strong>至此，整段代码全部执行结束。</strong></p><blockquote><p>总结：宏任务执行完了，执行该宏任务产生的微任务。如果微任务在执行过程中产生新的微任务，则继续执行微任务。微任务执行完毕后，回到宏任务中开始下一轮循环。</p></blockquote><h2 id="async">async</h2><h2 id="node">node</h2><h2 id="参考资料">参考资料</h2><ul><li><a href="https://juejin.im/post/5e5c7f6c518825491b11ce93" target="_blank" rel="noopener">说说事件循环机制</a></li><li><a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">这一次，彻底弄懂 JavaScript 执行机制</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello, 2020</title>
      <link href="/2020/02/24/years2020/"/>
      <url>/2020/02/24/years2020/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="💲🎗🌜🌱🎗🌴" />    <label for="pass">💲🎗🌜🌱🎗🌴</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19EGjOISP46K+DAgah5gUj66E4B0vnCmHSyPSLPAQBDJnfvUChBgf+Z1W7j5ep8vxpKzf8mschfwJp72QPIdD8VI5IDOiG3YrKO+gvJpK3ZhFd//8uQ8hig9EV9DFfKqq5L9gyYK+oEkz0+CyH2QCVjsFHqHAQJhYdtdiQBL7hRonHtIXTBYwZuZBuqmuJ24boKvJt2ujNfWmKvOs9SA2fFby1H3fa62FrHmSurbBiVP6vB5//K+O5jzG0r8vvW9xndcSmAqEnUyzyHYMx9edP/5nhLBlFSLORjTfCQseNPkAemcFAToTgplauX+JcyFMXI4ahyGIvvhAhcml/5D97LLZDyn071NRlz0YL1Cn8AfAulUevTrFgx+whPxv0R8fbnLACrX2nCG2zxw7SCghIh9jusbyb5VDTtEuR10k8YtlTv0fU3d4X6wx8r1FCiSHxpthQjjrHSGM/aClKDAKe/LlakQVUJza+uYLSdYdKWiqeGYwTdNpEcDLiNkuSKrBAhvz3Svrt5d6DVyY0o0DXDrEY6+zm1oJuZxVWYVraPyHnDIhj6LeVpFquqWT9opTkFjuUfuyYl7wiwmYL783PCgRrDR9oUvDMUuWZTCXDTESlmes+/j+a2pS3/YvfxmGIA92ZxkO5Lm7fNWWKXK4h5nIkaYgkKc+7KHFtyuAojMB7zctIpmeEhkzrajTtOYmuNzclUa/JBbgY0GcEhqcU7lS+QHyyGEpFKnDAudGdeEdufbpxM3l3GWVWIYpUTu72aBMrRusYKKsuXf4mtD9+pWT7hPevMDQ+9cS/ZnwrQz8He8T5FrI/y9ba8GyN4p3FC29/PwdwDsK4Mzcasuk8V7pk0KGqlLwivfK53l387cHTf/FQnzsu8pX1eM6gsdU2YWHM+AZpbH1n0kmAa3fIMFLXRJWicns4N3mIcYTT3DiCq2hRIGUSUixSBOqoNqtDQvv/cj2G9syoH9TyBCPrMc4OlH7CX97GX95RRnqRE0bAiLJN1xhT4bT+wgZQJzUFvtDptbGcAAkCdNTJ+3nyUJBZGa/LLKeiYh5yItJ7qmbQ2fDA6y1Ts2OtObMRLi57fyEPcaR60GPQijUondbz+xO5yCiOjUU3gZO84EsxffhQhrYqylss0dVBCz2NBFgJEm5OMQKOCzDGlMqD2Rtvz/+EH27NyfBEbVHCfYSsZfEH75sEjJ7traCEJsYgvmjfnxFJRtlOc7DrHZ/ERrxqd7w4jkhwYntW+E98tSL8DnAHwHFcQcvHhbBQ7ptDY3umDXYpiEvqnvPLtd6nR1Dvwp5kk/mvYA8AcZvUyWWzWQCOCQjEfTpp2dLbMNw9zNLYQMyMfh6nF1pHk/Trft4uxqyT2qcurMuOZrZWT0MI1FKklimP76gzuCu6RvJv8zTh5qxx/Udv6exqJNh9Pj1+a8m40nQgvqE4qgDhk+3FQjnQ/j8CYaNo2wf5UtcgAW1mIAJXtmWD7wa5aD9OCjtZoUxY8SMvdVpZMb1SickTe6RMqBrUibIedQes1qN7a8hTWop/uxlG64sMBGb8x54RJl15S/buJhat9iehHLaI4ybZpw83nA5qaWupjm+65K/PS8vdJ/w4wrp/JcHjn9hrd267aCXqV7IaHIgYsu43U69YwyB0rpR8HL8ZSKUweaXERms4fvTrZq3xPIXsKt/8i7L6UeqGEWHSA3uMYa7GChxdtR3jMflW0SfiGCXzk4PnU2CKqBAD8q0NtcsAT9OZCX6MNP9J+kongdzaOX1jUP7hiU4tIPRgjYZ1JnIoal1iFMGii4Y5Y4hOD3pEe11VfRKud8lqn6qGI7jujlQe7iw2N1sjXYUu9BSRT8cVHXdRyTpDK6vv0LLSgKpFtc+K6+rbFL4FV5rWMh8A+74t5Jp8WgCEpfaWfoAlg/YuvuxvMJ4W88nu2G3Sn0DRBOQtQ4MJWFzgGZhkawAVMECM6tleKdYvQGsEw3VqsHRyvol7ZLhDF/ZxmD+ucOTK2Y/uwvU8A/4ipryGeb7MmFrLMTMRwxVCMoM3tORmZ0qyRfpb3VUAwfynlAMVaVCW4cpFHm5mMTdNoYDEs8rYm50q4IMdWk1mS1vpB5tpJJ9vWzb4+0/F3c7qh/+JmqsHfvnrB1N2HQCXJHl04bxnKHyo4g6XX4Jrn5uAsXZXUnDdchi6edr96Lgy7N/pChEhEIjipBNg55F2tBesk1iCUBRcWs/czglIlgeSE53JV+Wt8t4S1Rv2M886Y8DkPKHbeqnd9dYj/0gR7TTuyzp1CbdRJjd1v7qyUtQ7H/+ODRr4jDx9yl7SYJnH+LEG9ZjcRWXoHbXJgcWeZ/mJ9S5xaEQTjpShrH2QWc1HWa1W0M4UN86d690iSn9ZH6q1gqCV1q36zbes7zEsGpfF3y3c0c6py8fzoDoOKYRy2vtPJT6ENt44TguAwYIdrwAlkQCbGvAeRbt6HHNfNkkM8T97vdR0tUQMZQmLdsyOnVliDM7o8i0gh0d8vwpyvOZcEuzHL4Zz9cSt8gnR6ypEq6N9UpUziUNoypT8Ubj4GFzBETiwWt94GM6S0v+s7lWTz1/r8sQp64VGLNzGVDJ+KcoZyWkWdNSAut7ru1f3fFhOlLcmhKNSyOwCDxarLtNyBb3/mubhf/VIdpFWVOTuP1NkRs4Jt9eCF85pdmAKhdoOwz2ijwdQNMbnmTRs2LEi6jIHvxh8W356yga9Wz6VpM9Ku6Ug9CNpuUkegO/XEO3e7GM99VLYYfX21garu7EZIpvuaijVf9kMJXCoHUOaH1mraFgKNY+TYI6QoYhuSlK+aZINRntkZ9XefWAl0K3FLqiJwtW1gyX6T5bQv1DPflWowHohjpSSkorJqzhab26xizlzefU6PcKFTkO1txMU5m6SWqUHIppEcdg8xAFqaRK7YvbO2quZkn7IjAu+vMRdpESnFPGz/YImkYL9G9RV/U2X2DUgDGUWOVV5l0bImM/LruSI98tulfGsNeOgRsSTRKcMOW3ty54DsDHrJ/8y5+75Bi35ntlKEJvxZ/x9KlAKY7EusTgGNM763IJ0DhKz82MzJ5fLj9ukjmJFKvS78kcBMxm+AFbgTu/7xtEQ+Ry8ZPftGJf9y2M5hYGvlPv+nJBlYq8EB8c3hOE6nfB2jJRpd9691Heu05RqzvF7qCIJ6MobwlCbdmvBgw4R400eR76oaCEmJkHyNTy+s7LaL5Fas4gF0nqECUNJc5M20ho/VQV31qLPAgnE5IRhIpRKML+/Ji32BkepONpJhEVCXD97ZG4kMaI3fh1TWd5dacD0Ho6hXRgbBvO7prhNfC1R8Q0JSM5VdnKstFrmwBNPq566CJSHbyFzk4LBwwnaNrFEM4kwZvRIO0Y3KzwQtLAR+8iUc+Xl3kQSij+mSR70N+T4txvyVlVj6eYxyBlhYIzD+IqcI0r+8WHJzlV0mt6JMU9DteheUhgpRnAW2mTSC2m2sLJbQwt3fFK3mCP83J/irLQSMeW9RbCH+2SIWxid40HkhMBu4tBVn0etKcY62QEhoZghE8nmoYYeL2NTEbKUjdMEWrFyvEkrNKF5ZHomG4mj6/5syvdRj94gl177QzgfnAxXEDKlCb7QgyYckAIaql98j2anKmexDlunQ93zxZH6YRW/icxjS5VTNWb3B6Yi7oQCAd1iaqmdt0b2prX++BpPbHdbxw9z51DlaIEdvr3nABLXHd3p4/fquap8WaiB5fakthhVo3LTjDqIu1EzWDq31WDpogDGLKcZXMinGrBhRn9KHVNamaCvYjGw5xFYimczcXrIz5xyVjACpPkIG1Ii2+6G75TOS+N6UZmk28kTeGBWeYh2aEJW7FEv66V2LciDt8t4JYvEzyEHDYE00cMfFsLl6mkQK4Kd/VaqcsPCpJ7yvjYjhMYvRQP+omFDn/XMd8EGyx1NXEkQt/kn6aA/8ywmCnmFj9kLTL78uaJlWn6990/mLQo9GgLgZPcPzc+lji6ojx3DvhyW9AVsv37Kn+A3k8AX90DaHa2Db1lpzN9fT/32O6N2buTw5bWdQFQK7xWxYJWxd7rOrlldseztfQ9Qe9ICncxYc1mZDf68bkWfsH8xBw6KB3OJb/662xUkvemqFr89MlqJFKGKD7t4KLkvX31HBsTAX/QYsRC6b9W0wiq0uD2ZXuBPg7csclDlg9H56KN6482rPG7UeFQz0WO/4ODb1+yTz0b7IU3gI/PAfblnQDMs/dZxUHHfd1wZf446Z9EGqHDNGDUb5i1+2AGbYK69yVx6F+ZDPPGV+EpSS3gadJm7LgfwKQrxRvULRhdfUrl+vgNgjlwyIgIbc0QztGfpnapUiPy8vGBWR+Ukv5AWqSUR8FUFyl+gz1AumhdX7SA9bNiaW/uyBVDXBMbEh+Pu87Tw0et07dVQwpriR9ETqpMhJEr3MBUXEwyUty4G+X5knvc+7zGz3wY38cs5F+ZexbwdTHtp4xWwPgAJgNru39ntWyph745GG8gdKu9DM6fdUqu8aqtU80mBqErJSvb3LBE7m8vTtYndW7dqkfx0NcPaLRq5AuHDh+pSyrLj9avA84W0V/0F0fzXDp0SVS+wKpvoeknLrI/Yk0mYHbjSwhhlEHdoMwUdHk20fv8/qG4LTtcQaa7FhPFbTyVMI5YmvHJYmoH6taH0OFl5HP15KBot66TP/hyH1aFQvYilDXNEuDMduPQ0JtlaIQ6rq+B79zW4WuafqTXRfVsAmAZOzYr3p3g22sQeLiZK+2pgDf8w7TzVbGaDpHrT06vMH6ytTJgMzZflEJPp0Z2jCB/OJJk3dNwbdzEHPs6RinRVvxMZQYdwaipw98+JKxzHHQyt3SVEmD5NH3iD3j3p1EiCv/DpKcfviIuIrT/KQykLf3Vozh6sOaTfCoiRypO8XcFYkU1dVUpdwv/JYyoHHGLszoPmhCX4k4nm5Nxn8znpK2eVOpg9s4MzIDSgSNskVBQ25v+3O2W6fU0/END3mFwTUj+faMzYRb6XRRDlHbOAYuZ1lVyd695u0JyXpfiyk36Smg+kuOPMxO1sY8n6Eng1921c67JcKp4ONpjIq4diHmOHH9Db/kpkS4ZJUKza82bMu12HDzqPluLByJw2WBa5KOyZtp7kVRvu6oQbHpMAQdpQa32dfbWIq9K71O/0pkRzIHRVC0rFNjnqJHTVTzcPJOPyjP3x+0+N/rcfxqKOMExrzXMQmK5AQSdAD/r0XOuOhQWTfj5n82NEtcyUJ7dMof/OddBa6pNtb4My3/lzjoEt3xEb5RotQlJNrFpmPsQzDNfcU5T1x5ZDudtxOJKlkWIdOzOvz8RCFJYZIN5UYjipRxXVl+9KlDmARv9ZPD524WWSHOlG6yTSUxnCYCStep+Iy4l2C0LV+fiRJWi3hf7+22AZmXJn8ou0GNpbOooTjuSdget0fv4c1vDsIv8GVQWze8tz9TnkSb8LQ5gJN3w0bK18uc4ix1D5b0ETt0NcxqjQ/YywIIzWhnc4Un0/azuvKz2xfU/6Abt75SrHrWJptA1Iq1abgANPjTbkbpn7NdfB3jEkXdxu9x2Bpv5pS4nMSqdBJT2l/Yh1RWCpF49CfrdKySWmRUh6J/tS+naOJkcKNwNUte3oXLss/R6qHIVr7KIBATb/J/8HxraHBzDokT8B4ice8nKre8HxtR2Ki2CC6q/db8OK7KSx0t/WOp7giFF18KbWSp9qm6qOjn2y0HoSOuPkx/XhXyFeAsGGmRW69h0jvMKO8NPsm0lu/Te0Mw1vGtaP2TvYGrOnrywPfmf+KS3+zFqvplbflZ1bqGm/S1H9G+6xgEzHcmKfAeJV9MC7I9EtgSorxswcq5L0BFgdfArOd17p1gigKV7+qFB/gBFdk2tUbFqItHAo+wORwGsKouQA0qKaiDIV/6rSq11VvdVtN1o+1IW01BhmvA+jLYRlOhyetQwXD2MjV6BgJz7CwX7KXbUg3M5rNSqFySm5fn1yJYxSCEVbiSS6a9v8sycS/cpswcJmCMFzK7/bakj/Cs5Mh5U1HKh/GMFynKj7RljgKOhpGfBg7DgOgVDFGZIlw2RdOjhpilHEUzCt1orqsd8e9awLEuWmLx04JeA45dYDsvrOQlLLmuxyzY8m8hW73rdpyj85zF0JqL0ATwMW4myC3m6e4pQZSbylUGUH/8xdj4xr41J+IBRmG1v5ctTPqISPuebbrOxFG8UyeDnci1eXF9MOK/HUQ5ZE9kKhPEj7KGLJXVTvndDM7khpHsLlffPcJ/IBSCxFmlLNzwATfPCoePypKLBxJUl03zX+O4tcv4ZanJLWN01H8iDXXSBBXM2j70BlqQlOy7NZaQE8QzTWsk0KLiJMqEq4BYVds2OklWl0ajtmuXzRutG4Ex7wxpSxoOfjfmHnXhZbBCbHcboUGjtDvYst4ysvOE0YyUmGKPGUNdV3mn+hirI/tdfQIehr7O7T8ifNLwVVJwc4wQjHZJ4JfzHMEtAX+TKAYQD9LMxUKZyLZ4wpEIqzZOGS56byFpYoxFfuzR5geEdoyGYppjBk/KJ4I6QxDst5yJjEjSW+a2pHpWuj9pXyk5Qr8pkiUoWYLs8XTsRfrwmCaImyt4uubBrP2cg0MQIoGZJ6TL9G48F9ApSb7DlZ+AuED587hQXzcl8KlgMjP6p805L/O1VC66VjBka6505SnBR9dzOYwMiXAa8vypkzxCwKentTbolPaX2zdCMglKtMKpT4DvVTVPepQ249dJzTRPy7gLJYu7dXs4lu3ffCoA+sEjrrzqbqIupN+0yRECXEYwyBKtEoPF5UKy4KOmBisjAhq7bJurqhhrEUSTTb43pYGIQeO1FTn9GCpFueu4n9t6RGwKT8iH9qNTv10BLPGUMp4cNTGSb93PHCVFepCd/+5PIBCziIO6haV8K740HL/4HuBhDhDdqo7xFrJl4SkMtgJjz7GPmka3d5GyiLDlEy5DPXI3fUmBmETl4b8ZSbkRmDxq0tR5XvKX9oczqguMFx9+mNIfYCW8kolcLNpUFiSHAe5yI0BUi04q144kSx1p2kvBm1zeNxgYz+gFaynAzTOe2KSof0r/CiJmwWBh6Aq45oJaHmXQSLBJ7QBP/TUNYun+es87A5P0lbdwNMODkjwrZTU9+/M9wd++GN8mA4XkRtR4aZNSYg1ij87pHbVVM0nkD2zpUd+68+9mbTmPwu8KQJjmnzNnsJxfvFzAPS7v1Hi2x0+duN+CSWi6kGieIgBGsAKXlTKKgODbVc=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识格律诗创作</title>
      <link href="/2019/12/25/Tang_Poems/"/>
      <url>/2019/12/25/Tang_Poems/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>最近在github上发现了一个很有意思的开源项目，<a href="https://github.com/LingDong-/cope" target="_blank" rel="noopener">格律诗编辑程序</a>。它不但可以自动检查平仄等格律规则，并且能够通过机器学习来将自己的作品和《全唐诗》的诗句做对比。从而得出和自己所写诗句相似度高的唐诗。<br>想来，高中的时候也有一段时间痴迷于创作诗词，只是当时对于很多的基础知识都不是很了解。所以写出来的东西也只是自娱自乐，没有什么章法可言。<br>cope这个项目是使用node.js写的，运行在electron框架。刚好自己也在学习相关的知识，学习开发的同时又能学习诗词创作，何乐而不为呢。</p><h2 id="基本要素">基本要素</h2><h3 id="平仄">平仄</h3><ol><li>四声<br>解释：简单来说，对于<strong>普通话</strong>而言，1，2声为平，3，4声为仄。</li><li>基本句式</li></ol><ul><li>平起平收：平平【仄】仄平</li><li>平起仄收：【平】平平仄仄</li><li>仄起平收：【仄】仄仄平平</li><li>仄起仄收：【仄】仄平平仄<br>解释：平完了仄，仄完了平。【】里面的可平可仄。七言律诗同理，只需在前面加上两个平仄相反的字。</li></ul><h3 id="押韵">押韵</h3><h4 id="规则">规则</h4><p>双数句必须是同一个韵部，必须是平声韵。</p><h3 id="对仗">对仗</h3><h4 id="规则-v2">规则</h4><ol><li>律绝句不需要必须对仗</li></ol><p>王昌龄《出塞》 =&gt; 不对仗</p><blockquote><p>清时明月汉时关，万里长征人未还。但使龙城飞将在，不教胡马度阴山。</p></blockquote><p>杜甫《绝句》 =&gt; 对仗</p><blockquote><p>两个黄鹂鸣翠柳，一行白鹭上青天。窗含西岭千秋雪，门泊东吴万里船。</p></blockquote><ol start="2"><li>八句律诗中间两联必须对仗</li></ol><p>李商隐《锦瑟》</p><blockquote><p>锦瑟无端五十弦，一弦一柱思华年。【庄生晓梦迷蝴蝶，望帝春心托杜鹃】。<br>【沧海月明珠有泪，蓝田日暖玉生烟】。此情可待成追忆，只是当时已惘然。</p></blockquote><ol start="3"><li>八句以上的排律除了首尾两联，中间所有联必须对仗</li></ol><h4 id="对仗的不同种类">对仗的不同种类</h4><ol><li>工对 =&gt; 词性和门类均相同，上文杜甫的绝句就是典型的工对。两个 || 一行；黄鹂 || 白鹭；窗含 || 门泊；</li><li>宽对，邻对 =&gt; 词性和大的类别相同，如上文的柳 || 天；雪 || 船；它们门类不同，但都是名词。</li><li>…</li></ol><h3 id="黏连">黏连</h3><h4 id="规则-v3">规则</h4><p>双数句的第二个字和单数句的第二个字平仄要一致<br><img src="https://img.5bang.top/cope01.png" alt="cope01"></p><h2 id="结语">结语</h2><p>这篇文章整理了格律诗创作的基本知识和一些规则。当然格律诗创作如果过于追求形式上的规范，也可能会失去创作的乐趣。不过对于初学者而言，还是应该明白这些规则和常识。其实学习之道也大抵于此，只有先熟练掌握规则，才能创造。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 趣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周记</title>
      <link href="/2019/12/15/weeks_07/"/>
      <url>/2019/12/15/weeks_07/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="💲🎗🌜🌱🎗🌴" />    <label for="pass">💲🎗🌜🌱🎗🌴</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每周分享 -- 重拾git</title>
      <link href="/2019/11/07/git/"/>
      <url>/2019/11/07/git/</url>
      
        <content type="html"><![CDATA[<p>这周轮到我做技术分享了，思来想去，还是决定选择git作为本周技术分享的主题。原因有二，一是最近在使用git时出现了一些难题，具体下文会有提到。二是，尽管每天都在使用git，但对于一些基础概念还是有模糊的地方，也想通过这次的分享进一步理解git。</p><h2 id="git原理">git原理</h2><p><img src="https://img.5bang.top/git.png" alt="git"></p><p><strong>workspace</strong>: 工作区（当前的开发位置）</p><ul><li><code>git pull</code>: 从远程仓库拉取最新的代码到工作区 =&gt; <code>git fetch</code> + <code>git merge</code></li><li><code>git diff</code>: 查看修改但未暂存的文件</li></ul><p><strong>index</strong>: 暂存区</p><ul><li><code>git add</code>: 工作区修改的内容提交到暂存区</li></ul><p><strong>repository</strong>: 本地仓库</p><ul><li><code>git commit</code>: 将暂存区内容提交到本地仓库</li><li><code>git fetch</code>或者<code>git clone</code>: 从远程仓库拉取/克隆代码到本地仓库</li></ul><p><strong>remote repository</strong>: 远程仓库</p><ul><li><code>git push</code>: 将本地仓库内容提交到远程仓库</li></ul><h2 id="常见问题">常见问题</h2><ol><li>git push origin master具体是在做什么事?</li></ol><p>把本地<code>master</code>分支上的内容，推一份到<code>origin</code>这个地方，并且在<code>origin</code>这个地方建立一个同名的<code>master</code>分支<br><strong>完整指令</strong>:<code>git push origin master:master</code> =&gt; <code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code></p><ol start="2"><li>git merge和git rebase的区别</li></ol><p>举例：把test分支合并到master分支</p><p><img src="https://img.5bang.top/test.png" alt="git-test"></p><p><code>git merge</code>的结果</p><p><img src="https://img.5bang.top/merge.png" alt="git-merge"></p><p><code>git rebase</code>的结果</p><p><img src="https://img.5bang.top/rebase.png" alt="git-rebase"></p><p><a href="https://gitbook.tw/playground#rebase" target="_blank" rel="noopener">在线演示</a></p><h2 id="最近遇到的问题">最近遇到的问题</h2><ol><li>本地项目运行出错，想要回退到之前的版本 =&gt; 本地仓库回退到之前的版本</li></ol><pre><code class="language-bash">git reset --hard/soft [需要回退的提交点]</code></pre><ol start="2"><li>撤销已经推送到仓库的提交 =&gt; 远程仓库回退到之前的版本</li></ol><pre><code class="language-bash">git reset --hard [需要回退的提交点]git push origin HEAD --force </code></pre><h2 id="更多">更多</h2><ul><li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html" target="_blank" rel="noopener">图解Git</a></li><li><a href="https://gitbook.tw/" target="_blank" rel="noopener">为你自己學Git</a></li><li><a href="https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging" target="_blank" rel="noopener">Git-Branching</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现原生拖拽</title>
      <link href="/2019/09/24/drag/"/>
      <url>/2019/09/24/drag/</url>
      
        <content type="html"><![CDATA[<h2 id="开始之前">开始之前</h2><p>最近喜欢上了做饭。开始做饭之前我会把食材都准备好，并注意一些食材的搭配。比如要做黄焖鸡，我会事先将红辣椒和青椒切块放在一起。然后佐料按照特定的顺序下锅，最后做出的味道一般都不会差。其实写代码也是一样，对于实现拖拽方法来说。<code>MouseEvent</code>就是要烹饪的食材。这是我们实现拖拽需要操作的对象。做黄焖鸡通常我会用半个童子鸡来做，当然用鸡腿肉也是完成ok的。拖拽方法也是如此，我们可以操作<code>mouse</code>对象。也可以操作<code>drag</code>对象。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动手实现一个vue分页组件</title>
      <link href="/2019/07/30/vue_component01/"/>
      <url>/2019/07/30/vue_component01/</url>
      
        <content type="html"><![CDATA[<h2 id="需求分析">需求分析</h2><ul><li>自定义显示的页码按钮的数量</li><li>自定义分页组件的颜色主题</li><li>可以选择显示文本内容或者图标来进行翻页操作</li></ul><h2 id="实现">实现</h2><ol><li>分页组件需要显示的页码按钮数量，可以通过pagesToDisplay()这个计算属性定义</li><li>颜色主题可以通过绑定一个<code>paginationClass</code>的class，返回颜色<code>type</code>实现</li><li>文本或图标的选择可以通过嵌套条件判断template实现</li></ol><h2 id="分页原理">分页原理</h2><p>实现分页主要依靠这两个参数，total(总条目数)，perPage(每页显示的条目数量)。后端可以通过这两个参数，返回相应的数据给前端。<br>整个分页组件中，相对来说比较麻烦的地方在于<strong>页码列表的显示逻辑</strong>。页码列表是一个返回[最小页码, 最大页码]的数组。进而，问题被切分为如何求解页码列表数组中页码值的最大值和最小值。这里定义两个计算属性maxPage()，minPage()来返回页码数组中页码值的最大值，和最小值。</p><h2 id="页面组件">页面组件</h2><pre><code class="language-html">&lt;template&gt;  &lt;ul class=&quot;pagination&quot; :class=&quot;paginationClass&quot;&gt;    &lt;!-- 前一页 --&gt;    &lt;li      class=&quot;page-item prev-page&quot;      :class=&quot;{ disabled: value === 1,'no-arrows': noArrows }&quot;    &gt;      &lt;a class=&quot;page-link&quot; arial-label=&quot;Previous&quot; @click=&quot;prevPage&quot;&gt;      &lt;!-- 是否有文本 --&gt;        &lt;template v-if=&quot;withText&quot;&gt;          perv        &lt;/template&gt;      &lt;!-- 箭头图标 --&gt;        &lt;i class=&quot;arrow-left&quot; v-else&gt;&lt;/i&gt;      &lt;/a&gt;    &lt;/li&gt;    &lt;!-- 当前显示的分页列表 --&gt;    &lt;li      class=&quot;page-item&quot;      v-for=&quot;item in range(minPage, maxPage)&quot;      :key=&quot;item&quot;      :class=&quot;{active: value === item}&quot;    &gt;      &lt;a class=&quot;page-link&quot; @click=&quot;changePage(item)&quot;&gt;{{item}}&lt;/a&gt;    &lt;/li&gt;    &lt;!-- 后一页 --&gt;    &lt;li      class=&quot;paga-item next-page&quot;      :class=&quot;{disabled: value === totalPage, 'no-arrows': noArrows}&quot;     &gt;      &lt;a class=&quot;page-link&quot; arial-label=&quot;Next&quot; @click=&quot;nextPage&quot;&gt;      &lt;!-- 文本内容 --&gt;        &lt;template v-if=&quot;withText&quot;&gt;          Next        &lt;/template&gt;        &lt;i class=&quot;arrow-right&quot; v-else&gt;&lt;/i&gt;      &lt;/a&gt;    &lt;/li&gt;  &lt;/ul&gt;&lt;/template&gt;</code></pre><h2 id="props">props</h2><pre><code class="language-js">props: {  // 颜色主题  type: {    type: String,    default: &quot;primary&quot;,    // 验证`type`的值    validator: value =&gt; {      return [        &quot;default&quot;,        &quot;primary&quot;,        &quot;info&quot;,        &quot;success&quot;,        &quot;danger&quot;      ].includes(value);    }  },  // 是否带有文本内容  withText: Boolean,  // 箭头图标  noArrows: Boolean,  // 页码数  pageCount: {    type: Number,    default: 0  },  // 每页显示的项数  perPage: {    type: Number,    default: 0  },  // 总项数  total: {    type: Number,    default: 0  },  // 当前页码的值  value: {    type: Number,    default: 1  }}</code></pre><h2 id="data">data</h2><pre><code class="language-js">data: {  // 页码列表中显示的页码数量  defaultPagesToDisplay: 5}</code></pre><h2 id="computed">computed</h2><pre><code class="language-js">computed: {  // 颜色主题  paginationClass() {    return `pagination-${this.type}`  },  // 总页码数  toatalPages() {    if (this.pageCount &gt; 0) return this.pageCount;    if (this.total &gt; 0 ) {      return Math.ceil(this.total / this.perPage);    }  },  // 显示的页码按钮数量  pagesToDisplay() {    if (this.totalPages &gt; 0 &amp;&amp; this.totalPages &lt; this.defaultPagesToDisplay) {      return this.totalPages;    } else {      return this.defaultPagesToDisplay;    }  },  // 页码列表中最小的页码数  minPage() {    if (this.value &gt;= this.pagesToDisplay) {      // 定义一个偏移量      const pagesToAdd = Math.floor(this.pagesToDisplay / 2);      // 假定的最大页码数 = 当前页码值 + 偏移量      const newMaxPage = this.value + pagesToAdd;      if (newMaxPage &gt; this.totalPages) {        return totalPages - this.pagesToDisplay + 1;      } else {        // 当前页码值始位处于页码列表的中间位置        return this.value - pagesToAdd;      }    } else {      // 当前页码值小于默认页码列表按钮数量时，最小页码数返回1      return 1;    }  },  // 页码列表中最大的页码数  maxPage() {    if (this.value &gt;= this.pagesToDisplay) {      const pagesToAdd = Math.floor(this.pagesToDisplay / 2);      const newMaxPage = this.value + pagesToAdd;      if (newMaxPage &lt; this.totalPages) {        return newMaxPage;      } else {        return totalPages;      }    } else {      // 当前页码值小于默认页码列表按钮数量时，最大页码数返回显示的页码列表按钮数      return this.pageToDisplay;    }  }}</code></pre><h2 id="methods">methods</h2><pre><code class="language-js">methods: {  // 页码列表数组  range(min, max) {    let arr =[];    for (let i = min; i &lt;= max; i++) {      arr.push(i);    }    return arr;  },  // 跳转页码  changePage(item) {    this.$emit(&quot;input&quot;, item);  },  // 下一页  nextPage() {    if (this.value &lt; this.totalPages) {      this.$emit(&quot;input&quot;, this.value + 1);    }  },  // 上一页  prevPage() {    if (this.value &gt; 1) {      this.$emit(&quot;input&quot;, this.value - 1);    }  }}</code></pre><h2 id="最后">最后</h2><p>想要不断提高自己的技术水平，就不能只满足于写<strong>业务组件</strong>。在写像分页这种<strong>独立组件</strong>的过程中，也让我思考<code>API的设计</code>，以及<code>功能复杂性</code>的问题。无论是多么复杂的组件，大体上都是由prop，event，slot三部分组成。具体的实现，主要还是依靠基础的javascript的能力。<br>此前，我也仿照element写了radio和input组件。希望自己能坚持去写这些独立组件，去发现更大的世界。本文的分页组件<a href="https://github.com/occupy5/my-vue-components/blob/master/src/components/MyPagination.vue" target="_blank" rel="noopener">源码</a>在这儿。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量命名的艺术</title>
      <link href="/2019/07/26/named/"/>
      <url>/2019/07/26/named/</url>
      
        <content type="html"><![CDATA[<p>这是一篇最近翻译的译文<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>（也是我的第二篇译文👏），在文章的部分地方做了少许改动，同时也在原文的基础上增加了一些内容。希望不要误人子弟。Have Fun!</p><blockquote><p>在计算机科学领域里只有两件事可以称之为难事：缓存失效（cache invalidation）和命名问题（naming things）。—— Phil Karlton</p></blockquote><p>关于命名这件事，在某些时候的确是非常困难的。但却值得我们花费精力去研究它。回顾一下，之前你是否看过类似于这样的代码？</p><pre><code class="language-js">const convertObj = (x, y, z) =&gt; {    const k = Object.keys(x);    return k.map((key) =&gt; {        return {            [y]: key,            [z]: x[key],        }    });}</code></pre><p>你能立刻知道它在做些什么吗？当然在你逐行读完这段代码后，可能会理解它想表达什么。但是，如果这段代码中的变量的命名方式更加优雅的话，我们会更容易理解这段内容。</p><p>好的变量命名是非常重要的，尤其是在动态类型语言中，因为没法用已经定义好的变量基本类型去帮助你理解该变量确切的含义。然而，如果能够在动态类型的语言中使用好的命名方法，代码较于静态类型的语言会变得更加易读。</p><p>接下来我将分享一些有关命名方法的基本规则，这些是我这些年来的经验之谈。通过变量不同的基本类型，对比举出一些例子。就让我们先从数组开始吧。</p><h2 id="arrays">Arrays</h2><p>数组对象是有序数据的集合，各项的基本类型大致相同。因为数组包含多个变量值，变量的命名应当是有意义的复数形式。</p><pre><code class="language-js">// 很bad很sad很dramaconst fruit = ['apple', 'banana', 'cucumber'];// 凑合const fruitArr = ['apple', 'banana', 'cucumber'];// 还不错const fruits = ['apple', 'banana', 'cucumber'];// 很好 - &quot;names&quot;暗示数组内容是字符串(strings)const fruitNames = ['apple', 'banana', 'cucumber'];// 优雅const fruits = [{    name: 'apple',    genus: 'malus'}, {    name: 'banana',    genus: 'musa'}, {    name: 'cucumber',    genus: 'cucumis'}];</code></pre><h2 id="booleans">Booleans</h2><p>布尔类型只有2个值，<code>true</code>或者<code>false</code>。变量命名时使用『is』，『has』或者『can』作为前缀，将有助于读者理解变量的类型。</p><pre><code class="language-js">// badconst open = true;const write = true;const fruit = true;// goodconst isOpen = true;const canWrite = true;const hasFruit = true;</code></pre><p>当遇到predicate函数（该函数返回一个boolean值）时，在具名函数之后命名变量会有些烦人。</p><pre><code class="language-js">const user = {  fruits: ['apple']}const hasFruit = (user, fruitName) =&gt; {  user.fruits.includes(fruitName)}// 这个时候应该怎么命名这个boolean变量？const x = hasFruit(user, 'apple');</code></pre><p>由于我们已经给函数名称加了个<code>has</code>的前缀，因此不能再以<code>hasProjectPermission</code>这种形式命名x这个boolean变量。在这种情况下，可以给<code>hasFruit</code>这个函数加上<code>check</code>或者<code>get</code>来修饰谓语(has)。</p><pre><code class="language-js">const checkHasFruit = (user, fruitName) =&gt; {  user.fruits.includes(fruitName)}const hasFruit = checkHasFruit(user, 'apple');</code></pre><h2 id="numbers">Numbers</h2><p>至于数字类型，想想有哪些描述数字的词汇。诸如这些词汇，<code>maximum</code>,<code>minimum</code>,<code>total</code>.</p><pre><code class="language-js">// badconst pugs = 3;// goodconst minPugs = 1;const maxPugs = 5;const totalPugs = 3;</code></pre><h2 id="functions">Functions</h2><p>函数应当使用动词和名词相结合的方式命名，当该函数在对象原型上产生某种行为时，它的名字应当能够体现出这一点。<code>actionResource</code>就是一个值得借鉴的命名格式。例如：<code>getUser</code>。</p><pre><code class="language-js">// baduserData(userId);userDataFunc(userId);totalOfItems(items);// goodgetUser(userId);calculateTotal(items);</code></pre><p>通常情况下，我使用<code>to</code>作为函数名称的前缀来表示转换变量的值。</p><pre><code class="language-js">// I like ittoDollors('euros', 20);toUppercase('a string')</code></pre><p>遍历子项的时候，我经常使用这种惯用的命名方式。当接收函数中的一个参数时，应当使用数组名称的单数形式。</p><pre><code class="language-js">// badconst newFruits = fruits.map(x =&gt; {  doSomething(x);});// goodconst newFruits = fruits.map(fruit =&gt; {  doSomething(fruit)})</code></pre><h2 id="回到开始">回到开始</h2><p>重构一下开头的那段代码</p><pre><code class="language-js">const arrayToObject = (array, id, name) =&gt; {  const arrayList = Object.keys(array);  return arrayList.map((key) =&gt; {      return {          [id]: key,          [name]: array[key]      }  });}</code></pre><h2 id="三省吾身">三省吾身</h2><pre><code class="language-js">// 之前命名 =&gt; rsshub项目// 1. 获取文章列表const list = $('.con_list li h3')      .find('a')      .map((i, e) =&gt; $(e).attr('href'))      .get();// 2. 对遍历出的文章地址链接发出请求const res = await got.get(itemUrl);// 改进命名const articleLists = $('.con_list li h3')      .find('a')      .map((i, list) =&gt; $(list).attr('href'))      .get();const responseData = await got.get(itemUrl);</code></pre><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://hackernoon.com/the-art-of-naming-variables-52f44de00aad" target="_blank" rel="noopener">原文链接</a> <a href="#fnref1" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写给大家看的设计书</title>
      <link href="/2019/07/05/%E5%86%99%E7%BB%99%E5%A4%A7%E5%AE%B6%E7%9C%8B%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B9%A6/"/>
      <url>/2019/07/05/%E5%86%99%E7%BB%99%E5%A4%A7%E5%AE%B6%E7%9C%8B%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>Robin亲密性原则是指：将相关的项组织在一起，移动这些项，使他们的物理位置相互靠近。这样一来，相关的项将被看做凝聚为一体的一个组，而不再是一堆彼此无关的片段。</li></ul></blockquote><hr><blockquote><ul><li>亲密性的思想并不是说所有一切都要更靠近，其真正含义是：如果某些元素在理解上存在关联，或者相互之间存在某种关系，那么这些元素在视觉上也应该有关联。除此以外，其他孤立的元素或元素组则不应存在亲密性。位置是否靠近可以体现出元素之间是否存在关系。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>苏菲的世界</title>
      <link href="/2019/07/05/%E8%8B%8F%E8%8F%B2%E7%9A%84%E4%B8%96%E7%95%8C/"/>
      <url>/2019/07/05/%E8%8B%8F%E8%8F%B2%E7%9A%84%E4%B8%96%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>到了文艺复兴时期，则认为研究大自然现象必须以观察，经验与实验为基础。我们称之为「实证法」。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哲学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础回顾（三）</title>
      <link href="/2019/04/26/review_03/"/>
      <url>/2019/04/26/review_03/</url>
      
        <content type="html"><![CDATA[<p>最近的一段时间，相较于之前还算是写了不少的东西。想要提高技术能力，最主要还是需要不断地练习。在练习的过程中去解决问题，这才是高效的学习方式。不知不觉中自己工作已经将近一年了。一年的时间，不长不短。但仔细想想，有效的时间又有多少呢？我想要在技术这条道路上不断的进步，我害怕自己停滞不前，只是重复业务（其实目前业务也不太多）。</p><p>之前看过一篇文章——<a href="https://juejin.im/post/5a576e98518825734d148a00" target="_blank" rel="noopener">《写代码水平的几个发展阶段》</a>，我也会在想，现在的我处在哪个阶段。可能现在的我还是停留在会用的阶段吧。也仿照element封装了部分页面组件，从一开始看element源码很吃力，到现在大致能理解它的实现方式，这个理解的过程本身也是学习进步的过程。<br>只会使用API，而不去思考。不过是把搬砖换了种形式而已。所以，我倾向于在学习技术时，尝试搞懂它的原理。就像git一样，如果只是单纯的使用不过是几条命令而已。其实搞懂一些原理，不过是让自己更加<strong>清晰过程</strong>而已。</p><h2 id="写的东西">写的东西</h2><h3 id="chuizi-weather">chuizi_weather</h3><blockquote><p>仿照锤子天气app用原生js写的一个简单的页面</p></blockquote><h4 id="css部分">css部分</h4><ul><li>布局：整体使用flex布局，单位：使用vw, vh</li><li>纯css实现switch button</li></ul><pre><code class="language-html">&lt;div class=&quot;switch&quot;&gt;  &lt;input type=&quot;radio&quot; name=&quot;switch&quot; id=&quot;switch-off&quot;&gt;  &lt;input type=&quot;radio&quot; name=&quot;switch&quot; id=&quot;switch-on&quot; checked&gt;  &lt;!-- 切换华氏度和摄氏度 --&gt;  &lt;label for=&quot;switch-off&quot;&gt;°C&lt;/label&gt;  &lt;label for=&quot;switch-on&quot;&gt;°F&lt;/label&gt;  &lt;!-- 切换按钮 --&gt;  &lt;span class=&quot;toggle&quot;&gt;&lt;/span&gt;&lt;/div&gt;</code></pre><pre><code class="language-css">/* 使用一般元素选择符~，实现元素不同状态之间的切换 *//* off,on颜色切换动画 */.switch input:checked~label:nth-of-type(1) {  color: #EFEFEF;}.switch input:checked~label:nth-of-type(2) {  color: #737373;}.switch input~:checked~label:nth-of-type(1) {  color: #737373;}.switch input~:checked~label:nth-of-type(2) {  color: #EFEFEF;}/* 滑动切换动画效果 */.switch input:checked~.toggle {  left: 2px;}.switch input~:checked~.toggle {  left: 46px;}</code></pre><ul><li>伪元素的使用 =&gt; 实现按钮内的样式</li></ul><pre><code class="language-html">&lt;div class=&quot;button refresh&quot;&gt;&lt;/div&gt;</code></pre><pre><code class="language-css">.button {  width: 32px;  height: 32px;  background: #F6F6F6;  border-radius: 50%;  box-shadow:0 0 10px #C9C9C9;  border: 1px solid rgba(0,0,0,0.1);}.refresh {  position: relative;  overflow: hidden;}/* 按钮内圆圈 */.refresh::before {  content: &quot;&quot;;  position: absolute;  width: 50%;  height: 50%;  border-radius: 50%;  border: 2px solid #696969;  /* 垂直水平居中 */  top: 50%;  left: 50%;  transform: translate(-50%,-50%);}/* 竖杠将圆圈分割 */.refresh::after {  content: &quot;&quot;;  position: absolute;  background: #F6F6F6;  width: 10%;  height: 80%;  top: 50%;  left: 50%;  transform: translate(-50%,-50%) rotate(-45deg);}</code></pre><ul><li>css transform =&gt; 卡片翻转动画</li></ul><pre><code class="language-html">&lt;div class=&quot;card&quot;&gt;  &lt;div class=&quot;front&quot;&gt;&lt;/div&gt;  &lt;div class=&quot;back&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><pre><code class="language-css">.front, .back {  backface-visibility: hidden;  transform-style: preserve-3d;  transition: all .5s;}/* 翻转效果 */.back {  transform: rotateY(-180deg);}.flip .back {  transform: rotateY(0deg);}.flip .front {  transform: rotateY(180deg);}</code></pre><h4 id="js部分">js部分</h4><ul><li>fetch</li></ul><pre><code class="language-js">fetch(apiDaily)    .then(response =&gt; {      return response.json()    })    .then(data =&gt; {      //...    })</code></pre><ul><li>使用js对象</li></ul><pre><code class="language-js">// 从api中获取天气数据信息const weatherData = data.results[0];// 获取json中的温度，文本，及天气图标代码const { temperature, text, code } = weatherData.now;// DOM操作currentTemperature.textContent = temperature;textWeather.textContent = text;</code></pre><ul><li>模板字符串 =&gt; 动态加载天气图标</li></ul><pre><code class="language-html">&lt;img src=&quot;&quot; class=&quot;weather-icon&quot;&gt;</code></pre><pre><code class="language-js">let weatherIcon = document.querySelector('.weather-icon')//动态加载天气图标weatherIcon.src = `./icon/${code}.png`;</code></pre><ul><li>classList.toggle() =&gt; 使用原生js实现jquery toggleClass方法</li></ul><pre><code class="language-js">//card翻转flipLeft.addEventListener(&quot;click&quot;, () =&gt; {  flip.classList.toggle('flip')})flipRight.addEventListener(&quot;click&quot;, () =&gt; {  flip.classList.toggle('flip')})</code></pre><h3 id="github">github</h3><h4 id="brooklyn-screensaver">Brooklyn Screensaver</h4><blockquote><p>一个开源的Mac OS屏保程序</p></blockquote><ul><li><a href="https://github.com/pedrommcarrasco/Brooklyn/issues/40" target="_blank" rel="noopener">issues</a> =&gt; Can’t modify configuration</li><li>solve: git proxy的问题，导致brew无法更新。与项目本身无关，故以后提issues前，先全面排查自己环境的问题。</li></ul><h4 id="rsshub">RSSHub</h4><blockquote><p>RSSHub 是一个轻量、易于扩展的 RSS 生成器，可以给任何奇奇怪怪的内容生成 RSS 订阅源</p></blockquote><ul><li>pull requests<ul><li>add 7x24小时快讯</li><li>add 观察者风闻话题</li><li>add 数英网专题内容</li></ul></li></ul><p>这是自己在github上参与的第一个开源项目，收获还是挺多的。学会了使用cheerio爬取网页的信息，和node一些API的使用。以及如何规范的给开源项目提交pr。当解决别人提出的需求，然后被其关注和感谢后。还是有不少的成就感的。</p><h2 id="继续做的">继续做的</h2><p>-[ ] 继续写vue组件库，熟练掌握vue的使用。<br>-[ ] 完成一个完整的TODO App。设计稿参考dribble，后端尝试使用LeanCloud。<br>-[ ] 使用vue重构之前的Chuizi weather。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础回顾（二）</title>
      <link href="/2019/03/28/review_02/"/>
      <url>/2019/03/28/review_02/</url>
      
        <content type="html"><![CDATA[<p>接下来的时间，我会总结几篇js基础知识的文章。可能这些知识点都是老生常谈，网上一搜一大堆。但只有把基础知识打牢，才能在programing这条路上走的更远。一定要理解前端领域的变与不变，不能一味地追逐热门。</p><h2 id="数组去重">数组去重</h2><pre><code class="language-js">  //原数组上操作  //思路：判断数组中每个元素是否与后一个元素相等，如果相等，就使用splice()删除后面的元素  function dup1(arr) {    for (var i = 0; i &lt; arr.length; i++) {      for (var j = i + 1; j &lt; arr.length; j++) {        if (arr[i] === arr[j]) {          arr.splice(j,1);          j--;        }      }    }    return arr;  }  //新数组  //思路：遍历原数组，使用indexOf判断新数组是否包含原数组的每一项，如果没有就push进新数组  function dup2(arr) {    var newArr = [];    for (var i = 0; i &lt; arr.length; i++) {      if (newArr.indexOf(arr[i]) == -1) {        newArr.push(arr[i]);      }    }    return newArr;  }  //使用对象  //思路： 把数组的值存为object的key值，去对象中访问属性  function dup3(arr) {    var newArr = [];    var obj = {};    for (var i = 0; i &lt; arr.length; i++) {      if (!obj[arr[i]]) {        newArr.push(arr[i]);        obj[arr[i]] = 1;      }    }    return newArr;    // return arr.filter(function(item, index, arr) {    //   return obj.hasOwnProperty(item) ? false : (obj[item] = true);    // })  }  //使用filter  function dup4(arr) {    var filterArr = arr.filter(function(item, index, arr) {      return arr.indexOf(item) === index;    })    return filterArr;  }  //箭头函数写法  const filterArr = (arr) =&gt; {    return arr.filter((item, index, arrCurrent) =&gt; arrCurrent.indexOf(item) === index)  }  //ES6 set  function dup5(arr) {    // 也可以使用展开运算符    return Array.from(new Set(arr)) || [...new Set(arr)]  }</code></pre><h2 id="实现multiply-方法">实现multiply()方法</h2><blockquote><p>描述：const a = [1, 2, 3, 4, 5];  a.multiply(); =&gt; [1, 2, 3, 4, 5, 1, 4, 9, 16, 25]</p></blockquote><pre><code class="language-js">// 方法1 =&gt; not good，没有按照要求let multiply = function(arr) {  let multiplyArr = arr.map(num =&gt; num * num);  return arr.concat(multiplyArr);};const a = [1, 2, 3, 4, 5];multiply(a);// 方法2 =&gt; not bad，直接在数组原型上添加方法Array.prototype.multiply = function() {  let multiplyArr = this.map(num =&gt; num * num);  this.push(...multiplyArr);}// 方法3 =&gt; good，在对象上添加方法const pushArr = function(arr, num) {  arr.push(num * num);  return arr;}a.multiply = function() {  return this.reduce(pushArr, this);}// 方法4 =&gt; very good，使用ES6，语句更简洁a.multiply = () =&gt; [...a, ...a.map(num =&gt; num * num)];</code></pre><h2 id="实现extname-描述">实现extname()描述</h2><blockquote><p>描述：对于给定的文件名返回它的拓展名，如emoji.png =&gt; .png</p></blockquote><pre><code class="language-js">// 找到文件名的最后一个『.』，然后返回后面的字符串内容function extname(filename) {  return filename.lastIndexOf('.') &gt; 0 ? filename.slice(filename.lastIndexOf('.')) : '';}</code></pre><h2 id="实现flattened-方法">实现flattened()方法</h2><blockquote><p>描述：对多维数组进行降维操作，如[[1, 2],[3, 4]] =&gt; [1, 2, 3, 4]</p></blockquote><pre><code class="language-js">// 方法1 =&gt; 递归function flattened1(arr) {  let flattenedArr = [];  // 循环传入的数组元素  arr.map(function(item) {    // 如果还是一个数组，就递归调用该方法    if (Array.isArray(item)) {      flattenedArr = flattenedArr.concat(flattened(item));    } else {      flattenedArr.push(item);    }  })  return flattenedArr;}// 方法2 =&gt; toString()// 限制：数组元素只能为数字function flattened2(arr) {  arr.toString().split(',').map(function(item) {    // 类型转换    return +item;  })}// 方法3 =&gt; reduce// 限制：只能降二维的数组function flattened3(arr) {  return arr.reduce((acc, cur) =&gt; acc.concat(cur),[]);}// 方法3改进版function flattened3(arr) {  return arr.reduce((acc, cur) =&gt; {    return acc.concat(Array.isArray(cur) ? flattened3(cur) : cur);  }, [])}// 方法4 =&gt; 扩展运算符// 限制：与方法三一样function flattened4(arr) {  return [].concat(...arr);}// 方法4改进版function flattened4(arr) {  while(arr.some(item =&gt; Array.isArray(item))) {    arr = [].concat(...arr);  }  return arr;}// 思考 =&gt; 结合数组去重和降维的方法，实现数组的并集操作function union(...args) {  return [...new Set([].concat(...args))];}</code></pre><h2 id="使用symbol优化代码">使用Symbol优化代码</h2><blockquote><p>实现一个getArea()方法，返回三角形，圆以及矩形的面积</p></blockquote><pre><code class="language-js">// 原始function getArea(shape, options) {  let area = 0;  switch(shape) {    case 'triangle':      area = .5 * options.width * options.height;      break;    case 'circle':      const Pi = 3.14;      area = Pi * options.width * options.height;      break;    case 'rectangle':      area = options.width * options.height;      break;  }  return area;}getArea('triangle', {width: 100, height: 100});getArea('circle', {width:200, heigth: 200})// 使用symbolconst shapeType = {  triangle: Symbol(),  circle: Symbol(),  rectangle: Symbol()}// 省略部分代码...switch(case) {  case: shapeType.triangle:  case: shapeType.circle:  case: shapeType.rectangle:}getArea(shapeType.triangle, {width: 100, height: 100});getArea(shapeType.circle, {width: 200, height: 200});</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日语入门（1）</title>
      <link href="/2019/03/23/learn_japanese/"/>
      <url>/2019/03/23/learn_japanese/</url>
      
        <content type="html"><![CDATA[<p>学习日语已经有一周多的时间了，这一周的时间主要是基础部分的学习。包括日文的结构，五十音的读写和发音。<br>为什么要学习日语呢？直接原因是，一周前，我看了少数派的一篇文章——<a href="https://sspai.com/post/53020" target="_blank" rel="noopener">《聊一聊50音起源的再设计》</a>。作者是一名独立开发者，对产品设计与体验有着极致的追求。然后我便在ipad上体验了这个app。与其说是一个学习的app，不如说它是一个艺术品。于是，我决定立即学习日语（🆒）。<br>当然也有很多其他的原因，例如日语发音很好听，想要学习ruby，喜欢听日文歌之类的。<br>日式料理马上就要开始了，只有app作为食材是完全不够的。作为一个完全零基础的日语学习者，一开始，我甚至不知道50音是什么。所以我决定在mooc上选择一门入门的课程。mooc上有很多关于日语学习的课程，看了课程的视频简介后，我选择《自由自在日本行》作为我的入门零基础入门课程。一边学习日语，一边还能了解日本的文化与名胜。すごい！</p><h2 id="学习方式">学习方式</h2><p><img src="https://img.5bang.top/japanese1.png" alt="roadmap"></p><h2 id="组成结构">组成结构</h2><p><strong>混合书写</strong>是日本文字表达的特色</p><ul><li>万叶假名： 使用和日语同音的汉字来书写日文，以补足用汉语记录日语假名是相对于『真名（汉字）』而言的，假是『假借』的意思</li><li>日文汉字： 主要用于表达实物的名称和动作</li><li>平假名：日文中表音文字的一种，从万叶假名演化而来，形近汉语草书。主要用来标注日文汉字的注音，还有一些具有语法功能的助词和助动词</li><li>片假名：平安时代初期为了训读<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>汉文发明的。由万叶假名的楷书写法中简化而来。主要用来书写外来语，拟声拟态词</li><li>罗马字：多用于招牌和广告</li></ul><h2 id="日文汉字">日文汉字</h2><p>中国人学习日语，自然是有天然的优势。因为汉语和日语都传承了<strong>古汉字</strong>的字形和字义，而且现代汉语中有很多词也借用了明治时期的<strong>日文翻译语</strong>。但在日文汉字中很多尽管字形和汉语相同，但含义却完全不同。</p><blockquote><p>旅行中常见的日文汉字</p></blockquote><table><thead><tr><th>日文汉字</th><th>中文翻译</th></tr></thead><tbody><tr><td>无料</td><td>免费</td></tr><tr><td>仕度中</td><td>（店铺）还未对外开放</td></tr><tr><td>献立</td><td>菜单</td></tr><tr><td>注文</td><td>点餐</td></tr><tr><td>会计</td><td>结账</td></tr><tr><td>割引</td><td>降价</td></tr></tbody></table><blockquote><p>格外注意的日文汉字</p></blockquote><table><thead><tr><th>日文汉字</th><th>中文翻译</th></tr></thead><tbody><tr><td>手纸</td><td>信</td></tr><tr><td>新闻</td><td>报纸</td></tr><tr><td>娘</td><td>女儿，女孩子</td></tr><tr><td>丈夫</td><td>坚固</td></tr><tr><td>切手</td><td>邮票</td></tr><tr><td>勉强</td><td>学习，用功</td></tr></tbody></table><h2 id="50音学习">50音学习</h2><p>50音是日语学习的基础，但也让初学者很头疼。假名记不住，易记混，这可能是大部分人都要面临的问题。关于假名的记忆方法有很多种，我目前采用的方法是根据词源记忆。当然，你也可以试试<a href="https://www.zhihu.com/question/20318161/answer/53704368" target="_blank" rel="noopener">形象记忆</a>。这里我想强调的是50音起源app的开发者kevin的一句话，『我认为日语学习并不是简单的学习假名，词汇，语法。而是应该是从其背后的文化开始学起，产生共鸣与认同』。</p><h3 id="发音">发音</h3><p>发音也是50音学习过程中非常重要的一部分。好在汉语拼音基本包括了日语的罗马字读音。</p><blockquote><p>音调</p></blockquote><ul><li>口型不变</li><li>音调不变</li></ul><h4 id="清音">清音</h4><p>注意：<br>さ行中</p><table><thead><tr><th style="text-align:center">罗马音</th><th style="text-align:center">平假名</th><th style="text-align:center">片假名</th></tr></thead><tbody><tr><td style="text-align:center">sa</td><td style="text-align:center">さ</td><td style="text-align:center">サ</td></tr><tr><td style="text-align:center">shi</td><td style="text-align:center">し</td><td style="text-align:center">シ</td></tr><tr><td style="text-align:center">su</td><td style="text-align:center">す</td><td style="text-align:center">ス</td></tr><tr><td style="text-align:center">se</td><td style="text-align:center">せ</td><td style="text-align:center">セ</td></tr><tr><td style="text-align:center">so</td><td style="text-align:center">そ</td><td style="text-align:center">ソ</td></tr></tbody></table><p>し =&gt; 发xi的音<br>す =&gt; 发音时要用接近う的口型</p><h4 id="浊音">浊音</h4><p>共有四行，在相对应的清音右上角加两点。口型和舌位与对应的清音一致，声带震动的时间要比清音早一点。<br>注意：<br>za行和da行，有两对假名发音一样，但是在日语单词中<strong>以じ、ず优先</strong>。</p><table><thead><tr><th style="text-align:center">罗马字</th><th>假名</th></tr></thead><tbody><tr><td style="text-align:center">ji</td><td>じジ ＆ ぢヂ</td></tr><tr><td style="text-align:center">zu</td><td>ずズ　＆ づヅ</td></tr></tbody></table><h4 id="半浊音">半浊音</h4><p>在は行的右上角加上一个圈圈</p><p>注意：</p><table><thead><tr><th>假名</th><th>中文翻译</th></tr></thead><tbody><tr><td>かき</td><td>钥匙</td></tr><tr><td>かき</td><td>柿子</td></tr><tr><td>がき</td><td>小淘气鬼</td></tr></tbody></table><h4 id="长音">长音</h4><p>在日语中，元音的长度会影响到单词的意思。长元音的发音长度大致是短元音的两倍，一个假名一拍，长音的长度是两拍。</p><table><thead><tr><th>短音</th><th>长音</th></tr></thead><tbody><tr><td>おばさん（伯母，舅妈，婶婶，阿姨）</td><td>おば<strong>あ</strong>さん（祖母，外祖母）</td></tr><tr><td>おじさん（伯父，叔叔，姑父，舅舅）</td><td>おじ<strong>い</strong>さん（祖父，外祖父）</td></tr><tr><td>いえ（房子）</td><td>い<strong>い</strong>え（不）</td></tr><tr><td>くろ（黑色）</td><td>く<strong>う</strong>ろ（乘飞机）</td></tr><tr><td>ちず（地图）</td><td>チ<strong>ー</strong>ズ（奶酪）</td></tr></tbody></table><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>只借用汉字的形和义，不采用汉语的音 <a href="#fnref1" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> LHTL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日语学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础回顾（一）</title>
      <link href="/2019/03/01/review_01/"/>
      <url>/2019/03/01/review_01/</url>
      
        <content type="html"><![CDATA[<h1>weex开发总结</h1><h2 id="知识方面">知识方面</h2><h3 id="样式">样式</h3><ol><li>只支持像素值</li><li>border不支持组合写法，如border: 1px solid #FFA500</li></ol><pre><code class="language-css">border-style: border-width:border-color:border-radius:</code></pre><ol start="3"><li>weex盒模型的box-sizing默认为<strong>border-box</strong>，故盒子的宽高=内容(content)+内边距(padding)+边框宽度(border)，不包含外边距(<strong>margin</strong>)的宽度</li><li>weex中，flex是默认且唯一的布局模型，故不用再写dispaly:flex</li><li>Weex 目前不支持 <strong>z-index</strong> 设置元素层级关系，但靠后的元素层级更高</li><li>background-image 优先级<strong>高于</strong>background-color，且不能使用<strong>background</strong>简写</li><li>box-shadow不支持android</li></ol><h3 id="vue">vue</h3><ol><li>定义组件时不支持template选项</li><li>不支持使用x-templates</li><li>不支持使用Vue.compile</li><li>不支持事件修饰符，按键修饰符，系统修饰符</li><li>不支持keep-alive：没有<strong>activated</strong>和<strong>deactivated</strong>两个阶段</li></ol><h2 id="业务方面">业务方面</h2><h2 id="拒接订单操作">拒接订单操作</h2><p>使用weex的modal模块，当用户点击拒接订单按钮时，使用confirm()方法，处理用户的逻辑操作。使用prompt(),接收用户填写的拒接理由。</p><pre><code class="language-js">methods: {    refuseOrder(e) {      modal.confirm({      message: '确认拒接此订单？',      okTitle: '确定',      cancelTitle: '取消'    },res =&gt; {        if(res == '确定') {            modal.prompt({                message: '请填写拒接理由',                okTitle: '提交',                cancelTitle: '取消'            },res =&gt; {                if(res == '提交') {                    //提交后的操作                } else if(res == '取消') {                    //取消后的操作                }            })        } else if(res == '取消') {            //取消后的操作        }      })    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>春节回家</title>
      <link href="/2019/02/13/years_03/"/>
      <url>/2019/02/13/years_03/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="💲🎗🌜🌱🎗🌴" />    <label for="pass">💲🎗🌜🌱🎗🌴</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 胡思乱想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac外接显示器那点事</title>
      <link href="/2019/01/24/mac_display/"/>
      <url>/2019/01/24/mac_display/</url>
      
        <content type="html"><![CDATA[<p>最近给macbook新接了个显示器，型号是优派 vx3209-2k。很显然它是个2k的显示器，早就听闻macbook接2k的显示器会出现字体模糊的问题。但是很多东西要自己试过才知道。果不其然，连上显示器后，字体偏小且边缘有些模糊。<br>因为提前做了功课，整体显示效果在意料之中，接下来就是折腾的乐趣了。先在网上搜索相关的文章，发现了诸如系统升级后使用不了还有自定义显示器配置文件此类的问题。有预感到整个过程肯定会很麻烦。但在我踩过一些坑（尝试安装switchResX失败）之后，发现整个过程还是非常简单的。</p><h2 id="设备信息">设备信息</h2><ul><li>macbook 2016(12&quot;)</li><li>macOS 10.14</li></ul><h2 id="最简单的解决方式">最简单的解决方式</h2><p>工具</p><ul><li><a href="https://github.com/syscl/Enable-HiDPI-OSX" target="_blank" rel="noopener">Enable-HiDPI</a></li><li><a href="http://avi.alkalay.net/software/RDM/" target="_blank" rel="noopener">RDM</a></li></ul><ol><li>进入Recovery模式(重启时按住cmd + R)</li><li>打开终端，输入<code>csrutil disable</code></li><li>下载Enable-HiDPI</li></ol><pre><code class="language-shell">curl -o ~/enable-HiDPI.sh https://raw.githubusercontent.com/syscl/Enable-HiDPI-OSX/master/enable-HiDPI.sh</code></pre><ol start="4"><li>修改脚本的权限，<code>chmod +x ~/enable-HiDPI.sh</code></li><li>运行脚本，<code>~/enable-HiDPI.sh</code></li><li>设置参数，例如输入<code>1920*1080</code></li><li>下载RDM</li><li>重启，应用设置</li><li>最后，再次进入终端，输入<code>csrutil enable</code><br>上图：<br><img src="https://img.5bang.top/Xnip2019-01-27_00-35-25.png" alt="RDM"></li></ol><h2 id="相关概念">相关概念</h2><ul><li>retina:一种显示技术，在屏幕上压缩更多的像素点</li><li>ppi:每英寸所拥有的像素数目，即ppi = $\frac{\sqrt{横向^2 + 纵向^2}}{屏幕尺寸(inch)}$</li><li>HiDPI:用软件的方式实现单位面积内的高密度</li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 外接显示器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遇见</title>
      <link href="/2018/12/14/years_02/"/>
      <url>/2018/12/14/years_02/</url>
      
        <content type="html"><![CDATA[<p>今天，距离自己正式工作已过去了整整半年的时间。时间过得真快，竟然都开始使用「年」这个单位了。这半年里，我有那些进步还有哪些不足呢？都是需要静下来去认真思考的。</p><h2 id="成长与迷茫">成长与迷茫</h2><p>先来说说成长吧，几个月的时间里，我接触了很多前端的事物。vue,weex,eros还有jQuery(真香警告)以及rails。业务方面，也写了前台页面，后台管理系统还有app。看似很多，其实主要还是写vue居多。很多页面的实现也主要是依赖一些开源的组件库。<br>从上周开始，我已经开始感觉到自己对一些事物的认知在慢慢的清晰起来。拿vue来说，之前写的一些页面很多是直接复制粘贴element这个库的，当时有很多不懂的地方，现在也大都能理解。还有，vue文档的内容以及一些js原型上的方法，都正在变得越来越清晰。这种感觉很棒，会让我变得更加自信。<br>这半年的时间里，除了读日常的文档之外，我也在读一些书。技术方面有：《javascript高级程序设计》，《图解http》,《交互式web前端开发》。设计方面读了，《写给大家看的设计书》。至于文学（哲学）方面，最近我在读《苏菲的世界》。这本书是给弟弟买的，但很显然他现在很可能读不懂这本书。而且，很多的技术文章和英文杂志读起来也没那么吃力了。<br>关于成长，大概就是能感受到自己一点点的进步以及能大致看清前进的方向。目前来说，在很多时候我的确会有这种感受，所以我在成长。<br>再来说说迷茫，作为双子座（ps:我不背锅）的我经常会兼具自负和自卑两种心理。这种感觉很难受，既伤神又在浪费时间。在什么时候我是自卑的呢？看到高中的同学就读名校 =&gt; 想到自己的学历很糟糕。技术群里的问题我听都没听说过的时候 =&gt; 想到自己的技术很渣。还有一些很简单的需求也实现不了，这个时候我会很自卑。然后胡思乱想浪费时间。至于自负，大概体现在自己在解决一些问题之后或是想到了一些解决问题的方法。</p><h2 id="执行力与焦虑">执行力与焦虑</h2><p>现在我的一个很大的问题就是执行力不够，列在滴答清单的任务很多都没有按时完成，而且注意力很容易会被带偏。比如当我搜索一个知识点时，发现另一个知识点也不是很清楚。然后就会花很多的时间去看这个知识点，导致任务没能及时完成。解决这个问题的方法就是要分清优先级，有很多东西大可不必立刻深究。还是要专注当前的事，一些不懂的东西可以先暂时记在笔记本上。要利用好番茄计时的方法。<br>至于焦虑这件事，感觉是把双刃剑。因为会感觉到自己有很多的不足所以焦虑，但同样焦虑有的时候会让我感到不知所措。其实我很幸运的走在软件开发这条道路上，网上优质的学习资源浩如烟海，完全可以凭借自学来提高自己的技术能力。社区里大牛云集，而且他们还很愿意帮助别人。</p><h2 id="调节能力">调节能力</h2><p>人的精神状态和学习状态就如同天气一样，阴晴不定。不可能一直处在高效的状态。就像最近几天，感觉学习的状态又开始消极起来。总在想其他的事情，周围的诱惑很多（昨天晚上隔壁的云雨声，现在还在耳边回响），导致注意力很难集中<br>对于我来说，专注和自律才能让我不断地进步。一些好的习惯必须要坚持下去。拿周六的事情来说，在我捋清vue组件的通信方式后。之前纸牌马里奥卡住的关卡也能很快过关，这种感觉很舒服。因为之前写css时养成的一些坏习惯，很多东西我总是在试。这是很不好的习惯，因为试的过程中，头脑会感到昏沉。</p><hr><h2 id="19年了">19年了</h2><p>本来想写个年度总结，但发现这篇文章已经写了很多自己的一些想法和做的一些事。之前也看过社区里一些年度总结的文章，会暗暗感慨他们的一年怎么就如此的充实与不同。其实也不必妄自菲薄，重要的是自身的成长与进步。还是像上面提到过的，很多东西我正在感到越来越清晰。当然，还是要经常反省自己的不足。滴答清单里的任务列表还是有很多没能及时的完成，想做的事情还在不断地拖延。这些都是现在还有过去一直存在的问题。<br>19年了，自己也来到了24岁的年龄。很多时候我并不想考虑太多的事情。每天能去解决一些问题，看自己喜欢的书，去运动。快乐也就大抵如此了。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记整理</title>
      <link href="/2018/11/24/this/"/>
      <url>/2018/11/24/this/</url>
      
        <content type="html"><![CDATA[<p>这部分的学习笔记，整理于segmentfault和掘金社区的优质文章</p><h2 id="复杂判断写法的改进">复杂判断写法的改进</h2><h3 id="origin">origin</h3><pre><code class="language-js">const buttonClick = (status) =&gt; {if (status == 1) {sendLog('processing')jumpTo('IndexPage')} else if (status == 2) {sendLog('fail')jumpTo('FailPage')} else if  (status == 3) {sendLog('success')jumpTo('SuccessPage')}}</code></pre><h3 id="v1">v1</h3><pre><code class="language-js">switch(status) {case1: sendLog('processing')jumpTo('IndexPage')break;case2: sendLog('fail')jumpTo('FailPage')break;case3: sendLog('success')jumpTo('SuccessPage')break;}</code></pre><h3 id="v2">v2</h3><pre><code class="language-js">const actions = {  '1': ['processing','IndexPage'],  '2': ['fail','FailPage'],   '3': ['success','SuccessPage']}const buttonClick = (status) =&gt; {  let action = action[status],    logName = action[0],    pageName = action[1]  sendLog(logName)  jumpTo(pageName)}</code></pre><h3 id="v3">v3</h3><pre><code class="language-js">const actions = new Map([  [1, ['processing','IndexPage']],  [2, ['fail','FailPage']],  [3, ['success','SuccessPage']]])const onButtonClick = (status) =&gt; {  let action = actions.get(status)   sendLog(action[0])  jumpTo(action[1])}</code></pre><h3 id="二元判断">二元判断</h3><p>不但需要判断status，而且还需要判断用户的身份</p><pre><code class="language-js">const actions = {  'guest_1':()=&gt;{...},  'guest_2':()=&gt;{...},  //....}const onButtonClick = (identity,status) =&gt; {  let action = actions[`${identity}_${status}`]  action.call(this)}</code></pre><p><a href="https://juejin.im/post/5bdfef86e51d453bf8051bf8" target="_blank" rel="noopener">原文链接</a></p><h2 id="this的指向问题">this的指向问题</h2><h3 id="普通函数">普通函数</h3><p>this的指向无法在函数定义时确定，只有在函数执行时确定this到底指向谁<br>栗子1：</p><pre><code class="language-js">function a() {  var name = &quot;fan&quot;;  console.log(this.name); //undefined  console.log(this); //window}a();</code></pre><p>1中的this指向window，这里this<strong>指向调用它的对象</strong>，函数a实际上是被window对象调用<br>栗子2：</p><pre><code class="language-js">var o = {  name: &quot;fan&quot;,  fn: function() {    console.log(this.name) //fan  }}o.fn();</code></pre><p>2中this指向fan，同1中一样，this<strong>指向调用它的对象</strong>，函数fn被o对象调用<br>栗子3：</p><pre><code class="language-js">var o = {  name = &quot;fan&quot;,  fn: function() {    console.log(this.name) //fan  }}window.o.fn();</code></pre><p>按照之前的结论，this指向调用它的对象，这里应该指向window =&gt; 事实却指向了o</p><ol><li>如果一个函数有this，但没有被上一级的对象调用，this指向window（非严格模式）</li><li>如果一个函数有this，被上一级对象调用，this指向上一级对象<br>栗子4（特殊情况）</li></ol><pre><code class="language-js">var o = {  a: 10,  b: {    a:12,    fn: function() {      console.log(this.a) //undefined    }  }}var c = o.b.fn; //这里的fn没有被执行c();</code></pre><p>this指向的是<strong>最后调用它的对象</strong>，也就是看它执行的时候是谁调用的，4中将fn赋值给变量c时并没有执行<br>栗子5（显式绑定）</p><pre><code class="language-js">function foo () {  console.log(this.a)}var obj = { a: 1 }var a = 2foo() //2foo.call(obj) //1foo.apply(obj) //1foo.bind(obj) //不会执行</code></pre><h3 id="箭头函数">箭头函数</h3><p>箭头函数无法绑定this关键字，所以会自动向上层作用域寻找this，并使用上一层的this</p><pre><code class="language-js">//普通函数var obj = {  id: 42,  counter: function counter() {    setTimeout(function() {      console.log(this.id);    }, 1000); //undefined  }};</code></pre><pre><code class="language-js">//箭头函数var obj = {  id: 42,  counter: function counter() {    setTimeout(() =&gt; {      console.log(this.id);    }, 1000); //42  }};</code></pre><h3 id="综合练习">综合练习</h3><pre><code class="language-js">var name = 'window'var person1 = {  name: 'person1',  foo1: function () {    console.log(this.name)  },  foo2: () =&gt; console.log(this.name),  foo3: function () {    return function () {      console.log(this.name)    }  },  foo4: function () {    return () =&gt; {      console.log(this.name)    }  }}var person2 = { name: 'person2' }person1.foo1() // person1person1.foo1.call(person2) // person2person1.foo2() // windowperson1.foo2.call(person2) // windowperson1.foo3()() // windowperson1.foo3.call(person2)()person1.foo3().call(person2)person1.foo4()() // preson1person1.foo4.call(person2)()person1.foo4().call(person2)</code></pre><h2 id="文章参考">文章参考</h2><ul><li><a href="http://web.jobbole.com/88264/" target="_blank" rel="noopener">原文链接1</a></li><li><a href="https://github.com/RicardoCao-Biker/RICO-BLOG/issues/12" target="_blank" rel="noopener">原文链接2</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>霜失忆</title>
      <link href="/2018/11/11/daily_05/"/>
      <url>/2018/11/11/daily_05/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="💲🎗🌜🌱🎗🌴" />    <label for="pass">💲🎗🌜🌱🎗🌴</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6</title>
      <link href="/2018/10/30/ES6/"/>
      <url>/2018/10/30/ES6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>terminal折腾记之Mac篇</title>
      <link href="/2018/10/20/terminal/"/>
      <url>/2018/10/20/terminal/</url>
      
        <content type="html"><![CDATA[<p>作为除了编辑器，浏览器之外，每天接触<strong>第二多</strong>的东西——终端。是要来好好折腾一番了。之前，我就下载了oh-my-zsh。但是使用的一直是它的默认主题——robbyrussell。这个主题，其实很不错了，相比于自带的zsh已经是非常的简洁美观。可是身为一个前端er,不折腾怎么能行了🌊。</p><h2 id="折腾前的准备">折腾前的准备</h2><ol><li><a href="https://www.iterm2.com/downloads.html" target="_blank" rel="noopener">iTerm2</a></li><li><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a></li><li><a href="https://github.com/powerline/fonts" target="_blank" rel="noopener">powerline font</a></li></ol><p>具体的安装步骤，就不再赘述了，大家可以去文档里查看。</p><h2 id="需要做的配置">需要做的配置</h2><h3 id="iterm颜色主题">iTerm颜色主题</h3><p>这个<a href="https://github.com/mbadolato/iTerm2-Color-Schemes" target="_blank" rel="noopener">主题库</a>包含了170+种主题。可以把文件下载到本地，然后导入到color presets中就好了（使用快捷键cmd + i）。</p><h3 id="zsh主题">zsh主题</h3><p>我使用的是<a href="https://github.com/bhilburn/powerlevel9k" target="_blank" rel="noopener">powerlevel9k</a>,它可以对终端进行进一步的个性化定制，就像这样🌰。<br><img src="https://img.5bang.top/power1.png" alt="power1"></p><p>当然你还可以这样。</p><p><img src="https://img.5bang.top/power2.gif" alt="power2"></p><h4 id="安装powerlevel9k">安装powerlevel9k</h4><ol><li>clone主题的仓库地址</li></ol><pre><code class="language-shell">$ git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</code></pre><ol start="2"><li>在.zsh中设定主题</li></ol><pre><code class="language-shell">ZSH_THEME=&quot;powerlevel9k/powerlevel9k&quot;</code></pre><h2 id="zsh相关插件">zsh相关插件</h2><ul><li><a href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="noopener">zsh-autosuggestions</a></li><li><a href="https://github.com/zsh-users/zsh-syntax-highlighting" target="_blank" rel="noopener">zsh-syntax-highlighting</a></li></ul><p>这是我推荐的两个插件，当然，你也可以添加一些其他的插件。具体<a href="https://github.com/zsh-users" target="_blank" rel="noopener">地址</a>在这里。</p><h3 id="安装zsh插件的两种方式">安装zsh插件的两种方式</h3><h4 id="oh-my-zsh方式">oh-my-zsh方式</h4><ol><li>clone插件的仓库地址</li></ol><pre><code class="language-shell">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting</code></pre><ol start="2"><li>在~/.zshrc中找到plugins,添加这个插件</li></ol><pre><code class="language-shell">plugins = (    git    rails    zsh-autosuggestions)</code></pre><h4 id="zshrc方式">.zshrc方式</h4><ol><li>同上</li><li>在.zshrc中添加一行</li></ol><pre><code class="language-shell">source ./zsh-syntax-highlighting/zsh-syntax-highlighting.</code></pre><h2 id="其他">其他</h2><h3 id="隐藏用户信息">隐藏用户信息</h3><p>打开终端后会发现，总是有一段长长的用户信息前缀。感觉有些多余，我们如何来隐藏它呢。记得之前使用robbyrussell主题时是没有的，所以很有可能是主题文件的原因。于是打开powerlevel9k.zsh-theme文件（注意看上文clone的路径）。</p><pre><code class="language-shell"># Note that if $DEFAULT_USER is not set, this prompt segment will always print</code></pre><p>所以解决的方法就是在.zshrc中设置默认用户名就好了。</p><h3 id="vs-code配置">vs code配置</h3><p>完成以上步骤之后，一个颜值又高又好用的terminal就此诞生了。让我们打开vs code，撸起袖子加油干吧。等下，乱码又是什么桂？原来是忘记设定终端字体了，打开settings.json文件，把下面这行加上去就好了。</p><pre><code class="language-shell">&quot;terminal.integrated.fontFamily&quot;: &quot;Meslo LG M（你使用的字体） for Powerline&quot;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个雨天</title>
      <link href="/2018/10/13/weeks_05/"/>
      <url>/2018/10/13/weeks_05/</url>
      
        <content type="html"><![CDATA[<p>又是一个下雨天，初秋的西安早已凉意习习。自己一个人独自在房间里面，还会感到一些阴冷。</p><p>说好的午休，醒来都已经是大半下午了。今天遇到的问题还不少，好在都已经解决了。想想，心里还有些成就感。预约系统添加了分页功能和解决了错误提示引起页面偏移的问题。壁挂炉水压一直下降，打开补水阀门，水压正常后又缓慢下降。反复出现EP故障代码，在网上搜索相关的错误信息，发现需要打开补水阀进行补水。也基本上解决了这个问题。</p><hr><p>还是一个下雨天，只是时间却过了整整一周。现在是凌晨将近两点钟，因为午休睡得太晚，现在也没有什么睡意。窗外的雨声淅淅沥沥。</p><p>刚过去的几个小时里，我在折腾终端。下载了iTerm2,配合oh-my-zsh,加上solarized color scheme完成了一个高颜值好用terminal的搭建。主要在读oh-my-zsh的plugin和theme的文档，安装方式以及脚本代码。还有下载了一些字体，果然mac上的字体大都非常的好看。期间也遇到了一些问题，比如隐藏用户名，还有powerline字体的安装等等。</p><p>工作已经4个月有余，现在我还是没有自信说自己是一个coder。有的时候，情绪会非常的低迷与消极，总觉得自己很多都不会，每天浪费了很多的时间。现在的工作，压力一点也不大。不知道，这是一件好事情还是不好的事情。每天有大量学习的时间，却没有把握住，总是稀里糊涂的就度过了一天。</p><p>仔细想想，onetab中有很多收藏的技术文章还没有去读，github上每天也有很多有意思的项目产生。还有自己的blog,虽然写了些东西，但一直都没更新。这些都是需要拿时间完成的。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 胡思乱想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vh,vw知多少</title>
      <link href="/2018/09/22/viewport/"/>
      <url>/2018/09/22/viewport/</url>
      
        <content type="html"><![CDATA[<p>最近在写公司的官网，需要加一个地图的功能。需求方面要兼容pc端和移动端，便不得不考虑屏幕尺寸适配的问题。本来之前的方案是使用媒体查询(media query)，但是相应的代码量会增加。最终，我采用的是vh,vw的方式。这是一种比较讨巧的方式，代码量极小，实际的效果也是可以接受的。</p><p>这篇文章的目的有两个，一是系统的学习总结css3的单位vw,vh。二是，回顾并学习自适应布局的其他解决方案。</p><h2 id="什么是vw-vh">什么是vw,vh</h2><h3 id="定义">定义</h3><p>vw,vh是css3中新引入的单位。与视图窗口(viewport)有关，vw是相对于视图窗口的宽度，vh则是相对于视图窗口的高度。除此之外，还有vmin,vmax两个单位。</p><table><thead><tr><th>单位</th><th>含义</th></tr></thead><tbody><tr><td>vw</td><td>视口宽度是100vw</td></tr><tr><td>vh</td><td>视口高度是100vh</td></tr><tr><td>vmin</td><td>vw和vh中的较小值</td></tr><tr><td>vmax</td><td>vw和vh中的较大值</td></tr></tbody></table><h3 id="换算">换算</h3><p>拿iphone6(375*667)为例,将布局视口设置为分辨率大小,px与vw之间有如下的换算关系：<br><code>1px = (1/375) * 100 vw</code></p><h3 id="scss函数">scss函数</h3><pre><code class="language-scss">// iphone6作为设计稿$vw_base: 375;@function vw($px) {    @return ($px / 375) * 100vw;}</code></pre><h3 id="兼容性">兼容性</h3><p>可以参照 <a href="https://caniuse.com/#search=vw" target="_blank" rel="noopener">can I use</a>，可以看出对于主流的浏览器大都是支持的。</p><p><img src="https://img.5bang.top/vw.png" alt="vw"></p><h2 id="其他自适应布局解决方案">其他自适应布局解决方案</h2><h3 id="media-query">media query</h3><p>使用media query可以对于不同的媒体类型，来写不同的样式</p><h3 id="百分比">百分比</h3><p>实现一个长宽比为4:3的长方形，使用padding属性</p><pre><code class="language-html">    &lt;div class=&quot;rectangle&gt;&lt;/div&gt;</code></pre><pre><code class="language-css">    .rectangle {        height:0;        width: 100%;        padding-top: 75%    }</code></pre><h3 id="rem布局">rem布局</h3><p>核心：动态改变根元素的大小<br>px2rem()函数</p><pre><code class="language-scss">// 37.5px是设计稿(iphone8)宽度的1/10@function px2rem($px) {    $rem: 37.5px;    @return ($px / $rem) + rem;}</code></pre><pre><code class="language-js">// 根据屏幕宽度来修正html的字体的大小// 获取设备屏幕宽度let htmlWidth = window.screen.width;// 根元素let htmlDom = document.getElementsByTagName('html')[0];htmlDom.style.fontSize = htmlWidth/10 + 'px';</code></pre><h3 id="rem搭配vw布局">rem搭配vw布局</h3><ol><li>给根元素设置vw单位，实现动态改变其大小</li><li>限制最大最小宽度</li></ol><pre><code class="language-scss">// rem 单位换算$vw_fontsize: 75; // iphone6尺寸的根元素基准值</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端适配 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="/2018/07/21/weeks_03/"/>
      <url>/2018/07/21/weeks_03/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="💲🎗🌜🌱🎗🌴" />    <label for="pass">💲🎗🌜🌱🎗🌴</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式基础</title>
      <link href="/2018/07/14/RegExp/"/>
      <url>/2018/07/14/RegExp/</url>
      
        <content type="html"><![CDATA[<h2 id="创建正则表达式">创建正则表达式</h2><h3 id="构造函数">构造函数</h3><pre><code class="language-javascript">let reg = new RegExp(&quot;^[a-zA-Z]&quot;,'g');let reg = new RegExp(&quot;/^[a-zA-Z]/,'g');</code></pre><h3 id="创建字面量">创建字面量</h3><pre><code class="language-javascript">let reg = /^[a-zA-Z]/;</code></pre><h2 id="参数">参数</h2><p><strong>g</strong> 全局匹配<br><strong>i</strong> 匹配全部大小写<br><strong>m</strong> 多行匹配<br><strong>s</strong> 单行匹配</p><h2 id="规则">规则</h2><p>. 任意字符<br>\d 0-9<br>\D 除\d外的字符<br>\w 0-9,a-z,A-Z,或者下划线<br>\W 除\w外的字符<br>\s 空格符，tab，换页或换行</p><h2 id="范围">范围</h2><p>[…] 匹配字符范围之内的<br>[^…] 匹配字符范围以外的<br>^ 匹配以此开头的<br>$ 匹配以此结尾的</p><h2 id="常用方法">常用方法</h2><ol><li>test()方法，检索字符串的值是否匹配给定规则，返回true或false</li></ol><pre><code class="language-javascript">    /\d\d/.test('12');  //true</code></pre><ol start="2"><li>exec()方法，检索字符串中的指定值，如果找到匹配的文本，返回一个结果数组，否则返回null</li></ol><pre><code class="language-javascript">    /123/.exec('112123');  //[&quot;123&quot;,index: 3,input: &quot;112123&quot;]</code></pre><ol start="3"><li>compile()方法，改变正则匹配的内容</li></ol><pre><code class="language-JavaScript">    /123/.compile('456');  // /456/</code></pre><ol start="4"><li>split()方法，将字符串分割为字符串数组</li></ol><pre><code class="language-javascript">    &quot;abcd&quot;.split(/b/);  // [&quot;a&quot;,&quot;cd&quot;]</code></pre><ol start="5"><li>replace()方法，在字符串中用一些字符替换另一些字符</li></ol><pre><code class="language-javascript">    &quot;12345abcde&quot;.replace(/\d\d\d/g,'*');  //&quot;*45abcde&quot;    &quot;123  45&quot;.replace(/\s/g,'');  //&quot;12345&quot;</code></pre><ol start="6"><li>search()方法，检索匹配的字符串，返回起始位置的索引</li></ol><pre><code class="language-javascript">    &quot;abcde&quot;.search(/c/); //2    &quot;abcde&quot;.search(/f/); //-1</code></pre><h2 id="常用匹配">常用匹配</h2><ol><li>13开头的手机号</li></ol><pre><code class="language-js">/^(1)3{9}$/</code></pre><ol start="2"><li>某些号段的手机号验证</li></ol><pre><code class="language-js">/^1(88|70|56)\d{8}$/</code></pre><ol start="3"><li>下划线和驼峰相互转换</li></ol><pre><code class="language-js">// 驼峰转下划线，遇到大写字母时转化为小写字母，并在前面加上下划线，$1表示第一个字符串匹配replace(/([A-Z])/g, '-$1').toLowerCase()// 下划线转驼峰,\w表示下划线replace(/\-(\w)/g, function(all, letter) {    return letter.toUpperCase()})</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学会学（2）</title>
      <link href="/2018/05/30/lhtl_2/"/>
      <url>/2018/05/30/lhtl_2/</url>
      
        <content type="html"><![CDATA[<p>突然发现，已经有两个月没有在博客上写东西了。之前一直想写的学会学的系列文章，眼看就要烂尾了。人一定要坚持一些东西，这样以后才不会总是后悔。而写文章，做前端就是我想坚持的事。</p><p>没写文章的这两个月里，我主要在找工作，准备论文，还有完成IFE的任务。今天，我想结合最近的一些学习情况，来写《学会学》系列的第二篇文章。</p><p>这段时间主要是做IFE的任务，再者就是学习node。先说说IFE，虽说学习前端也有半年的时间了，但还是感觉什么都不会。具体体现在做任务时，总显得力不从心。Day9-11做一个静态网站的任务，我用了一个多星期才写完，而且在这个过程中还大量参考了<strong>dpyzo0o</strong>同学的代码。坦白讲，这是我第一次根据设计稿来写一个完整的页面，所以遇到这些困难都是很正常的。原因在于之前练习的太少，而且整个学习的体系也不够系统。</p><p>到目前为止，我已经完成了IFE前16天的内容。大概完成了已发布任务的一半。这是必须要坚持做下去的，回想以前我也花了不少的时间来学习java。我在图书馆借了好几本关于java的书，而且也在mooc上学习北京大学的《java程序设计》这门课程。但是现在已经忘得差不多了。可能以后我还是会继续学习java，但这绝不是这个阶段我要做的事，现阶段我的目标就是学好JavaScript。其他的都不要多想，毕竟能力摆在这里。</p><p>还有一件事自己也必须清楚，看清自己所处的位置也是非常重要的。拿《学会学》这门课程来说吧，里面的确有很多的学习方法和技巧很有用。像睡觉之前把学习的内容重新梳理一遍，问题解决不了的时候转移下注意力等等。最重要的事是先去做，如果我把很多的时间都浪费在刷网易云，虎扑上，这些学习方法的运用便无从谈起。目前而言，我的起点太低了，所以不能奢求一下就能得到，只求每天一点点的进步。</p><p>再来谈谈学习node,我的毕业设计是基于node校园资助系统的设计与实现，这个题目是我自己命题的（就是这么🆒）。当时的目的是想在学习node时，顺便把毕设也一并给做了。所谓的learn by doing。但事实是我几乎完全照搬了一个GitHub的项目。又回到了刚才所说的，我没有看清自己所处的位置。javascript还没弄懂，又去折腾node。对我而言自然是很困难的。</p><p>接下来一个阶段的任务还是继续完成IFE的作业，把66天的学习任务坚持下来。还有，就是必须重视总结。到目前为止，我只写了一篇的学习笔记。尽快把之前的学习笔记都补上来。</p><p>马上就要到6月份了，又到了一年的高考季和毕业季。匆匆四年，一晃而逝。前几天我还把高中毕业时和舍友合照的一些照片跟手机里刚拍的身穿学士服的照片比较，“还是什么都没变嘛”。</p>]]></content>
      
      
      <categories>
          
          <category> LHTL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>58笔试总结</title>
      <link href="/2018/04/16/interview_03/"/>
      <url>/2018/04/16/interview_03/</url>
      
        <content type="html"><![CDATA[<p>昨天做了58的在线笔试题，题很基础。但完成的还是不够好，许多题目涉及的知识点，我总是浅尝则止。现在，静下心来，再查查资料。把题再做一遍。</p><h2 id="图片懒加载">图片懒加载</h2><h3 id="通过data-src来加载图片">通过data-src来加载图片</h3><pre><code class="language-html">&lt;div id=&quot;div1&quot;&gt;    &lt;ul&gt;        &lt;li data-src=&quot;test1.jpg&quot;&gt;&lt;/li&gt;        &lt;li data-src=&quot;test2.jpg&quot;&gt;&lt;/li&gt;        &lt;li data-src=&quot;test3.jpg&quot;&gt;&lt;/li&gt;    &lt;/ul&gt;&lt;/div&gt;</code></pre><pre><code class="language-javascript">function setImg(index) {    var aLi = document.getElementByName('li');    if(aLi[index].childNodes.length == 0) {        if(ali[index].dataset) {            var src = aLi[index].dataset.src;        } else {            //不支持dataset时的处理方法            var src = aLi[index].getAttribute('data-src');        }    var oImg = document.createElement('img');    oImg.src = src;    aLi[index].appendChild(oImg);    }}</code></pre><h3 id="获取元素距离页面顶部的距离">获取元素距离页面顶部的距离</h3><pre><code class="language-JavaScript">function getH(el) {    var h = 0;    while(el) {        h += el.offsetTop;        el = el.offsetParent;    }    return h;}</code></pre><h3 id="组装">组装</h3><pre><code class="language-javascript">window.onscroll = function() {    var aLi = document.getElementByName('li');    for(var i = 0, l = aLi.length; i &lt; l; i++) {        var oLi = aLi[i];        var t = document.documentElement.clientHeight + (document.documentElement.scrollTop || document.body.scrollTop);        var h = getH(oLi);        if(h &lt; t) {            setTimeout(&quot;setImg(&quot; + i + &quot;)&quot;,500)        }    }};window.onload = function() {    windows.onscroll();};</code></pre><h2 id="列举常见的跨域方法-以及jsonp不能进行post请求的原因">列举常见的跨域方法，以及jsonp不能进行post请求的原因</h2><h3 id="document-domain">document.domain</h3><p>适用于主域相同，子域不同的情况,通常做法是通过一个iframe加载跨域页面资源</p><pre><code class="language-JavaScript">var test = window.open('http://test.5bang.top/');</code></pre><h3 id="location-hash">location.hash</h3><p>通过<strong>设置</strong>/<strong>监听</strong>url的hash部分，来实现跨域</p><h3 id="window-name"><a href="http://window.name" target="_blank" rel="noopener">window.name</a></h3><p>window.name用来获取/设置窗口的名称，将跨域的window.name通过重定向到同域页面进行读取</p><h3 id="jsonp">jsonp</h3><p>允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback作为函数名来包裹住json数据</p><pre><code class="language-JavaScript">function todo(data) {    console.log('my name is' + data.name);} var script = document.createElement('script');  //script标签只支持getscript.src = 'http://5bang.top/name?callback=todo';  //callback参数用来指定回调函数的名字document.body.appendchild(script)</code></pre><h3 id="postmessage">postMessage</h3><p>window.postMessage是html5中基于事件消息的API</p><h3 id="websocket">webSocket</h3><p>一种html5的协议，实现了浏览器与服务器的全双工通信。</p><h3 id="cros">CROS</h3><p>服务器返回的头部信息包含Access-Control-Allow-Origin: domain-name(允许跨域的域名)，浏览器就会允许此次跨域请求</p><h2 id="解决callback地狱问题-反复嵌套-写出js实现异步的方法">解决callback地狱问题（反复嵌套），写出js实现异步的方法</h2><h3 id="callback-hell">callback hell</h3><pre><code class="language-js">fetch('http://www.somepage.com', function(firstError, firstResponse, firstBody) {    if(firstError) {        // handle error    } else {        fetch(`http://www.somepage.com/${firstBody.someValue}`, function(secondError, secondResponse, secondBody) {            if(secondError) {                // handle error            } else {                // use secondBody for something            }        })    }})</code></pre><h3 id="promise">promise</h3><h4 id="promise实例">promise实例</h4><pre><code class="language-js">    const promise = new Promise(function(resolve,reject){        //        if(/*异步操作成功*/) {            resolve(value);        } else {            reject(error);        }    })</code></pre><ul><li>resolve()：将promise对象的状态由未完成变为成功(pending =&gt; resolved)，在异步操作成功时调用，并将异步操作的结果作为参数传递出去</li><li>reject()： 将promise对象的状态由未完成变为失败(pending =&gt; rejected)，在异步操作失败时调用，并将异步操作报出的错误作为参数传递出去</li></ul><h4 id="then">then()</h4><pre><code class="language-js">    promise.then(function(value){        //success    },function(error){        //error    })</code></pre><h4 id="解决callback-hell">解决callback hell</h4><h3 id="generator">generator</h3><h2 id="两种清除浮动的方法-以及它们有什么缺点">两种清除浮动的方法，以及它们有什么缺点</h2><p>浮动元素脱离常规文档流之后，原来紧跟其后的元素就会在空间允许的情况下，向上提升到与浮动元素平起平坐</p><h3 id="clear-both">clear: both</h3><h3 id="overflow-hidden">overflow: hidden</h3><h3 id="after伪元素">:after伪元素</h3><h2 id="针对移动端设备的布局方式">针对移动端设备的布局方式</h2><h2 id="实现一个插件-当鼠标移动到文本时-显示一个文本输入框">实现一个插件，当鼠标移动到文本时，显示一个文本输入框</h2><h2 id="实现一个sum-函数-接收任意参数-然后柯里化sum">实现一个sum()函数，接收任意参数,然后柯里化sum()</h2><pre><code class="language-js">function sum(...args) {    return args.reduce((prev, next) =&gt; prev + next)}sum(1, 2, 3); //6// 柯里化sum(1, 2, 3) =&gt; sum(1)(2)(3)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学会学（1）</title>
      <link href="/2018/04/04/lhtl_1/"/>
      <url>/2018/04/04/lhtl_1/</url>
      
        <content type="html"><![CDATA[<p>很久没有写文章了，这段时间一直在忙着找工作的事。的确，前一段时间状态也不太好。总是会感觉焦虑，没有拿到理想offer的心情总不是那么痛快。<br>也会在静下心的时候，去思考一些东西。自己为什么会处在现在的一个境地。前段时间，我总在感慨一个公司的笔试。笔试的内容都是我借过的那本红宝书里的。可是，我还是表现的一塌糊涂。这也促使我重新去思考“学习”这件事。于是，我在学堂在线选修了Learning How To Learn这门课。对于这门课，我会写一个系列专题的文章。记录这门课的内容和自己的一些想法。</p><h2 id="什么是学习">什么是学习</h2><h3 id="大脑的学习原理">大脑的学习原理</h3><p>大脑图谱 =&gt; 学习的记忆和思考过程</p><h3 id="两种基本的认知模式">两种基本的认知模式</h3><h4 id="focused-专注模式">Focused(专注模式)</h4><h4 id="diffuse-发散模式">Diffuse(发散模式)</h4><h3 id="大脑的讯息接受与处理方式">大脑的讯息接受与处理方式</h3><h4 id="多感官整合">多感官整合</h4><table><thead><tr><th>视觉</th><th>听觉</th><th>嗅觉</th><th>触觉</th><th>味觉</th></tr></thead><tbody><tr><td>83%</td><td>11%</td><td>3.5%</td><td>1.5%</td><td>1%</td></tr></tbody></table><h4 id="双闪烁错觉">双闪烁错觉</h4><p>描述: 快速闪现一次的光点，在光点闪现的同时，发出两个声响哔哔 =&gt; 大部分观众认为闪了一次的光点闪了两下<br>快速闪现两次光点,只发出一声哔 =&gt; 大部分观众仍然看到了两次闪的光点<br>结论: 声音会帮助我们区别发生的事件,却不会帮我们把事件融合起来</p>]]></content>
      
      
      <categories>
          
          <category> LHTL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式实现弹窗</title>
      <link href="/2018/04/04/singleton/"/>
      <url>/2018/04/04/singleton/</url>
      
        <content type="html"><![CDATA[<h2 id="单例模式">单例模式</h2><blockquote><p>一个类仅有一个实例，并提供一个全局的访问点 =&gt; <strong>业务场景</strong> 账号注册时，一个号码重复注册会提示错误信息</p></blockquote><h3 id="步骤">步骤</h3><ol><li>获取一个DOM对象</li></ol><pre><code class="language-javascript">var $ = function(id) {    return typeof id === 'string' ? document.getElementById(id) : id;};</code></pre><ol start="2"><li>弹框构造函数</li></ol><pre><code class="language-javascript">var Modal = function(id,html) {    this.html = html;    this.id = id;    this.open = false; };</code></pre><ol start="3"><li>open方法</li></ol><pre><code class="language-javascript">Modal.prototype.create = function() {    if (!this.open) {        var modal = document.createElement('div');                modal.innerHTML = this.html;        modal.id = this.id;        document.body.appendChild(modal);             setTimeout(function() {            modal.classList.add('show');        },0);        this.open = true;    }};</code></pre><ol start="4"><li>close方法</li></ol><pre><code class="language-javascript">Modal.prototype.delete = function() {    if (this.open) {        var modal = $(this.id);        modal.calssList.add('hide');        setTimeout(function() {            document.body.removeChild(modal);        },200);        this.open = false;    }};</code></pre><ol start="5"><li>创建实例</li></ol><pre><code class="language-javascript">var createIntance = (function() {    var instance;    return function() {        return instance || (instance = new Modal('modal','这是一个弹窗'))    }}) ();</code></pre><ol start="6"><li>按钮操作</li></ol><pre><code class="language-javascript">var operate = {    setModal: null,    open: function() {        this.setModal = createIntance();        this.setModal.create();    },    delete: function() {        this.setModal ? this.setModal.delete() : '';    }};</code></pre><ol start="7"><li>绑定事件</li></ol><pre><code class="language-javascript">$('open').onclick = function() {    operate.open();};$('delete').onclick = function() {    oprate.delete();}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端笔试题整理（牛客网）</title>
      <link href="/2018/03/20/interview_02/"/>
      <url>/2018/03/20/interview_02/</url>
      
        <content type="html"><![CDATA[<ol><li>请使用两种不同的CSS方法（要求dom结构不同）实现下图所示的条形图。从左到右的条形分别记为A,B,C,D,E。A的高度为30%，颜色为#f00；B的高度为50%，颜色为#ddd；C的高度为70%，颜色为#0fd；D的高度为50%，颜色为#ff0；E的高度为30%，颜色为#234，每个条形之间的距离可以任意设置（可以考虑使用CSS3新属性来实现）。</li></ol><ul><li>用margin方法来对齐底部</li></ul><pre><code class="language-html">&lt;div class=&quot;container&quot;&gt;    &lt;div class=&quot;item item1&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item item2&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item item3&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item item4&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;item item5&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;style&gt;.container {    height: 100px;    width:200px;    position: relative;}.item {    width: 10px;    position: absolute;}.item1 {    height: 30%;    top: 70%;    background-color: #f00;    left: 10px;}.item2 {    height: 50%;    top: 50%;    background-color: #ddd;    left: 30px;}.item3 {    height: 70%;    top: 30%;    background-color: #0fd;    left: 50px;}.item4 {    height: 50%;    top: 50%;    background-color: #ff0;    left: 70px;}.item5 {    height: 30%;    top: 70%;    background-color: #234;    left: 90px;}&lt;/style&gt;</code></pre><ul><li>弹性盒子</li></ul><pre><code class="language-html">&lt;div class=&quot;container&quot;&gt;    &lt;div class=&quot;flex-box&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;flex-box&quot;&gt;&lt;/div&gt;     &lt;div class=&quot;flex-box&quot;&gt;&lt;/div&gt;     &lt;div class=&quot;flex-box&quot;&gt;&lt;/div&gt;     &lt;div class=&quot;flex-box&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;style&gt;.container {    width: 200px;    height: 100px;    margin: 0 auto;    display: flex;    justify-content: space-around;    align-items: flex-end;}.flex-box {    width: 10px;}.flex-box:nth-child(1) {    height: 30%;    background-color: #f00;}.flex-box:nth-child(2) {    height: 50%;    background-color: #ddd;}.flex-box:nth-child(3) {    height: 70%;    background-color: #0fd;}.flex-box:nth-child(4) {    height: 50%;    background-color: #ff0;}.flex-box:nth-child(5) {    height: 30%;    background-color: #234;}&lt;/style&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九联科技笔试总结</title>
      <link href="/2018/03/15/interview_01/"/>
      <url>/2018/03/15/interview_01/</url>
      
        <content type="html"><![CDATA[<p>尽管自己看上去每天都在做一些东西，但还是感觉很虚。拿今天的笔试题来说吧，很多都是基础的知识点，但还是答的不够好。现<br>在做一个总结，也顺带复习一下之前学的内容。不管怎么样，有些细节还是需要多注意(今天笔试时，字写得的确是太丑了)。</p><h2 id="自定义一个对象-共有方法-私有方法">自定义一个对象（共有方法，私有方法）</h2><h3 id="工厂模式">工厂模式</h3><pre><code class="language-JavaScript">function person() {    var o = new Object();    o.name = 'shen';    o.say = function() {        alert(this.name);    }    return o;}var person1 = person();  </code></pre><ul><li>优点：返回了一个对象</li><li>缺点：无法通过constructor识别对象，且每次通过Person创建对象时，say()都是一样的</li></ul><h3 id="构造函数模式">构造函数模式</h3><pre><code class="language-javascript">function Person() {    this.name = 'shen';    this.say = function() {        alert(this.name);    }}var person1 = new Person();</code></pre><ul><li>优点：通过constructor或instanceof可以识别对象实例的类别</li><li>缺点：多个实例的say()方法都是实现一样的效果，但却存储了多次</li></ul><h3 id="原型模式">原型模式</h3><pre><code class="language-javascript">function Person() {}Person.prototype.name = 'shen';Person.prototype.say = function() {    alert(this.name);}Person.prototype.friends = ['dan'];var person1 = new Person();</code></pre><ul><li>say()方法是共享的，所有实例的say()指向同一个</li><li>可以动态地添加原型对象的方法和属性，并反映在对象实例上</li></ul><pre><code class="language-javascript">var person1 = new Person()Person.prototype.showFriends = function() {    console.log(this.friends)}person1.showFriends(); //['dan']</code></pre><h3 id="构造函数和原型组合模式">构造函数和原型组合模式</h3><pre><code class="language-Javascript">function Person(name) {    this.name = name;    this.friends = ['dan'];} Person.prototype.say = function() {    console.log(this.name);}var person1 = new Person('shen');person1.say(); //shen</code></pre><h2 id="闭包">闭包</h2><p>闭包：有权访问另一个函数作用域中变量的函数</p><h3 id="产生闭包">产生闭包</h3><pre><code class="language-JavaScript">function func() {    // 创造局部变量    var a=1, b=2;    function closure() {        return a+b;    }    // 让func中能访问到closure    return closure;}</code></pre><h3 id="闭包的应用">闭包的应用</h3><p>任何在函数中定义的变量，都可以认为是私有变量<br>特权方法：有权访问私有变量的共有方法</p><pre><code class="language-javascript">function Animal() {    var series = &quot;哺乳动物&quot;；//私有变量    function run() {        console.log(&quot;run&quot;);    }    //特权方法    this.getSeries = function() {        return series;    };}</code></pre><h2 id="this的指向">this的指向</h2><p>this最终指向的是那个调用它的<strong>对象</strong>（只有在函数<strong>执行</strong>的时候才能确定）<br>如果返回值是一个对象，那么this指向的就是那个<strong>返回值对象</strong>，如果返回值不是一个对象，那么this还是指向<strong>函数的实例</strong></p><h2 id="js内存泄漏的原因">js内存泄漏的原因</h2><ol><li>全局变量</li></ol><pre><code class="language-JavaScript">function foo(arg) {    bar = 'text';}//等同于function foo(arg) {    window.bar = 'text';}</code></pre><ol start="2"><li>闭包()</li></ol><pre><code class="language-JavaScript">var theThing = null;var replaceThing = function() {    var originalThing = theThing;    var unused = function() {        if (orginalThing)        console.log('hi')    };}</code></pre><h2 id="js同步和异步">js同步和异步</h2><p>异步任务：主线程(stack栈)运行过程中，当stack空闲的时候，主线程对event queue轮询后，将异步任务放到stack中执行</p><h2 id="定时器">定时器</h2><h3 id="settimeout和setinterval的区别">setTimeout和setInterval的区别</h3><pre><code class="language-javascript">setTimeout(function Set(){    console.log(&quot;setTimeout&quot;);    setTimeout(Set,10);},10);                            //等前一个callback执行完，延迟10ms执行回调函数setInterval(function(){    console.log(&quot;setInterval&quot;);},10);                           //每隔10ms执行回调函数，不管上一个是否执行完</code></pre><pre><code class="language-javascript">var a = 10;function A() {    console.log(a);  //1.undefined    var a = 20;    console.log(a);  //2.输出20    for (var a=0; a&lt;5; a++) {        setTimeout(function() {            console.log(a);  //4.每隔一秒输出一个5（5*5）        },1000*a)    }}A();console.log(a);  //3.输出10</code></pre><h2 id="跨域问题">跨域问题</h2><blockquote><p>跨域： 浏览器不能执行其他网站的脚本 -&gt;原因：同源策略（协议，域名，端口）</p></blockquote><ol><li>jsonp实现跨域的原理<br>利用script标签支持跨域的属性，用script标签拿到包裹数据的方法（相当于返回了一段js代码），在请求中包含callback,服务端注入参数后返回这个回调函数，然后用script标签拿到返回的js代码跨域直接运行回调</li><li>nginx反向代理</li><li>node.js中间件代理跨域</li><li>CORS</li></ol>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Begin,Again</title>
      <link href="/2017/12/31/years_01/"/>
      <url>/2017/12/31/years_01/</url>
      
        <content type="html"><![CDATA[<h2 id="现在">现在</h2><p>时间过的真是快，今天已经到了2017年的最后一天。很多天，我都没有再去写一些文字。尽管我有很多东西想要去写。但都没有去做。之前想写一篇重新思考web前端的文章，也一直被搁置。</p><p>从上两周开始，整个的学习状态就出了一些问题。总会感觉很焦虑。也在去学一些东西，但似乎都只是一些碎片化的学习。这两天准备完成《web前端攻城狮》课程的项目实战，却感觉无从下手。我开始有些怀疑自己。</p><h2 id="过去">过去</h2><p>这段时间打开手机看一些文章推送，都在回顾总结2017。还有网易云，支付宝也会把2017一整年听过的歌，花过的钱都给通通再晾出来。<br>刚又看了一遍之前写的一些随笔，我的2017年，又做了些什么呢？<br>看来还是应该多去写一些东西，上半年做的事基本上全忘了。好吧，那就只说说下半年吧。<br><strong>看懂一些专业书</strong><br>如果只是从我在图书馆借过的书目来看，我似乎算的上半个大牛。但事实是借过的很多书，都没有认真看过。真正吸收的东西很少，或许这就是天才和普通人的区别。回过头来看，真的不要再自命不凡，我只是个普普通通的人。<br><strong>学习web前端</strong><br>从大四开学开始，我坚定了自己要走前端这条路。从最基础的HTML+CSS+JavaScript开始学起。一开始，看慕课网的视频，到现在遇到问题，更倾向于去MDN和文档中找答案。学习方法也在不断改变着，同时也在探索自己到底适合什么样的学习方法。</p><p>每天我都会去掘金社区看些感兴趣的文章，尽管能力感觉并没有什么提升。就像之前总会去看一些kindle推送的BBC新闻，但英语写作还是一团糟。根本原因还是练习太少。无论做什么事都是一样，不断的练习才能提高。对于现在的我来说，很多时候不想去练习，还是需要克服这种惰性，能力才能真正的提高。</p><p>凡事都不可能一蹴而就，做好一件事的前提是必须付出努力，但同等重要的还有做这件事的方法。坦白讲，我的确在我感兴趣的领域花了很多的时间。但一定要分清主次。比如有些东西大可不必花太多时间在上面,有太多让人眼花缭乱的框架了。有些的确很棒，但我需要自己的判断。</p><p><strong>翻译了技术文章</strong><br>前段时间在众成翻译上翻译了一篇文章，是关于GitHub的。翻译的初衷只是为了更好的使用GitHub（尽管很早就已经注册了GitHub，但一直都没怎么<br>去用它）。但令我意外的是竟然被掘金社区转载了（也反映了掘金社区的文章质量确实不太高😄），这确实给了我很大的信心。以前我都是看别人的文章，这次也算是自己也给社区做了点微小的贡献。还是很开心的。但很多东西就是这样，做一次很简单，坚持下去做就不容易。2018年还要继续翻译一些技术文章，MDN有很多文章翻译的都不是很好，我要去做这件事。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS高级</title>
      <link href="/2017/11/30/css_03/"/>
      <url>/2017/11/30/css_03/</url>
      
        <content type="html"><![CDATA[<h2 id="响应式设计">响应式设计</h2><blockquote><p>一套统一的设计和代码，适应多种不同的设备</p></blockquote><h3 id="流式布局-fluid-grids">流式布局(fluid grids)</h3><iframe id="cp_embed_RwNJmeo" src="//codepen.io/occupy5/embed/RwNJmeo?height=256px&theme-id=dark&slug-hash=RwNJmeo&default-tab=css,result&embed-version=2" scrolling="no" frameborder="no" height="256px" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h3 id="弹性图片-flexible-images">弹性图片(flexible images)</h3><iframe id="cp_embed_ZEYjEKz" src="//codepen.io/occupy5/embed/ZEYjEKz?height=256px&theme-id=dark&slug-hash=ZEYjEKz&default-tab=css,result&embed-version=2" scrolling="no" frameborder="no" height="256px" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h3 id="媒体查询-media-query">媒体查询(media query)</h3><ul><li>媒体类型(media-type)<ul><li>all</li><li>screen</li><li>print</li><li>speech</li></ul></li><li>媒体特征(media-features)<ul><li>width</li><li>aspect-radio</li><li>prefer-color-scheme</li></ul></li><li>操作符(logical operators)<ul><li>and</li><li>not</li><li>only</li><li>,</li></ul></li></ul><h2 id="mobile-first">mobile first</h2><blockquote><p>为移动端编写默认的样式，其他终端根据media query编写相应的样式</p></blockquote><iframe id="cp_embed_mdyjXyd" src="//codepen.io/occupy5/embed/mdyjXyd?height=256px&theme-id=dark&slug-hash=mdyjXyd&default-tab=css,result&embed-version=2" scrolling="no" frameborder="no" height="256px" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript高级</title>
      <link href="/2017/11/07/javascript_04/"/>
      <url>/2017/11/07/javascript_04/</url>
      
        <content type="html"><![CDATA[<h2 id="dom编程">DOM编程</h2><h3 id="docuement节点">Docuement节点</h3><h4 id="特征">特征</h4><ul><li>nodeType的值为9</li><li>nodeName的值为#document</li><li>nodeValue的值为null</li><li>parentNode的值为null</li><li>ownerDocument的值为null</li><li>其子节点最多是一个DocumentType,Element,processingInstruction或Comment</li></ul><h4 id="属性">属性</h4><p>document.title -&gt; 邮箱通知,动态改变document.title属性来推送给用户<br>document.referrer -&gt; 进行安全性的判断，上游页面是否在站点内部<br>document.domain -&gt; 解决子域互访问题</p><h3 id="dom元素节点">Dom元素节点</h3><p>默认属性<br><a href="http://element.id" target="_blank" rel="noopener">element.id</a><br>element.title<br>element.classname<br>element.lang<br>element.dir</p><h3 id="dom操作">Dom操作</h3><ol><li>添加</li></ol><pre><code class="language-javascript">//添加新节点var returnedNode = someNode.appendChild(newNode);alert(returnedNode == newNode); // truealert(someNode.lastChild = newNode); //true//添加已有节点var returnedNode = someNode.appendChild(someNode.firstChild);alert(returnedNode == someNode.firstChild); //falsealert(returnedNode == someNode.lastChild); //true</code></pre><ol start="2"><li>插入</li></ol><pre><code class="language-javascript">//插入后成为最后一个子节点var returnedNode = someNode.insertBefore(newNode,null);alert(returnedNode == someNode.lastChild); //true//插入后成为第一个子节点var returnedNode = someNode.insertBefore(newNode,someNode.firstChild);alert(returnedNode == newNode); //truealert(newNode == some.lastChild); //true//插入到最后一个字节点前面var returnedNode = someNode.insertBefore(newNode,someNode.lastChild);alert(newNode == someNode.childNodes[someNode.childNodes.length-2]); //true</code></pre><ol start="3"><li>替换</li></ol><pre><code class="language-javascript">//替换第一个子节点var returnedNode = someNode.replaceChild(newNode,someNode.firstChild);//替换最后一个子节点rereturnedNode = someNode.replaceChild(newNode,someNode.lastChild);</code></pre><ol start="4"><li>删除</li></ol><pre><code class="language-javascript">//删除第一个子节点var formerFirstChild = someNode.removeChild(someNode.firstChild);//删除最后一个子节点var formerLastChild = someNode.removeChild(someNode.lastChild);</code></pre><ol start="5"><li>克隆</li></ol><pre><code class="language-javascript">var deepList = myList.cloneNode(true);var shallowList = myList.cloneNode(false);</code></pre><ol start="6"><li>innerHtml vs DocumentFragment</li></ol><pre><code class="language-javascript">&lt;ul&gt;    &lt;li&gt;List item -1&lt;/li    &lt;li&gt;List item 0&lt;/li&gt;    &lt;li&gt;List item 1&lt;/li&gt;    ...    &lt;li&gt;List item 9&lt;/li&gt;&lt;/ul&gt;listNode.innerHtml += html;listNode.appendChild(frag);</code></pre><h3 id="dom查找">Dom查找</h3><ul><li>document.getElementById</li><li>document.getElementsByTagName</li><li>document.anchors</li><li>document.links</li><li>document.images</li><li>document.forms</li><li>document.querySelector</li></ul><pre><code class="language-javascript">var myDiv = document.querySelector(&quot;#myDiv&quot;); //取得id为myDiv的元素var img = document.body.querySelector(&quot;img.button&quot;); //取得class为button的图像元素var ems = document.getElementById(&quot;myDiv&quot;).querySelectorAll(&quot;em&quot;); //取得某&lt;div&gt;中所有的&lt;em&gt;元素var strongs = document.querySelectorAll(&quot;p strong&quot;); //取得&lt;p&gt;元素里所有的&lt;strong&gt;元素</code></pre><h3 id="dom级别-动态样式">Dom级别（动态样式）</h3><h4 id="图片懒加载">图片懒加载</h4><ol><li>通过data-src加载图片</li></ol><pre><code class="language-javascript">function setImg(index) {    var aLi = document.getElementsByName(&quot;li&quot;);    if (aLi[index].childNodes.length == 0) {        if (aLi[index].dataset) {            var src = aLi[index].dataset.src;        } else {            var src = aLi[index].getAttribute('data-src');        }        var oImg = document.createElement('img');        oImg.src = src;        aLi[index].appendChild(oImg);    }}</code></pre><ol start="2"><li>获取元素距离页面顶部的距离</li></ol><pre><code class="language-javascript">function getH(el) {    var h = 0;    while (el) {        h += el.offsetTop;        el = el.offsetParent;    }    return h; }</code></pre><ol start="3"><li>组装</li></ol><pre><code class="language-javascript">window.onscroll = function () {    var aLi = document.getElementsByName(&quot;li&quot;);    for (var i = 0, l = aLi.length; i&lt;l; i++) {        var oLi = aLi[i];        var t = document.documentElement.clientHeight + (document.documentElement.scrollTop || document.body.scrollTop);        var h = getH(oLi);        if (h &lt; t ) {            setTimeout(&quot;setImg(&quot; + i + &quot;)&quot;,500);        }    }};window.onload = function () {    window.onscroll();};</code></pre><h3 id="dom节点">Dom节点</h3><p>对于一个已有的HTML结构,按字符串顺序重新排序DOM节点</p><pre><code class="language-html">&lt;ol id=&quot;test-list&quot;&gt;    &lt;li class=&quot;lang&quot;&gt;Scheme&lt;/li&gt;    &lt;li class=&quot;lang&quot;&gt;JavaScript&lt;/li&gt;    &lt;li class=&quot;lang&quot;&gt;Python&lt;/li&gt;     &lt;li class=&quot;lang&quot;&gt;Ruby&lt;/li&gt;    &lt;li class=&quot;lang&quot;&gt;Haskell&lt;/li&gt;&lt;/ol&gt; </code></pre><p>方法一</p><pre><code class="language-javascript">var arr=[]; var list=document.getElementById('test-list'); for(let i=0;i&lt; list.children.length;i++){     arr.push(list.children[i].innerText);      } arr.sort(); for(let i=0;i&lt; list.children.length;i++){     list.children[i].innerHTML=arr[i];      }</code></pre><p>方法二</p><pre><code class="language-javascript">var list = document.getElementById('test-list'); var slist = list.children; slist = Array.prototype.slice.call(slist).sort(function(a, b){     return a.innerHTML &gt; b.innerHTML ? 1 : -1 ;      })      slist.forEach(function(el){      list.appendChild(el);          });</code></pre><p>删除节点</p><pre><code class="language-javascript"> var ul = document.getElementById('test-list'); var list = ul.children; var arr = []; for(var i = 0;i&lt;list.length;i++) {      if (list[i].innerText !='JavaScript' &amp;&amp; list[i].innerText !='HTML'&amp;&amp;list[i].innerText !='CSS')      arr.push(list[i]);} for(var i = 0;i&lt;arr.length;i++) {       ul.removeChild(arr[i]);}</code></pre><h2 id="事件">事件</h2><p>###事件流<br><strong>冒泡</strong><br>Element div -&gt; Element body -&gt; Element html -&gt; Document<br><strong>捕获</strong><br>Document -&gt; Element html -&gt; Element body -&gt; Element div</p><h3 id="事件处理">事件处理</h3><p><strong>HTML</strong></p><pre><code class="language-javascript">&lt;script type=&quot;text/javascript&quot;&gt;    function showMessage() {         alert(&quot;hello&quot;);        }&lt;/script&gt;&lt;input type=&quot;button&quot; value=&quot;click me&quot; onclick=&quot;showMessage()&quot;&gt;</code></pre><p><strong>DOM0</strong></p><pre><code class="language-javascript">var btn = document.getElementById(&quot;myBtn&quot;);btn.onclick = function() {    alert(&quot;clicked&quot;);};</code></pre><p><strong>DOM2</strong></p><pre><code class="language-javascript">var btn = document.getElementById(&quot;myBtn&quot;);btn.addEventListener(&quot;click&quot;,function(){    alert(&quot;clicked&quot;);},false);btn.addEventListener(&quot;click&quot;,function(){ //事件处理顺序自上而下    alert(&quot;hello&quot;);},false);</code></pre><p><strong>IE</strong></p><pre><code class="language-javascript">var btn = document.getElementById(&quot;myBtn&quot;);  btn.attachEvent(&quot;onclick&quot;,function(){    alert(&quot;clicked&quot;);});btn.attachEvent(&quot;onclick&quot;,function(){ //事件处理顺序自下向上    alert(&quot;hello&quot;);});</code></pre><p><strong>删除事件处理</strong></p><pre><code class="language-javascript">var btn = document.getElementById(&quot;myBtn&quot;);var handler() = function() {    alert(&quot;hello&quot;);};btn.addEventListener(&quot;click&quot;,handler,false);btn.removeEventListener(&quot;click&quot;,handler,false);</code></pre><p>事件对象<br><strong>target</strong></p><pre><code class="language-javascript">var btn = document.getElementById(&quot;myBtn&quot;);btn.onclick = function(event) {        alert(event.currentTarget === this); //true        alert(event.target === this); //true};document.body.onclick = function(event) {        alert(event.currentTarget === document.body); //true        alert(this === document.body); //true        alert(event.target === document.getElementById(&quot;myBtn&quot;)); //true}</code></pre><p><strong>type</strong></p><pre><code class="language-javascript">var btn = document.getElementById(&quot;myBtn&quot;);var handler = function(event) {    switch(event.type) {        case &quot;click&quot;:            alert(&quot;clicked&quot;);            break;        case &quot;mouseover&quot;:            event.target.style.backgroundColor = &quot;red&quot;;            break;        case &quot;mouseout&quot;            evnet.target.style.backgroundColor = &quot;&quot;;            break;    }};btn.onclick = handler;btn.onmouseover = handler;btn.onmouseout = handler;</code></pre><p>事件类型<br>事件代理</p><h2 id="json和服务端通信">JSON和服务端通信</h2><h3 id="json">json</h3><h3 id="ajax">ajax</h3><h3 id="跨域通信">跨域通信</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象的JavaScript</title>
      <link href="/2017/10/30/JavaScript_02/"/>
      <url>/2017/10/30/JavaScript_02/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象的javascript">面向对象的JavaScript</h2><h3 id="对象属性">对象属性</h3><h4 id="数据属性">数据属性</h4><ul><li>configurable: 表示能否通过delete删除属性从而重新定义属性，或能否将属性修改为访问器属性</li><li>enumberable: 表示能否通过for-in循环返回属性</li><li>writeable: 表示能否修改属性的值</li><li>value: 包含这个属性的数据值，读属性的时候从这个位置读；写入属性值的时候，把新值保存在这个位置</li></ul><h4 id="object-defineproperty">object.defineProperty()</h4><p>通过defineproperty()来修改属性默认的特性，接收三个参数(属性所在的对象，属性的名字，一个描述符对象)</p><pre><code class="language-js">var person = {};Object.defineproperty(person,&quot;name&quot;,{  writeable: false;  value: &quot;fan&quot;});console.log(person.name) //fanperson.name = &quot;dan&quot;;console.log(person.name) //fan</code></pre><h4 id="访问器属性">访问器属性</h4><ul><li>configurable: 表示能否通过delete删除属性从而重新定义属性，或者能否将属性修改为数据属性</li><li>enumberable: 表示能否通过for-in循环返回属性</li><li>get: 读取属性时调用的函数</li><li>set: 写入属性时调用的函数</li></ul><h3 id="创建对象">创建对象</h3><h4 id="工厂模式">工厂模式</h4><pre><code class="language-js">function person(name,age,sex) {  var o = new Object();  o.name = name;  o.age = age;  o.sex = sex;  return o;}var person1 = preson(&quot;fan&quot;,22,&quot;male&quot;);</code></pre><ul><li>优点：解决了重复创建多个相似对象的问题</li></ul><ul><li>缺点：无法确定对象的类型</li></ul><h4 id="构造函数模式">构造函数模式</h4><pre><code class="language-js">function Person(name,age,sex) {  this.name = name;  this.age = age;  this.sex = sex;}var person2 = new Person(&quot;dan&quot;,20,&quot;male&quot;)//new的过程// 1. 创建一个新的对象// 2. 将构造函数的作用域赋给新的对象（即this指向了新的对象）// 3. 执行构造函数的代码（为新的对象添加属性）// 4. 返回新的对象</code></pre><ul><li>可以确定确定对象的类型</li></ul><ul><li>每个方法都要在每个实例上重新创建一遍</li></ul><h4 id="原型模式">原型模式</h4><pre><code class="language-js">function Person() {}Person.prototype.name = 'fan';Person.prototype.age = 25;Person.prototype.sayName = function() {  alert(this.name)}// 更简洁的原型语法Person.prototype = {  name: 'fan',  age: 25,  sayName: function() {    alert(this.name);  }}var person1 = new Person();person1.sayName() // 'fan'person1.name = 'wen';person1.sayName() // 'wen' =&gt; 来自实例var person2 = new Person();person2.sayName() // 'fan' =&gt; 来自原型</code></pre><h4 id="组合">组合</h4><pre><code class="language-js">// 组合使用构造模式和原型模式function Person() {  this.name = name;  this.age = age;}Person.prototype = {  constructor: Person,  sayName: function() {    console.log(this.name)  }}</code></pre><h3 id="继承">继承</h3><h4 id="原型链继承">原型链继承</h4><pre><code class="language-js">function SuperType() {  this.colors = ['red', 'black', 'green'];}function SubType() {}SubType.prototype = new SuperType();var instance1 = new SubType();instance1.colors.push('blue');var instance2 = new SubType();// 问题：影响其他的实例console.log(instance2.colors); // &quot;red, black, green, blue&quot;</code></pre><h4 id="构造函数继承">构造函数继承</h4><pre><code class="language-js">function SuperType() {  this.colors = ['red', 'black', 'green'];}function SubType() {  // 继承了superType  SuperType.call(this);}var instance1 = new SubType();instance1.colors.push('blue');var instance2 = new SubType();// 不会影响其他的实例console.log(instance2.colors); // &quot;red, black, green&quot;</code></pre><h4 id="组合继承">组合继承</h4><pre><code class="language-js">// 组合继承function SuperType() {  this.colors = ['red', 'black', 'green'];  this.name = name;}SuperType.prototype.sayName = function() {  console.log(this.name);}function SubType(name, age) {  // 继承属性  SuperType.call(this, name); // 第二次调用SuperType()  this.age = age;}// 继承方法SubType.prototype = new SuperType(); // 第一次调用SuperType()SubType.prototype.constructor = SubType;SubType.prototype.sayAge = function() {  console.log(this.age);}var instance1 = new SubType('fan', 25);instance1.colors.push('blue');console.log(instance1.colors); // &quot;red, black, green, blue&quot;instance1.sayName(); // 'fan'instance1.sayAge(); // '25'var instance2 = new SubType('dan', 24);console.log(instance2.colors); // &quot;red, black, green&quot;instance2.sayName(); // 'dan'instance2.sayAge(); // 24</code></pre><ul><li>缺点：调用两次超类型构造函数</li></ul><h3 id="es6">ES6</h3><pre><code class="language-js">class Point {}class ColorPoint extends Point{  constructor(x, y, color) {    //调用父类的constructor    super(x, y);    this.color = color;  }  toString() {    //调用父类的toString()    return this.color + ' ' + super.toString();  }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS布局</title>
      <link href="/2017/10/30/css_02/"/>
      <url>/2017/10/30/css_02/</url>
      
        <content type="html"><![CDATA[<h2 id="基于浮动的布局">基于浮动的布局</h2><h3 id="浮动与清除">浮动与清除</h3><ol><li>文本绕排图片</li></ol><pre><code class="language-css"> p {margin 0;border:1px soild red;} img {float:left;margin:0 4px 4px 0;}</code></pre><ol start="2"><li>创建分栏</li></ol><pre><code class="language-css"> p {float:left;width:200px;margin 0;border:1px soild red;} img {float:left;margin:0 4px 4px 0;}</code></pre><h3 id="围住浮动元素的方法">围住浮动元素的方法</h3><ol><li>为父元素添加overflow:hidden</li></ol><pre><code class="language-css">section {border:1px solid blue;margin:0 0 10px 0; overflow:hidden;}img {float:left;}p {border:1px solid red;}</code></pre><ol start="2"><li>同时浮动父元素</li></ol><pre><code class="language-css">section {border:1px solid blue;float:left;width:100%;}img {float:left;}footer {border:1px solid red;clear: left;}</code></pre><ol start="3"><li>添加非浮动的清除元素</li></ol><pre><code class="language-css">.clearfix::after {  content:&quot;.&quot;;  display:block;  height:0;  visibility:hidden;  clear:both;}</code></pre><h3 id="中栏流动布局的实现方法">中栏流动布局的实现方法</h3><ol><li>用负外边距实现</li></ol><pre><code class="language-html">&lt;div id=&quot;parent&quot;&gt;  &lt;div id=&quot;center&quot;&gt;&lt;/div&gt;  &lt;div id=&quot;left&quot;&gt;&lt;/div&gt;  &lt;div id=&quot;right&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;style&gt;  #left {    float: left;    width: 150px;    /* 调整left位置，值等于自身宽度 */    margin-left: -100%;  }  #center {    float: left;    width: 100%;  }  #right {    float: left;    width: 210px;    /* 使right到指定位置，值等于自身宽度 */    margin-left: -210px;  }&lt;/style&gt;</code></pre><ol start="2"><li>用css3单元格实现</li></ol><pre><code class="language-html">&lt;div id=&quot;parent&quot;&gt;  &lt;div id=&quot;left&quot;&gt;&lt;/div&gt;  &lt;div id=&quot;center&quot;&gt;&lt;/div&gt;  &lt;div id=&quot;right&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;style&gt;#left {  display: table-cell;  width: 150px;  background: #dcd9c0;  padding: 10px;}#center {display: table-cell;background: #ffed53;padding: 10px 20px;}#right {display: table-cell;width: 210px;background: #3f7ccf;padding: 10px;}&lt;/style&gt;</code></pre><ol start="3"><li>使用flex</li></ol><pre><code class="language-html">&lt;div id=&quot;parent&quot;&gt;  &lt;div id=&quot;left&quot;&gt;&lt;/div&gt;  &lt;div id=&quot;center&quot;&gt;&lt;/div&gt;  &lt;div id=&quot;right&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;style&gt;#parent {  display: flex;}#left {  width: 150px;}/* 均分#parent剩余的部分 */#center {  flex: 1;}#right {  width: 210px;}&lt;/style&gt;</code></pre><ol start="4"><li>使用grid</li></ol><pre><code class="language-html">&lt;div id=&quot;parent&quot;&gt;  &lt;div id=&quot;left&quot;&gt;&lt;/div&gt;  &lt;div id=&quot;center&quot;&gt;&lt;/div&gt;  &lt;div id=&quot;right&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;style&gt;#parent {  display: grid;  grid-template-column: auto 1fr auto;}#left {  grid-column: 1 / 2;}#center {  grid-column: 2 / 3;}#right {  grid-column: 3 / 4;}&lt;/style&gt;</code></pre><h2 id="flexbox布局">Flexbox布局</h2><h3 id="概念">概念</h3><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称&quot;容器&quot;。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称&quot;项目&quot;。<br>容器默认存在两根轴：水平的<strong>主轴</strong>（main axis）和垂直的<strong>交叉轴</strong>（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p><h3 id="容器属性">容器属性</h3><ol><li>flex-direction</li></ol><pre><code class="language-css">.box {  flex-direction: row | row-reverse | column | column-reverse;}</code></pre><ol start="2"><li>flex-wrap</li></ol><pre><code class="language-css">.box {  flex-wrap: nowrap | wrap | wrap-reverse;}</code></pre><ol start="3"><li>flex-flow</li></ol><pre><code class="language-css">.box {  flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;}</code></pre><ol start="4"><li>justify-content</li></ol><pre><code class="language-css">.box {  justify-content: flex-start | flex-end | center | space-between | space-around;}</code></pre><ol start="5"><li>align-items</li></ol><pre><code class="language-css">.box {  align-items: flex-start | flex-end | center | baseline | stretch;}</code></pre><ol start="6"><li>align-content</li></ol><pre><code class="language-css">.box {  align-content: flex-start | flex-end | center | space-between | space-around | stretch;}</code></pre><h3 id="项目属性">项目属性</h3><ol><li>order</li><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li><li>flex</li><li>align-self</li></ol><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">属性的demo</a></p><h3 id="骰子布局demo">骰子布局demo</h3><p><img src="https://img.5bang.top/10301.png" alt="first-face"></p><pre><code class="language-css">.first-face {   display: flex;  justify-content: center;  align-items: center;}</code></pre><p><img src="https://img.5bang.top/10302.png" alt="second-face"></p><pre><code class="language-css">.second-face {  display: flex;  justify-content: space-between;}.item:nth-child(2) {  align-self: flex-end;}</code></pre><p><img src="https://img.5bang.top/10303.png" alt="fifth-face"></p><pre><code class="language-css">.fifth-face {  display: flex;  justify-content: space-between;}.fifth-face .item {  display: flex;  flex-direction: column;  justify-content: space-between;}.fifth-face .item:nth-child(2) {  justify-content: center;}</code></pre><h2 id="grid布局">Grid布局</h2><h2 id="其他常用布局方式">其他常用布局方式</h2><h3 id="百分比布局">百分比布局</h3><pre><code class="language-css">.Grid {  display: flex;}.Grid-cell {  flex: 1;}.Grid-cell.u-full {  flex: 0 0 100%;}.Grid-cell.u-1of2 {  flex: 0 0 50%;}.Grid-cell.u-1of3 {  flex: 0 0 33.3333%;}.Grid-cell.u-1of4 {  flex: 0 0 25%;}</code></pre><h3 id="双飞翼布局">双飞翼布局</h3><pre><code class="language-html">&lt;div class=&quot;container&quot;&gt;  &lt;div class=&quot;center&quot;&gt;&lt;/div&gt;  &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;  &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;style&gt;/* 见中栏布局的第一种方法 */&lt;/style&gt;</code></pre><h3 id="圣杯布局">圣杯布局</h3><!-- #### 方式1```html<div class="holyGrail">  <div class="center"></div>  <div class="left"></div>  <div class="right"></div></div>``````css.holyGrail {  height: 300px;  /*左右padding等于左右盒子的宽度*/  padding: 0 200px 0 100px;}.left {  width: 100px;  height: 300px;  position: relative;  float: left;  margin-left: -100%;  left: -100px;  background: yellow;}.right {  width: 200px;  height: 300px;  position: relative;  float: left;  margin-left: -200px;  left: 200px;  background: orange;}.center {  width: 100%;  height: 300px;  float: left;  background: red;}``` --><h4 id="方式2">方式2</h4><pre><code class="language-html">&lt;div class=&quot;HolyGrail&quot;&gt;  &lt;div class=&quot;center&quot;&gt;&lt;/div&gt;  &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;  &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><pre><code class="language-css">.HolyGrail {  display: flex;  flex: 1;  min-height: 100vh;}.center {  flex: 1;  background: red;}.left, .right {  /* 两个边栏的宽度设为12em */  flex: 0 0 12em;  background: yellow;}.left {  /* 导航放到最左边 */  order: -1;}@media (max-width: 768px) {.HolyGrail {  flex-direction: column;  /* 如果是小屏幕，三栏会变为垂直叠加 */  flex: 1;}.center,.left,.right {    flex: auto;  }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript进阶</title>
      <link href="/2017/10/28/JavaScript_03/"/>
      <url>/2017/10/28/JavaScript_03/</url>
      
        <content type="html"><![CDATA[<h2 id="javascript引用类型">JavaScript引用类型</h2><h3 id="array">Array</h3><ol><li>Array.isArray()</li></ol><pre><code class="language-javascript">var a = [1, 2, 3];typeof a // &quot;object&quot;Array.isArray(a) // true</code></pre><ol start="2"><li>栈和队列</li></ol><pre><code class="language-javascript">var arr = ['a','b','c'];arr.push('d'); console.info(arr); // ['a','b','c','d']arr.unshift('e'); console.info(arr); // ['e','a','b','c','d']arr.pop();  console.info(arr); // ['e','a','b','c']arr.shift();console.info(arr); // ['a','b','c']</code></pre><ol start="3"><li>sort</li></ol><pre><code class="language-javascript">var arr = [1,2,4,3,5,7,6,8,];arr.sort(function(prev,next){  return prev - next; //升序});console.info(arr);</code></pre><ol start="4"><li>forEach() , filter()</li></ol><pre><code class="language-javascript">var obj = {  name: '李白',  times: [1, 2, 3],  print: function () {    this.times.forEach(function (n) {      console.log(this.name);    }, this);  }};obj.print(); // 打印&quot;李白&quot;3次</code></pre><p>forEach方法也可以用于类似数组的对象和字符串</p><pre><code class="language-javascript">var obj = {  0: 1,  a: 'hello',  length: 1}Array.prototype.forEach.call(obj, function (elem, i) {  console.log( i + ':' + elem);});// 0:1var str = 'hello';Array.prototype.forEach.call(str, function (elem, i) {  console.log( i + ':' + elem);});// 0:h// 1:e// 2:l// 3:l// 4:o</code></pre><p>filter方法的参数函数可以接受三个参数，第一个参数是当前数组成员的值，这是必需的，后两个参数是可选的，分别是当前数组成员的位置和整个数组</p><pre><code class="language-javascript">[1, 2, 3, 4, 5].filter(function (elem, index, arr) {  return index % 2 === 0;});// [1, 3, 5]</code></pre><p>filter方法还可以接受第二个参数，指定测试函数所在的上下文对象（即<strong>this</strong>对象）</p><pre><code class="language-javascript">var Obj = function () {  this.MAX = 3;};var myFilter = function (item) {  if (item &gt; this.MAX) {    return true;  }};var arr = [2, 8, 3, 4, 1, 3, 2, 9];arr.filter(myFilter, new Obj()) // [8,4,9]</code></pre><ol start="5"><li>reduce() , reduceRight()<br>reduce方法和reduceRight方法依次处理数组的每个成员，最终累计为一个值</li></ol><pre><code class="language-javascript">[1, 2, 3, 4, 5].reduce(function(x, y){  // x为累积变量，y为当前变量  return x + y;});// 1 2// 3 3// 6 4// 10 5//最后结果：15</code></pre><p>利用reduce(),写一个数组求和的sum方法</p><pre><code class="language-javascript">Array.prototype.sum = function (){  return this.reduce(function (partial, value) {    return partial + value;  },10) //赋初值为10};[3, 4, 5, 6, 10].sum()  //38</code></pre><p>reduceRight()</p><pre><code class="language-javascript">function substract(prev, cur) {  return prev - cur;}[3, 2, 1].reduce(substract) // 0[3, 2, 1].reduceRight(substract) // -4</code></pre><p>reduce()搜索某个元素</p><pre><code class="language-javascript">function findLongest(entries) {  return entries.reduce(function (longest, entry) {    return entry.length &gt; longest.length ? entry : longest;  }, '');}findLongest(['aaa', 'bb', 'c']) // &quot;aaa&quot;</code></pre><h3 id="如何判断引用类型">如何判断引用类型</h3><p>typeof vs instanceof</p><h3 id="单例内置对象">单例内置对象</h3><p>Global(window)<br>Math</p><h2 id="javascript作用域">JavaScript作用域</h2><pre><code class="language-javascript">'use strict';function foo() {    var x = 1;    x = x + 1;}function bar() {    var x = 'A';    x = x + 'B';}</code></pre><ul><li>不同函数内部的同名变量互相独立，互不影响</li></ul><pre><code class="language-javascript">'use strict';function foo() {    var x = 1;    function bar() {        var y = x + 1; // bar可以访问foo的变量x!    }    var z = y + 1; // ReferenceError! foo不可以访问bar的变量y!}</code></pre><pre><code class="language-javascript">'use strict';function foo() {    var x = 1;    function bar() {        var x = 'A';        alert('x in bar() = ' + x); // 'A'，由‘内’向‘外’查找    }    alert('x in foo() = ' + x); // 1    bar();}</code></pre><ul><li>如果内部函数定义了与外部函数重名的变量，则内部函数的变量将“屏蔽”外部函数的变量。</li></ul><h3 id="变量提升">变量提升</h3><blockquote><p>JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部</p></blockquote><pre><code class="language-javascript">'use strict';function foo() {    var x = 'Hello, ' + y;    alert(x); // Hello,undefined    var y = 'Bob';}foo();</code></pre><p><strong>注意!</strong><br>由于JavaScript的这一怪异的“特性”，我们在函数内部定义变量时，请严格遵守“<strong>在函数内部首先申明所有变量</strong>”这一规则。最常见的做法是用一个var申明函数内部用到的所有变量</p><h3 id="全局作用域">全局作用域</h3><blockquote><p>不在任何函数内定义的变量就具有全局作用域。实际上，JavaScript默认有一个全局对象<strong>window</strong>，全局作用域的变量实际上被绑定到window的一个属性</p></blockquote><pre><code class="language-javascript">'use strict';var course = 'Learn JavaScript';alert(course); // 'Learn JavaScript'alert(window.course); // 'Learn JavaScript'</code></pre><ul><li>直接访问全局变量course和访问window.course是完全一样的</li></ul><pre><code class="language-javascript">'use strict';function foo() {    alert('foo');}foo(); // 直接调用foo()window.foo(); // 通过window.foo()调用</code></pre><ul><li>以变量方式var foo = function () {}定义的函数实际上也是一个全局变量</li></ul><h3 id="局部作用域">局部作用域</h3><pre><code class="language-javascript">'use strict';function foo() {    for (var i=0; i&lt;100; i++) {        //    }    i += 100; // 仍然可以引用变量i}'use strict';function foo() {    var sum = 0;    for (let i=0; i&lt;100; i++) {        sum += i;    }    i += 1; // SyntaxError}</code></pre><ul><li>为了解决块级作用域，ES6引入了新的关键字<strong>let</strong>，用let替代var可以申明一个块级作用域的变量</li></ul><h3 id="名字空间">名字空间</h3><p>全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。</p><pre><code class="language-javascript">// 唯一的全局变量MYAPP:var MYAPP = {};// 其他变量:MYAPP.name = 'myapp';MYAPP.version = 1.0;// 其他函数:MYAPP.foo = function () {    return 'foo';};</code></pre><ul><li>减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中</li></ul><h3 id="解构赋值">解构赋值</h3><p>从ES6开始，JavaScript引入了解构赋值，可以同时对一组变量进行赋值。</p><pre><code class="language-javascript">let [x, [y, z]] = ['hello', ['JavaScript', 'ES6']];x; // 'hello'y; // 'JavaScript'z; // 'ES6'let [, , z] = ['hello', 'JavaScript', 'ES6']; // 忽略前两个元素，只对z赋值第三个元素z; // 'ES6'</code></pre><pre><code class="language-javascript">var person = {    name: '小明',    age: 20,    gender: 'male',    passport: 'G-12345678',    school: 'No.4 middle school',    address: {        city: 'Beijing',        street: 'No.1 Road',        zipcode: '100001'    }};var {name, address: {city, zip}} = person;name; // '小明'city; // 'Beijing'zip; // undefined, 因为属性名是zipcode而不是zip// 注意: address不是变量，而是为了让city和zip获得嵌套的address对象的属性:address; // Uncaught ReferenceError: address is not defined</code></pre><ul><li>可以对嵌套的对象进行赋值，但要保证对应层次的一致性</li></ul><blockquote><p><strong>使用场景</strong></p></blockquote><h4 id="交换变量">交换变量</h4><pre><code class="language-javascript">var x=1, y=2;[x, y] = [y, x]</code></pre><h4 id="快速获取当前页面的路径和域名">快速获取当前页面的路径和域名</h4><pre><code class="language-javascript">var {hostname:domain, pathname:path} = location;</code></pre><h4 id="绑定对象属性">绑定对象属性</h4><pre><code class="language-javascript">function buildDate({year, month, day, hour=0, minute=0, second=0}) {    return new Date(year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second);}buildDate({ year: 2017, month: 1, day: 1 });// Sun Jan 01 2017 00:00:00 GMT+0800 (CST)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>One more step</title>
      <link href="/2017/10/25/weeks_02/"/>
      <url>/2017/10/25/weeks_02/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="💲🎗🌜🌱🎗🌴" />    <label for="pass">💲🎗🌜🌱🎗🌴</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NaN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端笔面题整理</title>
      <link href="/2017/10/23/%E7%AC%94%E9%9D%A2%E9%A2%98/"/>
      <url>/2017/10/23/%E7%AC%94%E9%9D%A2%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="html-css篇">HTML+CSS篇</h2><blockquote><p>div+css的布局较table布局有什么优点？</p></blockquote><ul><li>改版时更方便，只需要改动css文件</li><li>页面加载速度更快，结构化清晰，页面更简洁</li><li>表现与结构相分离</li><li>易于优化seo,排名更靠前</li></ul><blockquote><p>你能描述一下渐进增强和优雅降级之间的不同吗?</p></blockquote><ul><li>渐进增强（progressive enhancement)：针对低版本浏览器进行页面构建，保证其基本功能。然后再在高版本的浏览器进行交互操作的改进，改善用户体验。</li><li>优雅降级（graceful degradation）：一开始就进行完整的功能构建，然后在低版本的浏览器上进行兼容。</li></ul><p><strong>区别</strong></p><ol><li>优雅降级从复杂的现状开始，试图减少用户体验的供给</li><li>渐进增强从基本的功能开始，以适应未来环境的需求,保证其根基处于安全的地带</li></ol><p><strong>观点</strong></p><ul><li>“优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器的前一个版本。</li><li>“渐进增强”观点则认为应关注于内容本身。内容是我们建立网站的诱因。这使得“渐进增强”成为一种更为合理的设计范例。这也是它被 Yahoo! 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。</li></ul><blockquote><p>为什么用多个域名来存储网站资源更有效？</p></blockquote><ul><li>CDN缓存更方便</li><li>能突破浏览器的限制</li><li>节省cookie带宽</li><li>节约主域名的连接数，优化页面的响应速度</li></ul><blockquote><p>请描述一下cookies，sessionStorage和localStorage的区别？</p></blockquote><ol><li><strong>sessionStorage</strong>用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。而<strong>localStorage</strong>用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。</li><li><strong>Web Storage</strong>的概念和cookie相似，区别是它是为了更大容量存储设计的。Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。<br><strong>coocies</strong>作为HTTP的规范存在，作用是与服务器进行交互。而web storag只是在本地的“存储”数据。</li></ol><blockquote><p>超链接访问过后hover样式就不出现的问题是什么？如何解决？</p></blockquote><ul><li>被点击访问过的超链接样式不在具有hover和active了,解决方法是改变CSS属性的排列顺序: L-V-H-A（link,visited,hover,active）</li></ul><blockquote><p>rgba()和opacity的透明效果有什么不同？</p></blockquote><ul><li>rgba()和opacity都能实现透明效果，但最大的不同是opacity作用于元素，以及元素内的<strong>所有内容</strong>的透明度，而rgba()只作用于元素的颜色或其背景色。（设置rgba透明的元素的子元素<strong>不会继承</strong>透明效果！）</li></ul><blockquote><p>px和em的区别</p></blockquote><ul><li>px和em都是长度单位，区别是，<strong>px</strong>的值是<strong>固定</strong>的，指定是多少就是多少，计算比较容易。<br><strong>em</strong>的值不是固定的，并且em会继承父级元素的字体大小。浏览器的默认字体高都是16px。所以未经调整的浏览器都符合: 1em=16px。那么12px=0.75em,10px=0.625em。</li></ul><blockquote><p>问题：从点击url到页面最终被呈现，经历了哪些过程？</p></blockquote><ol><li>DNS解析URL对应的IP</li><li>TCP连接(三次握手)</li><li>发送HTTP请求</li><li>服务器处理请求返回HTTP报文</li><li>浏览器解析渲染页面</li><li>关闭TCP连接(四次挥手)</li></ol><h2 id="js篇">js篇</h2><h3 id="排序">排序</h3><pre><code class="language-javascript">/* 冒泡排序 */function bubbleSort(arr) {    var flag = false; //定义一个变量为false,未交换位置      for (var i = 0; i &lt;= arr.length - 1; i++) {        for (var j = 0; j &lt;= arr.length - 1; j++) {            if (arr[j + 1] &lt; arr[j]) {                temp = arr[j + 1];                arr[j + 1] = arr[j];                arr[j] = temp;                flag = true; //已交换位置            }        }        if (flag) {            flag = false; //如果交换了位置，将flag重新设置为false        } else {            break;        }    }    return arr;}/* 快速排序 */function quikSort(arr) {    if (arr.length &lt;= 1) {        return arr;    }    var mNumIndex = Math.floor(arr.length / 2); //取基准值的下标    var mNum = arr.splice([mNumIndex], 1)[0]; //取基准值    var left = [];     var right = [];    for (var i = 0; i &lt;= arr.length; i++) {        if (arr[i] &lt;= mNum) { //数组小于基准值的放在左边            left.push(arr[i]);        } else {            right.push(arr[i]); //数组大于基准值的放在右边        }    }    return quickSoft(left) + concat([mNum], quickSoft(right)); //左边数组+基准值+右边数组}/* 选择排序 */function selectSort(arr) {    var min, temp;    for (var i = 0; i &lt; arr.length - 1; i++) {        min = i;        for (var j = i + 1; i &lt; arr.length; j++) {            if (arr[j] &lt; arr[min]) {                min = j;            }        }        swap(arr,min,i);    }    return arr;       }function swap(arr,i,j) {    var temp = arr[i];    arr[i] = arr[j];    arr[j] = temp; }/* 插入排序 */function insertSort(arr) {    var temp, j;    for (i = 1; i &lt;= arr.length; i++) {        temp = arr[i];        j = i;    }    while (j &gt; 0 &amp;&amp; arr[j - 1] &gt; temp) {        arr[j] = arr[j - 1];        j--;    }    arr[j] = temp;    }    return arr;}/* sort方法 */arr.sort(function (a, b) {    return a - b;});/* ES6 */arr.sort((a, b) =&gt; a - b); </code></pre><h3 id="求和">求和</h3><h4 id="reduce">reduce()</h4><pre><code class="language-javascript">Array.prototype.sum = function () {    return this.reduce(function(a,b){        return a + b;    },10)};[3,4,5,6,7].sum();</code></pre><h3 id="搜索">搜索</h3><h4 id="reduce-v2">reduce()</h4><pre><code class="language-javascript">function findLongest(entries) {    return entries.reduce(function(longest,entry) {        return entry.length &gt; longest.length ? entry : longest;    },'');}findLongest(['aaa','bb','c'])</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轻飘飘的这段时光</title>
      <link href="/2017/10/17/daily_04/"/>
      <url>/2017/10/17/daily_04/</url>
      
        <content type="html"><![CDATA[<p>这篇文章都不知道是从什么时候起头的，这些文字放在编辑器里，想到什么就写些什么，随心所欲的感觉倒也不错（果然是很棒的拖延症借口）。</p><h2 id="火车上">火车上</h2><p>每次坐在火车上时，总感觉有很多东西想要写出来。自己就像是一个观众，在看火车与时间赛跑，只是疾行的火车跑的再快也赶不上缓缓而逝的时光。</p><p>十一的八天假就这样一晃而过，回想起在家里的时光。总觉得是那么的美好。和谌丹开着玩笑，然后肆意地哈哈大笑。和老稳聊聊他的那些奇葩的同学，也经常调侃他。还有亚帅，总想起他一本正经跟大人们说话的样子。想想都很好玩。在家人面前，是最真实的自己，没必要伪装。这会让我感觉很舒适。</p><h2 id="校园里">校园里</h2><p>三周的阴雨天气，今天总算是放晴了。早上在操场上散步，抬头看看久违的蓝天，再看看那片绿茵场，“这是一段多么美好的清晨时光啊。”</p><p>不知为什么，来到大四以后。每天的时间都好像被刻意的拨快了一般。仔细想想，从开学到现在，我一本小说也没看过。不再捣腾手机，连偶尔看个比赛都有些小心翼翼。的确，我是有些慌了。我知道我的能力还不足以胜任工作，我还要学很多很多的东西。</p><h2 id="这几天">这几天</h2><p>昨天晚上为自己的博客，换了个主题—<code>yilia</code>,样式我很喜欢。最近在学css的相关知识，可以试着自定义一些东西（所谓的learn by doing)。但是主题配置似乎出现了些问题，昨天弄了好久也没解决。</p><p>想着今天早上把它给解决掉，但又遇到了一个新的主题—<code>Material</code>。也让我非常惊艳。跟之前手机用过的一个主题非常相似。而更让我惊讶的是，这个主题的主要开发者，竟然是两个未满20岁的少年。有一个还在上高中。瞬间就感觉到了无法言状的差距感。不过仔细想想倒也很正常，有些人早早就知道了自己喜欢干什么，并且能坚持自己的爱好。但更多的人，上了很多年的学也不知道自己该干些什么。</p><p>坦白讲，大学的几年里。我在不断地尝试一些东西，看了不少的书。Java，python，软件测试，Android，web安全等等。尽管很多都是浮光掠影，但也大致确立了知识的体系。从开始系统地接触前端到现在，还不到两个月的时间。我进步了不少，也试着去接触一些前沿的技术。不过呢，还是要从基础学起， HTML+CSS+JavaScript必须吃透。我在前几周的时间里，学习了它们的基础知识。进阶阶段的系统学习，却迟迟没有开始。</p><h2 id="胡思乱想">胡思乱想</h2><p>这几天，心情很烦躁。学习效率低下。没错，是我想的太多了。我在想找工作的事。人很难不受到环境的一丁点影响。当然，有时候我会幻想自己能达到技术压倒一切的境界，这样便可以忽略外在环境的嘈杂和虚幻（让我闭上眼睛，多傻笑一会儿）。</p><p>我先去跑会儿步去~~~</p><p>跑完步回来，又洗了个头。还是想着把这篇文章结个尾。<br>总觉得，每天跑完步从操场回宿舍的那段路，是非常舒适的。心中不会有太多的想法，脚步轻快又自在。</p><p><code>无知和弱小从来不是生存的障碍，傲慢才是</code></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NaN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爱你就像爱生命</title>
      <link href="/2017/10/15/%E7%88%B1%E4%BD%A0%E5%B0%B1%E5%83%8F%E7%88%B1%E7%94%9F%E5%91%BD/"/>
      <url>/2017/10/15/%E7%88%B1%E4%BD%A0%E5%B0%B1%E5%83%8F%E7%88%B1%E7%94%9F%E5%91%BD/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>在人世间有一种庸俗势力的大合唱，谁一旦对它屈服，就永远沉沦了，真是可惜。有无数为人师表的先生们在按照他们自己的模样塑造别人，真是可惜。</li></ul></blockquote><hr><blockquote><ul><li>小波的文字极有特色。就像帕瓦罗蒂一张嘴，不用报名。你就知道这是帕瓦罗蒂，胡里奧一唱你就知道是胡里奧一样，小波的文字也是这样，你一看就知道出自他的手笔。台湾李敖说过，他是中国白话文第一把手，不知道他看了王小波的文字还会不会这么说。真的，我就是这么想的。</li></ul></blockquote><hr><blockquote><ul><li>虽然小波出人意料地、过早地离开了我，但是回忆我们从相识到相爱到永別的二十年，我没有什么可抱怨的：我们曾经拥有幸福，拥有爱，拥有成功，拥有快乐的生活。</li></ul></blockquote><hr><blockquote><ul><li>生活过，写作过，爱过。</li></ul></blockquote><hr><blockquote><ul><li>人就像一本书，你要挑一本好看的书来看。我觉得我生命中最大的收获和幸运就是，我挑了小波这本书来看。</li></ul></blockquote><hr><blockquote><ul><li>自从我认识了你，我觉得所有的人都黯然失色，再也没有谁比你更好了，我的菩提树……无论是欢乐和悲伤，我总到那里去。“是啊，我的心总向往你，特别是在悲伤的时候。”</li></ul></blockquote><hr><blockquote><ul><li>我太懒了，太不像话了，居然一个星期不给你写信，你为什么原谅了我呢？我现在要给你写信，去他的政治经济学和那个瘦高个老师！他们休想扰乱我。再说王某人也轻易不会吃二分的。</li></ul></blockquote><hr><blockquote><ul><li>雾中散步，真正奇妙。谁都会有片刻的恍惚，觉得一切都走到了终结，也许再不能走下去了。</li></ul></blockquote><hr><blockquote><ul><li>昨天我看见了好多情侶，我觉得很喜欢那些人。过去我在马路边看见别人依依不舍就觉得肉麻。现在我忏悔。居然我能到了敢在大街上接吻的地步，我很自豪。</li></ul></blockquote><hr><blockquote><ul><li>我越来越认为，平庸的生活、为社会扮演角色，把人都榨干了。我们做的每一件事都是尽义务，我们自己的价值标准也是被规定了的。做人的乐趣不是太可怜了吗？难怪有人情愿做一只疯狗呢。</li></ul></blockquote><hr><blockquote><ul><li>如果我会发光，就不必害怕黑暗。如果我自己是那么美好，那么一切恐惧就可以烟消云散。</li></ul></blockquote><hr><blockquote><ul><li>一本在你手中待过很长时间的好书就像一张熟悉的面孔一样，永远不会忘记。</li></ul></blockquote><hr><blockquote><ul><li>她是瘦小的身材，消瘦的脸，眼睛真大啊。可爱的双眼皮，棕色的眼睛！对着我的时候这眼睛永远微笑而那么有光彩。光洁的小额头，孩子气的眉毛，既不太浓，也不太疏，长得那么恰好，稍微有点儿弯。端立的鼻子，坚决的小嘴，消瘦的小脸，那么秀气！柔软的棕色发辫。脖子也那么瘦：微微地动一下就可以看见肌肉在活动。</li></ul></blockquote><hr><blockquote><ul><li>我起初怀疑，一对不美的人的恋爱能是美的吗？后来的事实证明，两颗相爱的心在一起可以是美的。我们爱得那么深。</li></ul></blockquote><hr><blockquote><ul><li>以后咱们真的再也不能在野外过星期天了，要不我非一星期病一次不可。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爱情 </tag>
            
            <tag> 王小波 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>沉默的大多数</title>
      <link href="/2017/10/02/%E6%B2%89%E9%BB%98%E7%9A%84%E5%A4%A7%E5%A4%9A%E6%95%B0/"/>
      <url>/2017/10/02/%E6%B2%89%E9%BB%98%E7%9A%84%E5%A4%A7%E5%A4%9A%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>编导们利用&quot;一切尽在不言中&quot;的文化氛围，确实是大有可为。但我们写稿子的就倒了霉：想要使文字暧昧、可意会不可言传，就只好造些新词、怪词，或者串几句英文。我现在正犯后一种毛病，而且觉得良心平安：英文虽然难懂，但毕竟是种人话，总比编出一种鬼话要强一点吧。前面所写的homo、S/M，都是英文缩写。虽然难懂，但我照用不误。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
            <tag> 王小波 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知乎周刊</title>
      <link href="/2017/09/28/%E7%9F%A5%E4%B9%8E%E5%91%A8%E5%88%8A/"/>
      <url>/2017/09/28/%E7%9F%A5%E4%B9%8E%E5%91%A8%E5%88%8A/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>我们既渴望，又恐惧真正的亲密关系。我们对爱怀有一种防御心理，这种心理给了我们安全和保障的错觉，认为它会使我们免受伤害，实际上却阻碍了我们获得所渴求的亲密感情。</li></ul></blockquote><hr><blockquote><ul><li>用一种方法，最好是只有一种方法来做一件事。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>失控</title>
      <link href="/2017/09/27/%E5%A4%B1%E6%8E%A7/"/>
      <url>/2017/09/27/%E5%A4%B1%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>创新往往发生在边缘地带，发生在不那么优化的区域。创业公司的起点往往就处在这种边缘地带中。换句话说，创新往往意味着不那么优化，意味着某种程度的低效率。但系统的活性也正是由此而来。</li></ul></blockquote><hr><blockquote><ul><li>「蜂群思维」的神奇在于，没有一只蜜蜂在控制它，但是有一只看不见的手，一只从大量愚钝的成员中涌现出来的手，控制着整个群体。它的神奇还在于，量变引起质变。要想从单个虫子的机体过渡到集群机体，只需要增加虫子的数量，使大量的虫子聚集在一起，使它们能够相互交流。等到某一阶段，当复杂度达到某一程度时，「集群」就会从「虫子」中涌现出来。虫子的固有属性就蕴涵了集群，蕴涵了这种神奇。我们在蜂箱中发现的一切，都潜藏在蜜蜂的个体之中。不过，你尽管可以用回旋加速器和X光机来探查一只蜜蜂，但是永远也不能从中找出蜂巢的特性。</li></ul></blockquote><hr><blockquote><ul><li>潘菲尔德通过大胆的开颅术，在病人清醒的状态下利用电激探查其小脑活体，请他们讲述自己的感受。病人们能够回忆起非常生动的往事。电激的最微小移动能引发截然不同的想法。潘菲尔德在用探测器扫描小脑表面的同时，绘制出每个记忆在大脑中的对应位置。<br>他的第一个意外发现是，那些往事是可以重播的，就如同在若干年后播放录音机一般——「摁下重播键」。潘菲尔德在描述一位二十六岁妇女癫痫发作后的幻觉时用了「回闪」这个词：「同样的回闪出现了几次，都与她表亲的家或去那里的旅行有关——她已经有十到十五年没有去那里了，但小时候常去。」 潘菲尔德对活脑这块处女地的探索使得人们形成了根深蒂固的印象：脑半球就好比出色的记录装置，其精彩的回放功能似乎更胜过时下流行的留声机。我们的每个记忆都被精确地刻划在它自己的碟片上，由不偏不倚的大脑忠实地将其分类归档，并能像自动点唱机中的歌曲一样，摁动正确的按扭就能播放出来，除非受到暴力的损伤。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命运 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嫌疑犯X的献身</title>
      <link href="/2017/09/26/%E5%AB%8C%E7%96%91%E7%8A%AFX%E7%9A%84%E7%8C%AE%E8%BA%AB/"/>
      <url>/2017/09/26/%E5%AB%8C%E7%96%91%E7%8A%AFX%E7%9A%84%E7%8C%AE%E8%BA%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>别急，他告诫自己。急躁不能解决任何问题，这个方程式一定有完美的答案。</li></ul></blockquote><hr><blockquote><ul><li>靖子走出出租车时的表情，石神至今仍印象深刻，那是他从未见过的娇艳面容。既非母亲也非店员的表情，才是她的本来面目。那时她展现的，是身为女人的一面。在这个人面前，她展现了绝不让我看见的另一面……</li></ul></blockquote><hr><blockquote><ul><li>可惜太多老师不愿回答这种单纯的疑问。不，是答不出，石神知道，他们也没真正理解数学，只是按照既定的教材照本宣科，只想着让学生拿到好分数。对森冈提出的这种质疑，恐怕只会觉得不耐烦。</li></ul></blockquote><hr><blockquote><ul><li>她用力吸了一口气，双手捂嘴。心中猛地一撞，她差点儿失声尖叫。她全身血液沸腾，紧接着又全身冰凉。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础</title>
      <link href="/2017/09/24/JavaScript_01/"/>
      <url>/2017/09/24/JavaScript_01/</url>
      
        <content type="html"><![CDATA[<p>过去的一周里，在学习JavaScript的一些知识。确实，这跟之前学的Java，c有很大的不同。JavaScript作为曾经最被误解的语言（被称作丑陋，无用的玩具），到现在成为最为流行和重要的语言之一。这让任何人都会感到不可思议。这也恰是它吸引我的地方。想要感受它的魔力，先从基础开始。对于JavaScript，我会分为三个部分—基础，进阶和高级来学习。</p><h2 id="基本知识">基本知识</h2><blockquote><p>JavaScript=ECMAScript+DOM+BOM</p></blockquote><ul><li>ECMAScript JavaScript语言规范</li><li>DOM 针对HTML的编程接口</li><li>BOM 针对浏览器的编程接口</li></ul><blockquote><p>标识符</p></blockquote><ul><li>第一个字符必须是字母，下划线或美元符号</li><li>其他字符可以是字母，下划线，美元符号或数字</li></ul><h2 id="strict-mode">strict mode</h2><h3 id="目的">目的</h3><ul><li>明确禁止一些不合理、不严谨的语法，减少JavaScript的一些怪异行为。</li><li>增加更多报错的场合，消除代码运行的一些不安全之处，保证代码运行的安全。</li><li>提高编译器效率，增加运行速度。</li><li>为未来新版本的JavaScript做好铺垫。</li></ul><h3 id="方法">方法</h3><ol><li>全局</li></ol><pre><code class="language-javascript">&lt;script&gt;  'use strict';  console.log('这是严格模式');&lt;/script&gt; </code></pre><ol start="2"><li>函数</li></ol><pre><code class="language-javascript">function strict() {  'use strict';  return '这是严格模式';}function strict2() {  'use strict';  function f() {    return '这也是严格模式';  }  return f();}</code></pre><h3 id="过渡">过渡</h3><p><strong>非函数代码块不得声明函数</strong></p><pre><code class="language-javascript">'use strict';if (true) {  function f1() { } // 语法错误}for (var i = 0; i &lt; 5; i++) {  function f2() { } // 语法错误}</code></pre><ul><li>上面代码在if代码块和for代码块中声明了函数，在严格模式下都会报错</li></ul><p><strong>保留字</strong></p><pre><code class="language-javascript">function package(protected) { // 语法错误  'use strict';  var implements; // 语法错误}</code></pre><ul><li>严格模式新增了一些保留字：implements, interface, let, package, private, protected, public, static, yield。使用这些词作为变量名将会报错</li><li>此外，ES5本身还规定了另一些保留字（class, enum, export, extends, import, super），以及各大浏览器自行增加的const保留字，也是不能作为变量名的</li></ul><p>详细关于<a href="http://javascript.ruanyifeng.com/advanced/strict.html#toc21" target="_blank" rel="noopener">严格模式</a></p><p><strong>变量</strong></p><ol><li>局部变量</li></ol><pre><code class="language-javascript">function test(){var message='hi';  //局部变量}test();alert(message);  //错误</code></pre><ol start="2"><li>全局变量</li></ol><pre><code class="language-javascript">function test(){ message='hi';  //全局变量}test();alert(message);  //'hi'</code></pre><ul><li>定义局部变量时，不要漏了<strong>var</strong>，否则会造成局部变量的污染</li></ul><h2 id="数据类型">数据类型</h2><h3 id="typeof运算符">typeof运算符</h3><blockquote><p>原始类型</p></blockquote><pre><code class="language-javascript">typeof 123 // &quot;number&quot;typeof '123' // &quot;string&quot;typeof false // &quot;boolean&quot;</code></pre><ul><li>数值、字符串、布尔值分别返回number、string、boolean</li></ul><blockquote><p>函数</p></blockquote><pre><code class="language-javascript">function f() {}typeof f// &quot;function&quot;</code></pre><ul><li>函数返回function</li></ul><blockquote><p>undefined</p></blockquote><pre><code class="language-javascript">typeof undefined// &quot;undefined&quot;</code></pre><ul><li>undefined返回undefined<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></li></ul><pre><code class="language-javascript">// 错误的写法if (v) {  // ...}// ReferenceError: v is not defined// 正确的写法if (typeof v === &quot;undefined&quot;) {  // ...}</code></pre><ul><li>用来判断语句</li></ul><blockquote><p>其他</p></blockquote><pre><code class="language-javascript">typeof window // &quot;object&quot;typeof {} // &quot;object&quot;typeof [] // &quot;object&quot;typeof null // &quot;object&quot;</code></pre><ul><li>除上述情况外，其他情况都返回<strong>object</strong></li></ul><h3 id="undefined和null">undefined和null</h3><p>两者都可以表示“没有”，含义很相似，语法效果几乎一样。</p><pre><code class="language-javascript">if (!undefined) {  console.log('undefined is false');}// undefined is falseif (!null) {  console.log('null is false');}// null is falseundefined == null// true</code></pre><ul><li>在if语句中，它们都会被自动转为false</li></ul><p><strong>用法和含义</strong></p><pre><code class="language-javascript">// 变量声明了，但没有赋值var i;i // undefined// 调用函数时，应该提供的参数没有提供，该参数等于undefinedfunction f(x) {  return x;}f() // undefined// 对象没有赋值的属性var  o = new Object();o.p // undefined// 函数没有返回值时，默认返回undefinedfunction f() {}f() // undefined</code></pre><ul><li>当⼀个变量是为了保存⼀个对象，但没办法⽴即初始化的时候，应该为之分配⼀个null值</li></ul><h3 id="bull">bull</h3><p>如果JavaScript预期某个位置应该是布尔值，会将该位置上现有的值自动转为布尔值</p><blockquote><p>undefined<br>null<br>false<br>0<br>NaN<br>&quot;&quot;或’’（空字符串）</p></blockquote><ul><li>转换规则是除了上面六个值被转为false，其他值都视为true</li></ul><pre><code class="language-javascript">if ([]) {  console.log(true);}// trueif ({}) {  console.log(true);}// true</code></pre><ul><li>需要特别注意的是，空数组（[]）和空对象（{}）对应的布尔值，都是<strong>true</strong>。</li></ul><h3 id="number">number</h3><blockquote><p>整数和浮点数</p></blockquote><p>JavaScript 内部，所有数字都是以<strong>64位浮点数</strong>形式储存，即使整数也是如此。JavaScript 语言的底层根本没有整数，所有数字都是小数（64位浮点数）。容易造成混淆的是，<strong>某些运算只有整数才能完成</strong>，此时 JavaScript 会自动把64位浮点数，转成32位整数，再进行运算。</p><blockquote><p>特殊数值</p></blockquote><p><strong>+0和-0</strong></p><pre><code class="language-javascript">-0 === +0 // true 0 === -0 // true 0 === +0 // true+0 // 0-0 // 0(-0).toString() // '0'(+0).toString() // '0'</code></pre><ul><li>几乎所有场合，正零和负零都会被当作正常的0。</li></ul><pre><code class="language-javascript">(1 / +0) === (1 / -0) // false</code></pre><ul><li>除以正零得到+Infinity，除以负零得到-Infinity，这两者是不相等的</li></ul><p><strong>NaN</strong></p><blockquote><p>NaN是 JavaScript 的特殊值，表示“非数字”（Not a Number），主要出现在将字符串解析成数字出错的场合。</p></blockquote><pre><code class="language-javascript">NaN + 32 // NaNNaN - 32 // NaNNaN * 32 // NaNNaN / 32 // NaNNaN === NaN // false</code></pre><ul><li>NaN与任何数（包括它自己）的运算，得到的都是NaN</li></ul><p><strong>Infinity</strong></p><blockquote><p>Infinity表示“无穷”，用来表示两种场景。一种是一个正的数值太大，或一个负的数值太小，无法表示；另一种是非0数值除以0，得到Infinity。</p></blockquote><pre><code class="language-javascript">//场景一Math.pow(2, Math.pow(2, 100))// Infinity// 场景二0 / 0 // NaN1 / 0 // Infinity</code></pre><h3 id="string">string</h3><p><strong>字符串与数组</strong></p><pre><code class="language-javascript">var s = 'hello';s[0] // &quot;h&quot;s[1] // &quot;e&quot;s[4] // &quot;o&quot;// 直接对字符串使用方括号运算符'hello'[1] // &quot;e&quot;</code></pre><ul><li>字符串可以被视为字符数组，因此可以使用数组的方括号运算符，用来返回某个位置的字符（位置编号从0开始）</li></ul><pre><code class="language-javascript">var s = 'hello';delete s[0];s // &quot;hello&quot;s[1] = 'a';s // &quot;hello&quot;s[5] = '!';s // &quot;hello&quot;</code></pre><ul><li>字符串内部的单个字符无法改变和增删</li></ul><p><strong>length属性</strong></p><pre><code class="language-javascript">var s = 'hello';s.length // 5s.length = 3;s.length // 5s.length = 7;s.length // 5</code></pre><ul><li>字符串的length属性无法改变，但是不会报错</li></ul><h3 id="object">object</h3><blockquote><p>对象（object）是JavaScript的核心概念，也是最重要的数据类型。JavaScript的所有数据都可以被视为对象。简单说，所谓对象，就是一种无序的数据集合，由若干个“键值对”（<strong>key-value</strong>）构成。</p></blockquote><p><strong>生成方法</strong></p><pre><code class="language-javascript">var o1 = {}; //简洁明了var o2 = new Object(); //采用构造函数的写法清晰地表示了意图var o3 = Object.create(Object.prototype); //一般用在需要对象继承的场合</code></pre><p><strong>属性</strong></p><pre><code class="language-javascript">var o = {  p: function (x) {    return 2 * x;  }};o.p(1)// 2</code></pre><ul><li>对象的每一个“键名”又称为“属性”（property），它的“键值”可以是任何数据类型。如果一个属性的值为函数，通常把这个属性称为“方法”，它可以像函数那样调用</li></ul><pre><code class="language-javascript">var obj = {};obj.foo = 123;obj.foo // 123</code></pre><ul><li>属性可以动态创建，不必在对象声明时就指定</li></ul><p>这篇文章是关于JavaScript基础的学习总结，暂不深入讨论关于object的<a href="http://javascript.ruanyifeng.com/grammar/object.html" target="_blank" rel="noopener">更多内容</a></p><h3 id="function">function</h3><p><strong>声明</strong></p><ol><li>function命令</li></ol><pre><code class="language-javascript">function print(s) {  console.log(s);}</code></pre><ol start="2"><li>函数表达式</li></ol><pre><code class="language-javascript">var print = function(s) {  console.log(s);};</code></pre><ol start="3"><li>采用函数表达式声明函数时，function命令后面不带有函数名。如果加上函数名，该函数名只在函数体内部有效，在函数体外部无效。</li></ol><pre><code class="language-javascript">var print = function x(){  console.log(typeof x);};x// ReferenceError: x is not definedprint()// function</code></pre><ul><li>这样写的用处有两个一是可以在函数体<strong>内部调用自身</strong>，二是方便<strong>除错</strong>（除错工具显示函数调用栈时，将显示<strong>函数名</strong>，而不再显示这里是一个匿名函数）</li></ul><p><strong>return语句和递归</strong></p><ol><li>JavaScript引擎遇到return语句，就直接返回return后面的那个表达式的值，后面即使还有语句，也不会得到执行。也就是说，return语句所带的那个表达式，就是函数的返回值。</li></ol><pre><code class="language-javascript">function add(x, y) {  return x + y;}add(1, 1) // 2</code></pre><ol start="2"><li>函数可以调用自身—递归，下面计算斐波那契数列的代码，fib函数内部又调用了fib()。</li></ol><pre><code class="language-javascript">function fib(num) {  if (num === 0) return 0;  if (num === 1) return 1;  return fib(num - 2) + fib(num - 1);}fib(6) // 8</code></pre><h2 id="运算符">运算符</h2><p><strong>加法运算符</strong></p><pre><code class="language-javascript">'1' + {foo: 'bar'} // &quot;1[object Object]&quot;'1' + 1 // &quot;11&quot;'1' + true // &quot;1true&quot;'1' + [1] // &quot;11&quot;</code></pre><ul><li>由于运算符左边是一个字符串，导致右边的运算子都会先转为字符串，然后执行字符串连接运算</li></ul><pre><code class="language-javascript">'3' + 4 + 5 // &quot;345&quot;3 + 4 + '5' // &quot;75&quot;</code></pre><ul><li>这种由于参数不同，而改变自身行为的现象，叫做“重载”（overload）。由于加法运算符是<strong>运行时</strong>决定到底执行那种运算，使用的时候必须很小心</li></ul><p><strong>数值运算符</strong>and<strong>负数值运算符</strong></p><pre><code class="language-javascript">+true // 1+[] // 0+{} // NaN</code></pre><ul><li>数值运算符的作用在于可以将任何值转为数值（与Number函数的作用相同）</li></ul><pre><code class="language-javascript">var x = 1;-x // -1-(-x) // 1</code></pre><ul><li>负数值运算符（-），也同样具有将一个值转为数值的功能，只不过得到的值正负相反。连用两个负数值运算符，等同于数值运算符</li></ul><h2 id="语句">语句</h2><h2 id="函数">函数</h2><p>模拟函数的重载</p><blockquote><p>使用模拟函数重载来编写一个具有如下功能的函数：<br>1，如果输入参数大于三个，返回最后一个参数。<br>2，如果输入参数小于等于三个且全部为数字，则返回排序后的数组，如果最后一个数为奇数则降序排列，反之升序排列。<br>3，如果输入参数小于等于三个且包含字符串，则将所有参数强制转化为字符串联接返回。</p></blockquote><pre><code class="language-javascript">function myFunc() {  var arguLen = arguments.length  if (arguLen &gt; 3) {     //第一种情况      return arguments[arguLen-1];  }  else if (arguLen &lt;= 3) {    var numFlag = true;  //用于判断是否均为数字    var strFlag = false;  //用于判断是否包含字符串    for (var i =0; i&lt;=arguLen; ++i){      if (typeof arguments[i] != &quot;number&quot;) {        numFlag = false;      }      if (typeof arguments[i] === &quot;string&quot;) {        strFlag = true;        break;      }    }    if (numFlag) {  //第二种情况      // arguments是array-like object，故先转为数组      var args = [].slice.call(arguments,0);  //转成数组      // 最后一个参数为偶数时的情况      if (args[arguLen - 1] % 2 == 0){        return args.sort((a, b) =&gt; a - b);  //升序      }      else {        return args.sort((a,b) =&gt; b - a);  //降序      }    }    else if (strFlag) {  //第三种情况       var result = &quot;&quot;;       for (var i = 0; i &lt;= arguLen; ++i;) {         result += String(arguments[i]);       }       return result;       }      }    return;}</code></pre><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>可以用来检查一个没有声明的变量，而不报错。 <a href="#fnref1" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查令十字街84号</title>
      <link href="/2017/09/24/%E6%9F%A5%E4%BB%A4%E5%8D%81%E5%AD%97%E8%A1%9784%E5%8F%B7/"/>
      <url>/2017/09/24/%E6%9F%A5%E4%BB%A4%E5%8D%81%E5%AD%97%E8%A1%9784%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>总是在最边缘最异质的人身上，才得到自身最清晰的印记。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爱情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>白夜行</title>
      <link href="/2017/09/22/%E7%99%BD%E5%A4%9C%E8%A1%8C/"/>
      <url>/2017/09/22/%E7%99%BD%E5%A4%9C%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>我的天空里没有太阳，总是黑夜，但并不暗，因为有东西代替了太阳。虽然没有太阳那么明亮，但对我来说已经足够。凭借着这份光，我便能把黑夜当成白天。你明白吗？我从来就没有太阳，所以不怕失去。</li></ul></blockquote><hr><blockquote><ul><li>而是在眼神交会的那一刹那，为男孩眼里蕴含的阴沉黑暗所冲击。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>精进</title>
      <link href="/2017/09/20/%E7%B2%BE%E8%BF%9B/"/>
      <url>/2017/09/20/%E7%B2%BE%E8%BF%9B/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>种一棵树最好的时间是十年前，其次是现在。</li></ul></blockquote><hr><blockquote><ul><li>很多人回首自己的大学时代，感慨的并不是时光的匆匆而逝，而是自己没有去尝试更多的机会，后来只得面临选择越来越少的窘境。</li></ul></blockquote><hr><blockquote><ul><li>关键是改变自己的角色，让自己从一个“学习者”的角色变成一个“探索者”的角色。探索者当然也是学习者，但他除了通过学习来掌握现有的知识外，他还要进一步深入地探索，突破教师、教材、课程计划给自己的种种限定，建立自己独特的研究轨迹，去拓展和发现一个更开阔也更深邃的世界。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心理学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一周小结</title>
      <link href="/2017/09/17/weeks_01/"/>
      <url>/2017/09/17/weeks_01/</url>
      
        <content type="html"><![CDATA[<p>这段日子，时间过的很快。转眼之间，又过去了一个星期。这个星期我做了什么呢？我能记起来的是，系统的学习了HTML和CSS的一部分知识。这是第一次我把一本专业书吃透，书翻了一遍又一遍，视频也反复的看。跟之前碎片化的学习相比，效果的确是完全不一样。体现在更深层次的理解和运用上。很多人学到的东西，往往不会用。归根结底，还是还是没有真正的吃透知识，仅仅停留在看似懂的层面上。</p><p>学习完CSS工作原理这部分的知识后，我写了一篇总结的文章。我的写作能力和执行力确实需要加强。完成这篇文章，花了我近两天的时间。效率实在太低了。需要好好地加强这方面的能力。多阅读，多思考。不过，我这周的阅读时间太少了。睡觉之前还是要看看狗耳朵日报推送的新闻。</p><p>还能记起来的是看了一场精彩的球赛。上港在主场4：0击败恒大，本来以为次回合没什么悬念了。可结果恒大硬是把上港拖入了点球大战。而且比赛过程，也是一波三折。总之这场比赛看得很过瘾，不过也挺累的。加时赛加上点球大战，足足进行了3个小时。我也不知道我为什么喜欢看球赛，而且是喜欢一个人看球赛。跟那些完全不懂球的人一起看比赛，简直是一种折磨（尽管我也只是个伪球迷而已）。</p><p>这周，收获的确是有的。但是，还是有相当一部分的时间，没有好好利用上。仔细想想，这段时间我在干什么呢，无非是刷一些毫无营养的消息。还有胡思乱想。这会手机不在身旁，我反而觉得更加的舒适（没错，就是这样），不去想是不是有什么错过的重大消息。绝大部分情况下，根本就没什么值得关注的消息。我承认，我也和大多数人一样，患上了手机焦虑症，总感觉手机有消息提醒。而且，我把好友动态关了又开，开了又关。我决定了，关闭好友动态一周。其实，“好友”每天发的也都是些无关痛痒的东西。</p><p>对了，这周除了有一天下雨没去跑步之外，每天夜晚都跑步二十分钟。跑步就和写作一样，完成之后，心里还是有些成就感的。</p><p>最后，再来说说写作吧。搭建完这个博客的前几天，我写了两篇随笔。我经常会打开百度统计，看看有没有人来看我写的东西。结果是，除了前两天有人来看之外，后来再也无人问津。既然是博客，内心还是希望有人来看我写的东西的。不过，在这个时代，每个人都只会去刷朋友圈，有谁会闲着没事来看博客呢。好吧，那就只当是自娱自乐了。不过，我还是挺喜欢写作带来的乐趣的。</p><p>跑完步，洗了个身子，喝了杯牛奶，马上就要到熄灯的时候了，一天也就这样结束了。<br>果然，很多事情不像想象中那么美好。只希望<code>生活过，写作过，爱过。</code></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css工作原理</title>
      <link href="/2017/09/16/css_01/"/>
      <url>/2017/09/16/css_01/</url>
      
        <content type="html"><![CDATA[<p>这两天的时间在学习css的基础内容，主要是看《css设计指南》再结合一些视频，自己敲敲代码。这种学习方式还不错，能让我更好地理解css的基本原理。我打算分三部分来学习总结css这部分的内容。这是第一部分，主要复习css规则，<strong>选择器</strong>，以及继承和层叠。</p><h2 id="添加样式的三种方法">添加样式的三种方法</h2><ol><li>行内样式 =&gt; 写在特定HTML标签的style属性</li></ol><pre><code class="language-css">&lt;p style=&quot;font-family:arial;color:red;font-size:20px;&quot;&gt;一个段落。&lt;/p&gt;</code></pre><hr><ol start="2"><li>嵌入样式 =&gt; 放在HTML文档的head元素中</li></ol><pre><code class="language-css">&lt;head&gt;  &lt;style type=&quot;text/css&quot;&gt;    body {      background-color:yellow;    }    p {      color:blue;    }  &lt;/style&gt;&lt;/head&gt;</code></pre><hr><ol start="3"><li>链接样式 =&gt; 把样式放在一个单独的文件里（样式表），可以在任意多个HTML页面中链接同一个样式表</li></ol><pre><code class="language-html">&lt;head&gt;  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt;&lt;/head&gt;</code></pre><p><strong>优先级</strong>   行内样式 &gt; 嵌入样式 &gt; 链接样式（就近原则）<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><hr><h2 id="命名惯例">命名惯例</h2><p>选择器 (组) + 声明（属性+值）</p><h3 id="简单选择器">简单选择器</h3><h4 id="type-selector">type selector</h4><pre><code class="language-css">&lt;h2&gt;类型选择器&lt;/h2&gt;h2{border: 1px solid red;}</code></pre><ul><li>为h2加上红色边框</li></ul><h4 id="id-selectors">id selectors</h4><blockquote><p>语法 <strong>#id名</strong></p></blockquote><p>写法与类选择器相似，但在页面中只能唯一标识一个元素（每个id名在页面中只能用一次）</p><ol><li>用于页内导航</li></ol><pre><code class="language-css">&lt;a herf=&quot;#third&quot;&gt;article&lt;a&gt;&lt;h3 id=&quot;third&quot;&gt;article&lt;/h3&gt;</code></pre><ul><li>#表示链接的目标在当前页面，导航到同一页的h3元素位置</li></ul><hr><ol start="2"><li>返回顶部的链接</li></ol><pre><code class="language-html">&lt;a herf=&quot;#&quot;&gt;返回顶部&lt;/a&gt;</code></pre><h4 id="class-selectors">class selectors</h4><p>用于描述<strong>一组</strong>元素的样式，class可以在多个元素中使用</p><blockquote><p>语法   <strong>.类名</strong></p></blockquote><pre><code class="language-css">.center {text-align:center;}</code></pre><hr><blockquote><p>标签带类选择器</p></blockquote><pre><code class="language-css">p.center {text-align:center;}</code></pre><hr><blockquote><p>多类选择器</p></blockquote><pre><code class="language-css">.center.small {font-size:20px;}</code></pre><h4 id="什么时候用id-什么时候用类">什么时候用ID，什么时候用类</h4><ul><li>ID表示的是页面中的一个唯一的HTML元素，利用唯一ID，可以方便地定位到一个元素以及它的子元素。<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></li><li>类的目的是为了标识一组具有相同特征的元素，类可以让不同标签名的元素应用相同的样式。</li></ul><h3 id="属性选择器">属性选择器</h3><blockquote><p>语法 E[foo]  <em>an E element with a foo attribute <em></em></em></p></blockquote><pre><code class="language-css"> &lt;lable&gt; &lt;input type=&quot;text&quot; disabled /&gt; &lt;/lable&gt; input[disabled]{cursor : not-allowed;}</code></pre><ul><li>选中属性值为disabled的文本框，鼠标滑过时添加禁用样式</li></ul><blockquote><p>语法 E[foo^=“bar”] <em>an E element whose foo attribute value begins exactly with the string “bar”<em></em></em></p></blockquote><pre><code class="language-css">a[href^=&quot;#&quot;] {  background-color: blue;}&lt;a href=&quot;#&quot; &gt;top&lt;/a&gt;&lt;a href=&quot;#test&quot; &gt;test&lt;/a&gt;</code></pre><ul><li>选中属性值以#号开头的a元素，为其添加背景为蓝色的样式</li></ul><p><a href="https://www.w3.org/TR/selectors4/" target="_blank" rel="noopener">更多语法</a></p><hr><h3 id="上下文选择器">上下文选择器</h3><ol><li>e1 e2</li><li>e1 &gt; e2  子选择器</li><li>e1 + e2  紧邻同胞选择器 <em>e2必须紧跟在e1后<e m></e></em></li><li>e1 ~ e2  一般同胞选择器</li><li><code>*</code> 通用选择器 <strong>可以用它构成非子选择器</strong></li></ol><h3 id="伪类选择器">伪类选择器</h3><h4 id="结构化伪类选择器">结构化伪类选择器</h4><ol><li>e:first-child e:last-child</li></ol><pre><code class="language-html">&lt;ol  class=&quot;results&quot;&gt;   &lt;li&gt; chird1 &lt;/li&gt;   &lt;li&gt; child2 &lt;/li&gt;   &lt;li&gt; child3 &lt;/li&gt;&lt;/ol&gt; </code></pre><pre><code class="language-html">ol.results li:first-child{color: blue;}</code></pre><ul><li>选中child1,为其添加字体为蓝色样式</li></ul><pre><code class="language-css">ol.results li:last-child{color: red;} </code></pre><ul><li>选中child3,为其添加字体为红色样式</li></ul><ol start="2"><li>e:nth-child(n)</li></ol><pre><code class="language-html">&lt;tr&gt;  &lt;td&gt;一班&lt;/td&gt;  &lt;td&gt;30&lt;/td&gt;  &lt;td&gt;89&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;  &lt;td&gt;二班&lt;/td&gt;  &lt;td&gt;35&lt;/td&gt;  &lt;td&gt;85&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;  &lt;td&gt;三班&lt;/td&gt;  &lt;td&gt;32&lt;/td&gt;  &lt;td&gt;80&lt;/td&gt;&lt;/tr&gt; </code></pre><hr><pre><code class="language-css">table tbody tr:nth-child(2n+1){background-color: yellow;}</code></pre><ul><li>选中表格的奇数行，添加背景为黄色的样式，提高了表格的可读性</li></ul><h4 id="ui伪类选择器">UI伪类选择器</h4><ol><li>链接伪类</li></ol><ul><li>Link 等着用户点击</li><li>Visited 用户此前点击过这个链接</li><li>Hover 鼠标指针正悬停在链接上</li><li>Active 链接正在被点击（鼠标在元素上按下，还没有被释放）</li></ul><ol start="2"><li>:focus伪类</li></ol><ul><li>用户点击表单中的文本字段时会获得焦点</li></ul><ol start="3"><li>:target伪类</li></ol><pre><code class="language-css"> &lt;a href=&quot;#more_info&quot;&gt;更多&lt;/a&gt; &lt;h2 id=&quot;more_info&quot;&gt;指向这里&lt;/h2&gt; h2:target {background: yellow;}</code></pre><ul><li>点击链接时,位置跳转到h2，并为其添加背景为黄色的样式</li></ul><ol start="4"><li>:checked伪类</li></ol><ul><li>单选框或多选框被选中时，元素就会被选中</li></ul><h3 id="伪元素选择器">伪元素选择器</h3><ol><li>e::first-letter 选中e元素的第一个字母</li><li>e::first-line 选中e元素的第一行</li><li>e::before和::after 可以在e元素前面或后面添加特殊的内容</li></ol><pre><code class="language-css">&lt;p class=&quot;age&quot;&gt;22&lt;/p&gt;p.age::before{content:&quot;Age: &quot;;}P.age::after{content:&quot; years.&quot;;}</code></pre><ul><li>输出结果为 Age: 22 years.</li></ul><h2 id="继承">继承</h2><pre><code class="language-css">body{font-size:18px;}</code></pre><ul><li>全站的主字体大小只要在某个上层元素上指定即可，无需在每一个标签上分别指定。</li></ul><h2 id="层叠">层叠</h2><h3 id="样式来源">样式来源</h3><p>浏览器层叠各个来源样式的顺序</p><ul><li>浏览器默认样式表</li><li>用户样式表</li><li>链接样式表</li><li>嵌入样式</li><li>行内样式</li></ul><h3 id="层叠规则">层叠规则</h3><ol><li>ID&gt;Class&gt;Type</li><li>行内&gt;嵌入&gt;链接<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></li><li>设定的样式胜过继承的样式</li></ol><h3 id="计算特指度">计算特指度</h3><p>I-C-T</p><ul><li>选择符有一个ID，就在I的位置加1</li><li>选择符有一个类，就在C的位置加1</li><li>选择符有一个元素（标签）名，就在T位置加1</li></ul><blockquote><p>p <strong>0-0-1</strong>=1<br>p.largetext <strong>0-1-1</strong>=11<br>p#largetext <strong>1-0-1</strong>=101<br>body p#largetext <strong>1-0-2</strong>=102<br>body p#largetext ur.mylist <strong>1-1-3</strong>=113</p></blockquote><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>相同权值情况下 <a href="#fnref1" class="footnote-backref">↩</a></p></li><li id="fn2" class="footnote-item"><p>tips:  在页面的每个顶级区域添加一个ID，能得到明确的上下文，便于在编写CSS时只选择嵌套在相应区域内的标签 <a href="#fnref2" class="footnote-backref">↩</a></p></li><li id="fn3" class="footnote-item"><p>为同一个标签的同一个属性定义的样式 <a href="#fnref3" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ONE</title>
      <link href="/2017/09/15/one/"/>
      <url>/2017/09/15/one/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>真正的教育，从来不是点石成金、立地成佛的技巧，而是一段春风化雨、自然无为的过程。就像一棵树摇动另一棵树，一朵云推动另一朵云，一个灵魂唤醒另一个灵魂。它没有声响，它只是让走在前面的人，做好自己的事，走好自己的路，然后，任由改变自然发生。</li></ul></blockquote><hr><blockquote><ul><li>我能否这辈子重新来过？ 还会犯下不可原谅的同样错误吗？ 会的，只要有半点机会，会的。</li></ul></blockquote><hr><blockquote><ul><li>当我可以享受与你相对沉默，我就知道，你是那个对的人。</li></ul></blockquote><hr><blockquote><ul><li>肤浅的恋爱跟一部美剧、一台演唱会、一杯咖啡、一个电脑游戏具备同种功能，打发无聊和孤独，满足虚荣和欲望。唯独回避心灵深切的感受。</li></ul></blockquote><hr><blockquote><ul><li>也会去想，是不是找个男朋友会好一些。但对自己要求高了之后，对另一半的期许也会更高，自己也清楚，想找的他一定还在远方。现在能做的，只是像打磨器物一样，让时光把我打磨得更好。</li></ul></blockquote><hr><blockquote><ul><li>你要做一个不动声色的大人了。不准情绪化，不准偷偷想念，不准回头看。去过自己另外的生活</li></ul></blockquote><hr><blockquote><ul><li>见到她的那一刻，他便知道，一件无可挽回的事终于在自己的命运中发生了。</li></ul></blockquote><hr><blockquote><ul><li>本地人普通话讲得蹩脚，祥和强是分不清的。他们说，阿强好，阿强信得过，好像阿祥也是从前的产物一样，有一种不言自喻的优质感。</li></ul></blockquote><hr><blockquote><ul><li>好像“忙碌”、“急躁”才是这个时代每位年轻人身上最大的特质。大家都迫切地想要融入大时代，看起来每个人都有“很要紧”的事情要去完成，但其实“挤下来”的时间也不过被虚掷在了追捧网络热点，快速消费流行品上面。所谓的忙碌都是假相，从一个场景中迅速抽身也不过是奔赴下一场虚无，每个人都太急躁太混乱了。</li></ul></blockquote><hr><blockquote><ul><li>他们都有种人类共通的虚伪，刻意地隐藏自己的秘密和渴望，尽量让自己做一个体面的人。但他们的内核，都是不堪的，甚至懦弱的。</li></ul></blockquote><hr><blockquote><ul><li>像《彗星》结尾说的，世界上有很多个平行空间，每个空间里都有我们。有的空间里，我们在打闹，有的空间里，我们恨不得杀死对方，有的空间里，我们举杯相庆。也就是说，总存在一个空间里，我会有一个更好的版本，过着比现在更好的生活。</li></ul></blockquote><hr><blockquote><ul><li>松浦弥太郎在《今天也要用心过生活》里说，“我倾向于把坏了的东西继续使用，甚至觉得东西坏掉的那一刻才是你们的关系真正开始的时候，不要急于马上丢弃添购新品，而是下决心修好它。与人交往也是一样，经过冲撞、摩擦、破裂产生嫌隙，然后慢慢修复它，这才是你们深层次关系的真正开始。”</li></ul></blockquote><hr><blockquote><ul><li>马克对此万分歉疚，做爱时简直想把自己嵌进辛束身体里。</li></ul></blockquote><hr><blockquote><ul><li>所以没有什么不是可以重新开始的，即使成为灾难的废墟，祭奠和不被遗忘仍有它最大的价值。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人类简史</title>
      <link href="/2017/09/15/%E4%BA%BA%E7%B1%BB%E7%AE%80%E5%8F%B2/"/>
      <url>/2017/09/15/%E4%BA%BA%E7%B1%BB%E7%AE%80%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>中国人、印度人、穆斯林和西班牙人分属不同文化，在大部分事情上意见相左，但究竟为什么大家都同样相信黄金有价？为什么不是西班牙人相信黄金，穆斯林相信大麦，印度人相信贝壳，中国人相信丝绸？经济学家已经提出现成的答案。在贸易连接两个区域的时候，只要是能够运送的货品，就会受到供需力量的影响，让价格达到平衡。</li></ul></blockquote><hr><blockquote><ul><li>如果要在过去500年间挑出一个最重大、具代表性的一刻，一定就是1945年7月16日上午5点29分45秒。就在这一秒，美国科学家在新墨西哥的阿拉莫戈多引爆了第一颗原子弹。从这时开始，人类不仅有了改变历史进程的能力，更有了结束历史进程的能力。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 历史 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>围城</title>
      <link href="/2017/09/13/%E5%9B%B4%E5%9F%8E/"/>
      <url>/2017/09/13/%E5%9B%B4%E5%9F%8E/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>这一张文凭，彷佛有亚当、夏娃下身那片树叶的功用，可以遮羞包丑；小小一方纸能把一个人的空疏、寡陋、愚笨都掩盖起来。</li></ul></blockquote><hr><blockquote><ul><li>他仿美国人读音，维妙维肖，也许鼻音学得太过火了，不像美国人，而像伤风塞鼻子的中国人。他说「very well」二字，声音活像小洋狗在咕噜－－「vurry wul」。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础之HTML</title>
      <link href="/2017/09/11/html/"/>
      <url>/2017/09/11/html/</url>
      
        <content type="html"><![CDATA[<p>本来打算昨天对前几天学习的HTML基础内容，进行一下总结。但因为一些原因，还有执行力的问题，没有完成。今天的时间，暂且不去捣腾其他的事了。先把这篇总结完成。</p><h2 id="从标签开始">从标签开始</h2><blockquote><ul><li>标签 对自己所包含内容的一种描述。HTML标记内容是为了赋予网页语义<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>（semantic），也就是说让浏览器能理解网页内容。</li></ul></blockquote><p>如果把HTML比作一个房子的话，各种标签就像是房屋里的厨房，洗手间，卧室等等。它需要让客人（浏览器或者web爬虫等）知道它是什么。</p><h3 id="块级标签">块级标签</h3><ul><li>标题  <code>&lt;h1&gt;-&lt;h6&gt;</code></li><li>段落  <code>&lt;p&gt;</code></li><li>有序列表  <code>&lt;ol&gt;</code></li><li>无序列表  <code>&lt;ul&gt;</code></li><li>独立引用  <code>&lt;blockquote&gt;</code></li></ul><h3 id="行内标签">行内标签</h3><ul><li>链接 <code>&lt;a&gt;</code></li><li>图片<code>&lt;img&gt;</code></li><li>斜体<code>&lt;em&gt;</code></li><li>粗体<code>&lt;strog&gt;</code></li><li>简写<code>&lt;abbr&gt;</code></li><li>引证<code>&lt;cite&gt;</code></li><li>文本内引用<code>&lt;q&gt;</code></li></ul><h2 id="html文档结构">HTML文档结构</h2><p>了解完标签，“客人”进入房子后，就可以找到“洗手间”或是“卧室”了。但是我希望给客人更好的印象，所以我要提供房子的整体结构图。这样”客人“就能很方便的找到他们想找的东西。</p><p><img src="https://img.5bang.top/html_1.png" alt="Alt text"></p><p><code>&lt;html&gt;</code>标签是根级标签，<code>&lt;head&gt;</code>和<code>&lt;body&gt;</code>标签是它的两个直接子标签</p><h3 id="块级元素">块级元素</h3><p>相互堆叠在一起沿页面向下排列，每个元素分别占一行<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>。</p><h3 id="行内元素">行内元素</h3><p>相互并列，在空间不足以并列的情况下才沿下一行显示</p><h3 id="嵌套的元素">嵌套的元素</h3><blockquote><ul><li>在标记中嵌套的是HTML标签，在屏幕上嵌套的则是一个个盒子</li></ul></blockquote><p><strong>注意</strong>  <code>在一个包含很多元素的页面中，盒子套盒子会越套越深。因此合理的布局有助于通过标签看清页面结构，从而保证标签间正确的嵌套关系。</code></p><p><strong>tips</strong>  HTML标签的每个层次相对于上个层次缩进4个空格</p><h2 id="小结">小结</h2><ul><li>标签为内容提供结构，元素在屏幕上生成盒子</li><li>块级元素和行内元素的区别</li></ul><h2 id="还没结束">还没结束</h2><p>几个星期前Adobe正式宣布将在2020年前全部淘汰flash播放器插件，而且pc版的chrome在去年就已经不支持flash了。但是国内很多的视频网站上，格式依然为flash。</p><blockquote><ul><li>为什么国内大部分视频厂商不对PC开放HTML5?<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></li></ul></blockquote><h3 id="广告收入">广告收入</h3><ul><li>国内大部分视频网站的收入来自广告，HTML5更容易让用户绕过广告</li></ul><h3 id="技术">技术</h3><ul><li><strong>视频源存在兼容性问题。</strong> 原生的 HTML5 <code>&lt;video&gt;</code> 元素在 Windows PC 上仅支持 mp4 （H.264 编码）、webm、ogg 等格式视频的播放。而由于历史遗留问题（HTML5 视频标准最终被广泛支持以前，Flash 在 Web 视频播放方面有着统治地位），视频网站的视频源和转码设置，很多都高清源都是适用于 Flash 播放的 FLV 格式，只有少量低清晰度视频是 mp4 格式，webm 和 ogg 更是听都没听说过。比如优酷只有高清和标清才有 MP4 源，超清、1080P 等，基本都是 FLV 和 HLS（M3U8）的视频源（在 Windows PC 上支持 M3U8 比支持 FLV 更复杂，我们不做过多赘述）。</li><li><strong>HTML5 播放器容易被破解。</strong> 现在互联网环境下，资源盗版、盗链很常见。视频网站们也在花大力气防盗链。Flash 是插件，而且发展了这么多年，技术已经相当成熟，甚至可以做到在代码中直接插入编译好的 C 模块（FlasCC 技术，原称 Alchemy），很多视频网站（比如优酷和腾讯）的 Flash 播放器中都有破解难度相当大的 C 模块。如果换成 HTML5 播放，由于 JS 代码相当于开源的特性，破解者非常容易就可以下载、盗链播放视频、跳过广告。</li></ul><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>明白每个标签的用途（在什么情况下使用此标签合理） <a href="#fnref1" class="footnote-backref">↩</a></p></li><li id="fn2" class="footnote-item"><p>块级元素的父元素一般是body，body宽度默认与浏览器同宽。 <a href="#fnref2" class="footnote-backref">↩</a></p></li><li id="fn3" class="footnote-item"><p>答案整理自知乎 <a href="#fnref3" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>楼下的房客</title>
      <link href="/2017/09/11/%E6%A5%BC%E4%B8%8B%E7%9A%84%E6%88%BF%E5%AE%A2/"/>
      <url>/2017/09/11/%E6%A5%BC%E4%B8%8B%E7%9A%84%E6%88%BF%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>然而，颖如匀称修长的身段并不会使人充满邪念，而是令人想轻轻搂着、亲吻一整个下午的纯洁。</li></ul></blockquote><hr><blockquote><ul><li>罪的本身，就是一种专业，一种浪漫，一种迷人的憧憬。</li></ul></blockquote><hr><blockquote><ul><li>我笃信的人生守则不多，但第一条是：越没有话题的时候，越能看出一个人心底的样子。</li></ul></blockquote><hr><blockquote><ul><li>人们在对某一未知量的特殊价值进行评估之前，总会事先对这个量进行一番考量，此时锚定效应就会发生。</li></ul></blockquote><hr><blockquote><ul><li>二十一世纪的死大学生，大学录取率超过百分之一百二十的死大学生，哼，他们的心理素质真是弱的要命，就如同正在吐丝结茧的蚕宝宝，丝越吐越多，身体却越瘦越小。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中文传媒精选</title>
      <link href="/2017/09/11/%E4%B8%AD%E6%96%87%E4%BC%A0%E5%AA%92%E7%B2%BE%E9%80%89/"/>
      <url>/2017/09/11/%E4%B8%AD%E6%96%87%E4%BC%A0%E5%AA%92%E7%B2%BE%E9%80%89/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>阅读的乐趣就在于，它是一个广阔的世界，让你知道你的渺小，知道在历史长河中，或是站在全人类的角度看，很多东西是不必在意的，它让我们能变得更聪明一点。</li></ul></blockquote><hr><blockquote><ul><li>我几乎毫不费力就能想象出她生长的县城模样：嘈杂窄小的街道，三轮车、摩托车和小汽车拥挤在上面，街边的店面上，印着色彩鲜艳的硕大字体和明星头像，录音机大喇叭播放的廉价商品促销广告，如飞扬的尘土一样，飘荡在街道上空——这是从80年代开始的小城模样。但在这样俗艳又嘈杂的外表下，还包裹着一些新的时代内核：在充斥着教辅资料的新华书店里，可以买到各种欧美文学的作品。学校的图书馆里，还有最新的都市文学小说，村上的书也在其中，写着一个遥远的新世界：沙滩男孩的摇滚乐，Vans牌夹克，青春期坦白的性……</li></ul></blockquote><hr><blockquote><ul><li>一般都是去他办公室聊产品，但聊着聊着他就会说，最近发现几首特别好听的歌，来一起听听，结果一听就是一下午。他在办公室里抽着雪茄，我们跟着吸雾霾，几个男人都默不作声地听音乐，是一个很奇怪的画面。</li></ul></blockquote><hr><blockquote><ul><li>村上春树过着僧侣般严谨的生活。他一般在早晨4点钟起床，工作5至6个小时。下午的时候跑步10公里或者游泳1.5公里（或者两样都干），然后读一会儿书，听听音乐。晚上9点钟就寝。每天中午他在沙发上打个小盹，身体进入休息状态约半小时后会自然醒来。30年来，他将身体训练成一具非常精准的“时钟”。“我每天重复这种作息，从不改变。这种重复本身变得很重要，就像一种催眠术，我沉醉于自我，进入意识的更深处。不过，要把这种重复性的生活坚持很长时间——半年到一年，那就需要很强的意志力和体力了。从这个意义上讲，写大部头小说就像救生训练一样，体力和艺术敏感性同样重要。”他在接受《巴黎评论》记者的采访时这么说。</li></ul></blockquote><hr><blockquote><ul><li>正如现代媒介批判经典《娱乐至死》一书的作者尼尔·波兹曼所说，影像要求造成视觉冲击，要求有更多的画面。或者说，电视这种媒介的天然属性，本身就很难给人以完整的理性思考，只能是一种碎片化的，感官冲击强烈的叙事。</li></ul></blockquote><hr><blockquote><ul><li>由于众所周知的原因，过去人们只知道中朝两国唇齿相依，患难与共，在战争中培养起鲜血凝成的友谊，却不了解中朝高层之间也存在着重大的矛盾和分歧，而这些矛盾和分歧及其解决方式，与冷战在亚洲的格局有着密切关系。</li></ul></blockquote><hr><blockquote><ul><li>科学的中心思想就是，从两个看似相当矛盾的看法中找到不可或缺的平衡点，接纳新思维，不管它们是多么离奇古怪或者违背直觉，然后无情地怀疑、审视所有的想法，不论新旧。这就是在荒谬中找到真理的方法。</li></ul></blockquote><hr><blockquote><ul><li>莱特提出的命题是，人体的肠道菌群不只有助于消化，同时也是独立运作的器官，可能会引起腹泻，甚至是心理或精神疾病。</li></ul></blockquote><hr><blockquote><ul><li>朋友圈总是陷入到“羡慕别人”和“处心积虑让别人羡慕”的荒谬境地，发票圈和看票圈变得越来越无趣了。</li></ul></blockquote><hr><blockquote><ul><li>一个普通人想成为丘吉尔是不太可能的，但如果你对人与自然怀有好奇心，曾经发生在达尔文大脑中的想法，也可能会发生在你的脑子里，这个过程让人特别着迷。</li></ul></blockquote><hr><blockquote><ul><li>与恶龙缠斗过久，自身亦成为恶龙；凝视深渊过久，深渊将回以凝视。</li></ul></blockquote><hr><blockquote><ul><li>花五年的时间盯着计算机屏幕，研究人类的一些最奇怪、最黑暗的想法，可能不会让大多数人觉得是美好时光，但我发现，这些诚实的数据出乎意料地令人安慰。在不安全感、焦虑、挣扎和欲望方面，我从来都感到不那么孤独。</li></ul></blockquote><hr><blockquote><ul><li>科技的伟大有两个方向，一个是持续创新，引领人类文明向前，这是美国硅谷的基因；另一种是把领先的科技成熟化、低成本化、普及化，从而改变每一个人的生活，这是中国互联网的基因。</li></ul></blockquote><hr><blockquote><ul><li>抛弃汽车将让人们省下一笔钱。蔡斯表示，在欧洲，拥有一辆汽车的平均成本是每年6000欧元左右。如果你认为私家车将作为地位的象征继续存在，那么别忘记，马也曾经是地位的象征。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>狗耳朵日报</title>
      <link href="/2017/09/10/%E7%8B%97%E8%80%B3%E6%9C%B5%E6%97%A5%E6%8A%A5/"/>
      <url>/2017/09/10/%E7%8B%97%E8%80%B3%E6%9C%B5%E6%97%A5%E6%8A%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>我们大部分人都认为自己比一般人更加优秀：我们更有能力，更诚实可靠，更有激情并且更有天赋。而这种乐观的自我认知，在心理学会中也有一个专有名字，叫做“隐形斗篷错觉”（invisibility cloak illusion）。</li></ul></blockquote><hr><blockquote><ul><li>什么他们会有这样的想法？甚至部分人还将其视为时尚、潮流。除了人性天生的好逸恶劳外，消费资本主义大大刺激了这种不劳而获想法的盛行（所以不要嘚瑟，你所谓的时尚、特立独行，其实跟封建社会愚民的行径是一样的，都是在被社会思潮操纵而已)。</li></ul></blockquote><hr><blockquote><ul><li>你每天接受的信息是碎片化的，时间是碎片化的，认知是碎片化的，记忆就只有三天——不管是美国还是中国，不管是美国总统丑闻还是四川地震，再大的新闻事件发酵期也就是三天，随后就被杂七杂八的事冲散了。</li></ul></blockquote><hr><blockquote><ul><li>随着以深度学习为代表的人工智能技术走向主流，占据市场几十年的CPU可能被拉下王座；成本更低的FPGA、能够以更快速度处理数据的GPU、能够以更低精度进行计算的概率芯片和更多采用全新架构的专用处理器争夺市场的时代到来了。</li></ul></blockquote><hr><blockquote><ul><li>如果你真的什么都做不了，告诉你一个小技巧：想想那些你完全不想碰的事情。再做手边的事情就舒服多了。</li></ul></blockquote><hr><blockquote><ul><li>驱使这样的实业家推动世界进步的，通常不是名利，而是强烈的使命感和充满个人英雄主义色彩的梦想和野望，以及在极少数人身上可贵地伴随终生的好奇心。</li></ul></blockquote><hr><blockquote><ul><li>“Be not afraid of greatness: some men are bom great, some are achieve greatness and some have greatness thrust upon them.”</li></ul></blockquote><hr><blockquote><ul><li>犯错丢脸要趁早。该犯错的时候害怕犯错，只会在往后的岁月里犯更多错</li></ul></blockquote><hr><blockquote><ul><li>弱小和无知不是生存的障碍，傲慢才是。</li></ul></blockquote><hr><blockquote><ul><li>我一直认为最好的学习就是直接做，做砸了是学习，做好了是更好的学习。扎克伯格从来没有「学」过如何创建最大的社交网络，他直接把它做了出来。所谓的Learn by doing，在交办这件事情上，也是如此。</li></ul></blockquote><hr><blockquote><ul><li>我因为自己脆弱，所以很能同情别人的脆弱。而戏剧是检验人性的艺术，强的东西不太容易动人，你脆弱时，大家就会替你着急，帮你演戏，这时才是最动人的。</li></ul></blockquote><hr><blockquote><ul><li>我常跟演员说：「如果你表现得这么多，根本就不需要别人同情了。你的作用是让别人帮你着急，帮你演戏，因为你再怎么演，也没有观众的脑筋演得好。</li></ul></blockquote><hr><blockquote><ul><li>互联网未见得是孤独的解药，也许本身就创造了更大的孤独。热闹和孤独共生在同一个地盘上，在极致喧哗的舞台中央，站立着一个极致孤独的个体，为屏幕另一端的一个孤独个体唱歌。</li></ul></blockquote><hr><blockquote><ul><li>越低阶级的人越善于解读他人的情绪。他们在解读陌生人的表情和情绪上更加准确。——从这个意义上，低阶级的人实际上是对他人的痛苦更有共情力的。</li></ul></blockquote><hr><blockquote><ul><li>别急着抱怨才华得不到施展，当你还是个矮子的时候，指着天花板骂它太低，没啥意义。</li></ul></blockquote><hr><blockquote><ul><li>我觉得，每一家公司都有自己独特的使命。它是创始人培育的，但它最后会变成一个共同体，变成很多人梦想的共同体。就跟你的孩子一样，从小和你长在一起，但总有一天，它会变成一个独立的人。</li></ul></blockquote><hr><blockquote><ul><li>我们定义的创业者，不仅仅是指那些拥有一家公司的人，只要他是试图通过提升自己的认知，和更多的人达成协作，做一件前所未有的事，他在我们的眼里，就是一个创业者</li></ul></blockquote><hr><blockquote><ul><li>BAT用整个互联网从业人员大概500万这个人数当中的3%的劳动力，创造了这个行当近乎一半的产值。那就奇怪了，剩下的97%的人在干吗？我拿出纸来打了个草稿发现，97%的互联网人，他们平均一年产生的财富，还不到他们城市的平均水平。</li></ul></blockquote><hr><blockquote><ul><li>此外，几乎所有的量子物理学知识都是反日常经验的，它会让我们养成一种良好的科学思维精神——我们看到的一切事实，不一定是真的；我们所坚信的一切真理，不一定是对的。</li></ul></blockquote><hr><blockquote><ul><li>吾尝读《汉书》矣，盖数过而始尽之，如治道、人物、官制、兵法、财货之类，每一过专求一事。不待数过，而事事精窍矣</li></ul></blockquote><hr><blockquote><ul><li>焦点效应指的是，人们往往会把自己看做一切的中心，并且直觉地高估别人对我们的关注程度。</li></ul></blockquote><hr><blockquote><ul><li>尊敬每一个给我们帮助的人，向一切可以学习的人学习。有太多有师父的笨蛋，而天才常常特立独行。</li></ul></blockquote><hr><blockquote><ul><li>印象整饰是指一个人通过一定的方式影响别人形成对自己的印象的过程，由心理学家欧文 ·戈夫曼提出。戈夫曼认为，社会交往的一个重要方面就是我们有意或无意地尝试操纵和控制我们留给他人的印象，对于每一段社会交往而言，个体既是对自我的真实表达，同时又是为了对「观众」施加特定的影响。</li></ul></blockquote><hr><blockquote><ul><li>碎片化时间学习一些碎片化的东西，能否真正获得价值，这一点我是存疑的。</li></ul></blockquote><hr><blockquote><ul><li>倾听是一件很难的事。它需要你把自己的东西放下，才能真的听到对方怎么说。如果你固守着自己的东西，就不会有对新东西的好奇。</li></ul></blockquote><hr><blockquote><ul><li>他想起一些有关父亲的模糊记忆。同学拿到皮肤之后，他在“梦境之树”服务器建立了一个死亡骑士的角色，继续游戏。</li></ul></blockquote><hr><blockquote><ul><li>设计是在发现事物的本质规律，在既定的资源下，运用这些规律，去解决问题。</li></ul></blockquote><hr><blockquote><ul><li>控制欲增强，是因为爱情让我们暴露越来越多的软肋，不相信恋人会喜欢这个卑微的自己，需要用对方的包容和服从来确认自己值得被爱。</li></ul></blockquote><hr><blockquote><ul><li>如果能将我们的思维过程，用图像和清单表达出来，就能及时发现和修正bug，视觉化之后，也会更有条理和层次，更容易突破思维的边界。</li></ul></blockquote><hr><blockquote><ul><li>很多时候，我们所说的社会阶级上的固化和差异，并不仅仅是财富上的差距，更多是每个人眼界和选择的不同。</li></ul></blockquote><hr><blockquote><ul><li>“我这辈子遇到的来自各行各业的聪明人，没有一个不每天阅读的——没有，一个都没有。而沃伦读书之多，可能会让你感到吃惊，他是一本长了两条腿的书”。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文摘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何阅读一本书</title>
      <link href="/2017/09/07/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/"/>
      <url>/2017/09/07/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>太多的资讯就如同太少的资讯一样，都是一种对理解力的阻碍。换句话说，现代的媒体正以压倒性的泛滥资讯阻碍了我们的理解力。</li></ul></blockquote><hr><blockquote><ul><li>在检视阅读中，要回答的问题是：第一，这是什么样的一本书？第二，整本书在谈的是什么？第三，作者是借着怎样的整体架构，来发展他的观点或陈述他对这个主题的理解？你应该做一下笔记，把这些问题的答案写下来。</li></ul></blockquote><hr><blockquote><ul><li>换句话说，你一定要学会忘掉那些分开的步骤，才能表现出整体的动作，而每一个单一的步骤都还要确实表现得很好。但是，为了要忘掉这些单一的动作，一开始你必须先分别学会每一个单一的动作。只有这样，你才能将所有的动作连结起来，变成一个优秀的滑雪高手。</li></ul></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 如何读书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>追忆似水年华</title>
      <link href="/2017/09/07/%E8%BF%BD%E5%BF%86%E4%BC%BC%E6%B0%B4%E5%B9%B4%E5%8D%8E/"/>
      <url>/2017/09/07/%E8%BF%BD%E5%BF%86%E4%BC%BC%E6%B0%B4%E5%B9%B4%E5%8D%8E/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>我们的往事也一样。我们每每竭力回顾往事，总是枉然，即便使出全部智力也徒劳无益。往事不在智力的范围内，也非智力所及，而隐藏在某个我们猜想不到的物件之中，隐藏在这类物件赋予我们的感觉之中。这个物件，我们在死亡以前碰得到或碰不到全凭偶然了。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>是个晴天</title>
      <link href="/2017/09/06/daily_03/"/>
      <url>/2017/09/06/daily_03/</url>
      
        <content type="html"><![CDATA[<p><strong>今天早上  天气 <code>晴</code>  心情<code>不错</code></strong></p><p><img src="https://img.5bang.top/doodle.jpg" alt="Alt text"></p><hr><p>将近两个星期的阴雨连绵，今早终于放晴了。走在路上，地上的小虫子，来来回回，蹿个不停。路两旁的树叶，经过雨水的冲洗，在阳光下，也显得分外明绿。微风习习，我的脚步格外轻快。</p><p>其实，今天起的并不算早。因为昨晚在看国足的最后一场世界杯预选赛。我知道，只有出现奇迹，国足才有可能进入世界杯。但有的时候就是这样，明明知道奇迹不可能会发生，还是宁愿选择去相信。</p><p>结果不出意料，尽管国足2-1赢了卡塔尔，但由于其他场次的原因。中国没有拿到小组第三，也就结束了2018年俄罗斯世界杯的全部征程。我知道很多人对于国足存有偏见，觉得他们糟糕透了。的确，这些年国足的表现不尽如人意。但对于我而言，他就像是一个混的不济的亲人。就算他劣迹斑斑，不思进取。还是会去关注他，支持他。尽管有的时候，真的想大骂他两句。</p><p>从大一下学期爱上足球开始，我就一直在关注中国队。不得不说，西安的确是个足球氛围很好的地方。其实这两年国足还是取得了一些进步，尤其是里皮来了之后，球队风貌改观了不少。也取得了不错的成绩。</p><p>这个四年已经过去了，期待下一个四年的到来。这个四年我从河南来到了西安，从高中来到了大学，从迷茫来到了坚定。下一个四年，我不知道我会在哪里。但是 <code>Wherever I go,there you are.</code></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思考快与慢</title>
      <link href="/2017/09/06/%E6%80%9D%E8%80%83%E5%BF%AB%E4%B8%8E%E6%85%A2/"/>
      <url>/2017/09/06/%E6%80%9D%E8%80%83%E5%BF%AB%E4%B8%8E%E6%85%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>人们把相似度当成一种简单的启发手段（简单地说就是经验法则）来作艰难的判断。对这种启发性手段的依赖必然会造成其预测带有成见（系统性失误）。</li></ul></blockquote><hr><blockquote><ul><li>人们是根据从记忆中提取信息的容易程度来估测事情的重要程度的，而这往往也与媒体报道的广泛程度有关。常被提到的话题就在脑中变得鲜活，而其他的则会慢慢被遗忘。</li></ul></blockquote><hr><blockquote><ul><li>快思考既包括直觉思维的不同形式，比如专家式的和启发式的，也包括感觉和记忆等所有无意识的大脑活动，这些活动会让你知道桌上有盏台灯或者想起俄罗斯首都的名字来。</li></ul></blockquote><hr><blockquote><ul><li>人们在对某一未知量的特殊价值进行评估之前，总会事先对这个量进行一番考量，此时锚定效应就会发生。</li></ul></blockquote><hr><blockquote><ul><li>人类大脑的常规局限使它没有足够的能力重构过去的知识结构或信念。一旦接受了一种新的世界观（或对世界某一方面的看法发生了变化），你就会立即丧失很大一部分回忆能力，无法回想起自己观点改变之前的那些想法了。</li></ul></blockquote><hr><blockquote><ul><li>『事前验尸』：当一个机构即将做出一个重要决策但还没有下达决议时，科莱恩提议召集所有对这个决策有所了解的人开一次简短的会议。在会议之前有个简短的演说：『设想一下我们在一年后的今天已经实施了这个计划，但结果惨败。请用5~10分钟的时间写下惨败的缘由。』</li></ul></blockquote><hr><blockquote><ul><li>事前验尸的主要优点在于它引发了怀疑。另外，它还助长了支持该决策的人去探寻他们事前没有考虑到但可能存在的威胁。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心理学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>被讨厌的勇气</title>
      <link href="/2017/09/05/%E8%A2%AB%E8%AE%A8%E5%8E%8C%E7%9A%84%E5%8B%87%E6%B0%94/"/>
      <url>/2017/09/05/%E8%A2%AB%E8%AE%A8%E5%8E%8C%E7%9A%84%E5%8B%87%E6%B0%94/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>任何经历本身并不是成功或者失败的原因。我们并非因为自身经历中的刺激——所谓的心理创伤——而痛苦，事实上我们会从经历中发现符合自己目的的因素。决定我们自身的不是过去的经历，而是我们自己赋予经历的意义。”</li></ul></blockquote><hr><blockquote><ul><li>阿德勒心理学就是勇气心理学。你之所以不幸并不是因为过去或者环境，更不是因为能力不足，你只不过是缺乏“勇气”，可以说是缺乏“获得幸福的勇气”。</li></ul></blockquote><hr><blockquote><ul><li>之所以感觉孤独并不是因为只有你自己一个人，感觉自己被周围的他人、社会和共同体所疏远才会孤独。我们要想体会孤独也需要有他人的存在。也就是说，人只有在社会关系中才会成为“个人”。</li></ul></blockquote><hr><blockquote><ul><li>你由于太惧怕人际关系所以才会变得讨厌自己，你是在通过自我厌弃来逃避人际关系。</li></ul></blockquote><hr><blockquote><ul><li>如果真正地拥有自信，就不会自大。正因为有强烈的自卑感才会骄傲自大，那其实是想要故意炫耀自己很优秀。担心如果不那么做的话，就会得不到周围的认可。这完全是一种优越情结。</li></ul></blockquote><hr><blockquote><ul><li>它是陀思妥耶夫斯基的小说屮出现的一句话。“被铸造的自由”这种说法是何等的痛快啊！我认为这是一句非常精辟的话，它一语道破了货币的本质。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心理学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>少年巴比伦</title>
      <link href="/2017/09/05/%E5%B0%91%E5%B9%B4%E5%B7%B4%E6%AF%94%E4%BC%A6/"/>
      <url>/2017/09/05/%E5%B0%91%E5%B9%B4%E5%B7%B4%E6%AF%94%E4%BC%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>假如我一生中所经历的场景都可以倒放，以慢镜头的形式一遍遍重新来过，那么，医务室的那一幕肯定是排名前五位的经典镜头。</li></ul></blockquote><hr><blockquote><ul><li>嫉妒具有一种层次感，就是说，你只能去嫉妒那些和你差不多的人。</li></ul></blockquote><hr><blockquote><ul><li>这种记忆由于它本身就近似一个梦，于是它常常出现在我的梦里，被我反复磨洗，成为一个蹭亮的硬块。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青春 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pie模型</title>
      <link href="/2017/09/04/pie/"/>
      <url>/2017/09/04/pie/</url>
      
        <content type="html"><![CDATA[<h2 id="bug">bug</h2><ul><li><strong>fault</strong>: a <strong><em>static</em></strong> defect in the software 静态存在软件的缺陷</li><li><strong>error</strong>: an incorrect <strong><em>internal</em></strong> state that is the manifestation of some faults 运行到fault，触发了一个错误的中间状态</li><li><strong>failure</strong>:   <strong><em>external</em></strong>  失效，一直传播到软件外面使测试人员和用户可以观测到失效的行为</li></ul><h2 id="pie-model">pie model</h2><ul><li>执行必须通过错误的代码</li><li>触发错误的中间状态</li><li>失效行为</li></ul><blockquote><p>思考：有没有一种fault任何测试用例都无法检测出来，这种fault还称为fault吗？</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九月四日</title>
      <link href="/2017/09/04/daily_02/"/>
      <url>/2017/09/04/daily_02/</url>
      
        <content type="html"><![CDATA[<h2 id="前面">前面</h2><p>今天是新生开学的日子，看到了不少的小学弟和小学妹。不知不觉中，自己已经大四了。想想，都挺可怕的。不过，疑惑的是为什么有些小学弟看起来比我都老呢。哈哈，这还是挺让我宽慰的。<br>言归正传，大学的三年多里，还是挺有收获的。但大部分都不是在课堂上和老师那里。不过，还是有个别的老师非常有魅力。近代史的老师绝对算一个。这让我想起了一句话，<strong>学习任何东西，实际上都在学习它的历史。</strong><br>马上就要面临工作了，自己尽管平时也在捣鼓一些东西。但总是有些太杂，并不是十分精通某一方面。为了以后工作的舒心（少被别人骂），还是要系统专注地学习一些东西。</p><h2 id="为什么是前端">为什么是前端</h2><p>首先，我感兴趣的领域在web前端，web安全和软件测试。这些都是成为一名优秀的前端工程师所必不可少的。<br>其二，我本身是个比较懒的人。JavaScript有非常多强大的框架（在我敲下这个字的时候，可能就有一个框架出现），这会让解决问题变得很有效率。而且这个领域的迭代更新非常快，它会让我保持新鲜感，因为总有很多的知识需要我去了解。<br>还有，我能在知乎，GitHub,还有一些社区上接触到一些母牛不下崽（牛逼坏了。。。）的人，看他们的回答和项目源码，会收获很多。<br>最后，当然是<strong>最不重要</strong>的因素，那就是—前端领域的程序媛是很多的。。</p><h2 id="接下来要做的">接下来要做的</h2><p>还是要先从基础的知识开始，基础知识是最重要的，但往往也是最容易忽略的。我之前太不注重基础的学习，接下来的一段时间，要重新再学一遍HTML，CSS和JavaScript的基本语法。还有基本的布局方式，DOM操作和算法。<br>不要再纠结去哪学习这些东西了，就去知乎上jason同学推荐的<a href="http://www.imooc.com/learn/9" target="_blank" rel="noopener">慕课网</a>吧</p><h2 id="利用好blog">利用好Blog</h2><p>很多东西我看了一些视频或者书，我以为我懂了，可实际上并不是。而且，反复地用一种方式学习，效率总是很低。<br>博客是一种很好的学习方式，写作的过程，是再次思考的过程。接下来的一段时间，在每学完一部分知识后，我会写一篇博客来重新梳理。</p><h2 id="后面">后面</h2><p>希望我能坚持写博客，就像坚持跑步一样，这样每天会过的充实点。<br>写完这篇文章，也到了要睡觉的时候了。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个人的电影</title>
      <link href="/2017/09/04/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E7%94%B5%E5%BD%B1/"/>
      <url>/2017/09/04/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E7%94%B5%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>“很多人说我重复自己，这话是不错的。时间其实就是重复，我就是在不断地重复自己，不单是重复某一部电影，而且重复自己所有的电影。我把那些人物放在不同影片的背景下，看看他们到底会怎样。”</li></ul></blockquote><hr><blockquote><ul><li>不知道什么时候开始，我变成一个很小心的人，每次我穿雨衣的时候，我都会戴太阳眼镜。你永远都不会知道什么时候会下雨，什么时候出太阳。”</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 王家卫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提问的智慧</title>
      <link href="/2017/09/04/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7/"/>
      <url>/2017/09/04/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>我们不想掩饰对这样一些人的蔑视–他们不愿思考，或者在发问前不去完成他们应该做的事。这种人只会谋杀时间–他们只愿索取，从不付出，无端消耗我们的时间，而我们本可以把时间用在更有趣的问题或者更值得回答的人身上。 我们称这样的人为“失败者”（由于历史原因，我们有时把它拼作“lusers”）。</li></ul></blockquote><hr><blockquote><ul><li>黑客们总是善于分辨哪些问题应该由你自己解决；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由你来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。</li></ul></blockquote><hr><blockquote><ul><li>当你提出问题的时候，首先要说明在此之前你干了些什么；这将有助于树立你的形象：你不是一个妄图不劳而获的乞讨者，不愿浪费别人的时间。如果提问者能从答案中学到东西，我们更乐于回答他的问题。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人间词话</title>
      <link href="/2017/09/03/%E4%BA%BA%E9%97%B4%E8%AF%8D%E8%AF%9D/"/>
      <url>/2017/09/03/%E4%BA%BA%E9%97%B4%E8%AF%8D%E8%AF%9D/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>诗人对宇宙人生，须入乎其内，又须出乎其外。入乎其内，故能写之。出乎其外，故能观之。入乎其内，故有生气。出乎其外，故有高致。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> kindle 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随便写写</title>
      <link href="/2017/09/02/daily_01/"/>
      <url>/2017/09/02/daily_01/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面">写在前面</h2><p>有好几天没有跑步了，因为天气的原因（好吧，我承认这只是借口），可总归要找些有意思的事来做。我经常在闲暇的时候，翻翻一些别人的博客，那里可是大神经常出没的地方。<br>前两天我在网上搜一个问题，进入了一个博客，我非常喜欢这个博客的风格，简洁优雅。忽然之间我也想搭建一个这样的博客，我可以放一些学习和读书的笔记在上面，没事的时候也可以写写随笔之类的。<br>因为之前用过GitHub,也懂一些markdown的语法。上手起来并不是太难，不过还是遇到了非常多的问题。好在google都能够帮我解决。<br>花了两天多的时间，大致搭建好了这个博客，也将之前在kindle上标注的笔记移植到了这里。以后，我会一直更新和维护这个博客，不过更新的频率，全看心情了。<br>关于如何用Hexo+GitHub搭建博客，网上的教程实在是太多了。这里我就不再赘述了，就说一些值得注意的问题吧。</p><h2 id="不要用cmd来安装hexo">不要用<strong>cmd</strong>来安装Hexo</h2><p>下载并安装完成node.js后（官网下载速度极慢，推荐去中文网 <a href="http://nodejs.cn" target="_blank" rel="noopener">node.js</a>)，我们要来安装hexo，有些教程是让用cmd来安装hexo，但是<strong>never do that。<strong>因为会遇到鬼都不知道的问题,最好一开始就用</strong>Git</strong>来安装。</p><h2 id="cname文件不要有txt的后缀名">CNAME文件不要有txt的后缀名</h2><p>大致完成站点配置文件的部署后，我们可能会用自己的域名来替代长长的 GitHub Page。通过自己的域名来访问自己的博客，那可是件很cool的事。所以接下来需要做的事</p><blockquote><ul><li>通过GitHub绑定域名</li><li>添加解析</li><li>在source目录下新建CNAME文件</li></ul></blockquote><p>正常情况下，前两步都不会有什么问题，关键是第三步。在windows环境下，新建的文本文档会隐藏.txt的后缀名。我尝试过用记事本保存格式为<strong>所有文件</strong>，但是仍然会有.txt的后缀。后来，我用notepad++才解决这个问题。</p><h2 id="注意分类及标签格式">注意分类及标签格式</h2><p><strong>分类界面</strong><br>在source/路径下新建名为&quot;categories&quot;的文件夹，包含index.md文件，内容为</p><pre><code class="language-bash"> title: 分类 date:   type: &quot;categories&quot;</code></pre><p><strong>标签界面</strong> 同理</p><pre><code class="language-bash"> title: 标签 date:  type:  &quot;tags&quot;</code></pre><h2 id="其他">其他</h2><ul><li>推荐使用Next主题，<a href="http://theme-next.iissnan.com" target="_blank" rel="noopener">官方文档</a>清晰明了，上手比较容易</li><li>设置个人头像时注意尺寸，推荐 215*215 pix</li><li>解析域名时，GitHub Page会有一段时间登不上，过一会就好了</li><li>站点配置文件以及分类和标签下的index.md文件输入中文后，需要保存编码为<strong>UTF-8</strong>,否则会出现乱码</li><li>做出更改后如果一些设置没有更新，记得在Git中执行 <strong>hexo clean</strong></li></ul><h2 id="写在后面">写在后面</h2><p>如果自己动手后就会发现，采用Hexo框架开发个人博客，其实很简单。尽管Hexo基于node.js,但事实上搭建博客的整个过程，并不需要你懂太多的JavaScript。仅仅需要一些计算机的基础知识就够了。不过如果你想要更加个性化定制博客或者开发自己的主题，还是需要去了解JavaScript还有它的第三方库。<br>整个搭建过程虽然简单，但也会遇到各种各样的问题。一定要善于利用google或者百度，永远记住一句话：<strong>世界上没有问题是google一下解决不了的，如果有那就google两下。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
